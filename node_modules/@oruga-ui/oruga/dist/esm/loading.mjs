import { merge } from './helpers.mjs';
import { VueInstance } from './config.mjs';
import { b as registerComponent, a as registerComponentProgrammatic, u as use } from './plugins-9401a4a3.mjs';
import './Icon-33c4eb50.mjs';
import './ssr-acde8f04.mjs';
import { _ as __vue_component__ } from './Loading-8282bd81.mjs';
export { _ as OLoading } from './Loading-8282bd81.mjs';
import { I as InstanceRegistry } from './InstanceRegistry-4ed35c20.mjs';

let localVueInstance;
let instances = new InstanceRegistry();
const LoadingProgrammatic = {
  open(params) {
    let parent;
    const defaultParam = {
      programmatic: {
        instances
      }
    };

    if (params.parent) {
      parent = params.parent;
      delete params.parent;
    }

    const propsData = merge(defaultParam, params);

    if (window.Promise) {
      propsData.promise = new Promise((p1, p2) => {
        propsData.programmatic.resolve = p1;
        propsData.programmatic.reject = p2;
      });
    }

    const vm = typeof window !== 'undefined' && window.Vue ? window.Vue : localVueInstance || VueInstance;
    const LoadingComponent = vm.extend(__vue_component__);
    return new LoadingComponent({
      parent,
      el: document.createElement('div'),
      propsData
    });
  },

  closeAll() {
    instances.walk(entry => {
      entry.close(...arguments);
    });
  }

};
const Plugin = {
  install(Vue) {
    localVueInstance = Vue;
    registerComponent(Vue, __vue_component__);
    registerComponentProgrammatic(Vue, 'loading', LoadingProgrammatic);
  }

};
use(Plugin);

export default Plugin;
export { LoadingProgrammatic };
