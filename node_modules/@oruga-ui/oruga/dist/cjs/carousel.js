'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var helpers = require('./helpers.js');
var config = require('./config.js');
var plugins$1 = require('./plugins-01bd04cc.js');
var Icon = require('./Icon-2540a413.js');
var InjectedChildMixin = require('./InjectedChildMixin-f4307b88.js');

//
/**
 * A Slideshow for cycling images in confined spaces
 * @displayName Carousel
 * @example ./examples/Carousel.md
 * @style _carousel.scss
 */

var script = {
  name: 'OCarousel',
  components: {
    [Icon.__vue_component__.name]: Icon.__vue_component__
  },
  configField: 'carousel',
  mixins: [InjectedChildMixin.ProviderParentMixin('carousel', InjectedChildMixin.Sorted), plugins$1.BaseComponentMixin],
  props: {
    value: {
      type: Number,
      default: 0
    },
    interval: {
      type: Number,
      default: () => {
        return helpers.getValueByPath(config.getOptions(), 'carousel.interval', 3500);
      }
    },
    hasDrag: {
      type: Boolean,
      default: true
    },
    autoplay: {
      type: Boolean,
      default: false
    },
    pauseHover: {
      type: Boolean,
      default: false
    },
    repeat: {
      type: Boolean,
      default: false
    },
    indicator: {
      type: Boolean,
      default: true
    },
    indicatorInside: {
      type: Boolean,
      default: false
    },
    indicatorMode: {
      type: String,
      default: 'click'
    },
    indicatorPosition: {
      type: String,
      default: 'bottom'
    },
    indicatorStyle: {
      type: String,
      default: 'dots'
    },
    overlay: Boolean,
    itemsToShow: {
      type: Number,
      default: 1
    },
    itemsToList: {
      type: Number,
      default: 1
    },
    asIndicator: Boolean,
    arrow: {
      type: Boolean,
      default: true
    },
    arrowHover: {
      type: Boolean,
      default: true
    },
    iconPack: String,
    iconSize: String,
    iconPrev: {
      type: String,
      default: () => {
        return helpers.getValueByPath(config.getOptions(), 'carousel.iconPrev', 'chevron-left');
      }
    },
    iconNext: {
      type: String,
      default: () => {
        return helpers.getValueByPath(config.getOptions(), 'carousel.iconNext', 'chevron-right');
      }
    },
    breakpoints: {
      type: Object,
      default: () => ({})
    },
    rootClass: [String, Function, Array],
    overlayClass: [String, Function, Array],
    sceneClass: [String, Function, Array],
    itemsClass: [String, Function, Array],
    itemsDraggingClass: [String, Function, Array],
    arrowIconClass: [String, Function, Array],
    arrowIconPrevClass: [String, Function, Array],
    arrowIconNextClass: [String, Function, Array],
    indicatorsClass: [String, Function, Array],
    indicatorsInsideClass: [String, Function, Array],
    indicatorsInsidePositionClass: [String, Function, Array],
    indicatorItemClass: [String, Function, Array],
    indicatorItemActiveClass: [String, Function, Array],
    indicatorItemStyleClass: [String, Function, Array]
  },

  data() {
    return {
      activeIndex: this.value,
      scrollIndex: this.value,
      delta: 0,
      dragX: false,
      hold: 0,
      windowWidth: 0,
      touch: false,
      observer: null,
      refresh_: 0,
      itemsHovered: false,
      isPause: false,
      timer: null
    };
  },

  computed: {
    rootClasses() {
      return [this.computedClass('rootClass', 'o-car'), {
        [this.computedClass('overlayClass', 'o-car__overlay')]: this.overlay
      }];
    },

    sceneClasses() {
      return [this.computedClass('sceneClass', 'o-car__scene')];
    },

    itemsClasses() {
      return [this.computedClass('itemsClass', 'o-car__items'), {
        [this.computedClass('itemsDraggingClass', 'o-car__items--dragging')]: this.dragging
      }];
    },

    arrowIconClasses() {
      return [this.computedClass('arrowIconClass', 'o-car__arrow__icon')];
    },

    arrowIconPrevClasses() {
      return [...this.arrowIconClasses, this.computedClass('arrowIconPrevClass', 'o-car__arrow__icon-prev')];
    },

    arrowIconNextClasses() {
      return [...this.arrowIconClasses, this.computedClass('arrowIconNextClass', 'o-car__arrow__icon-next')];
    },

    indicatorsClasses() {
      return [this.computedClass('indicatorsClass', 'o-car__indicators'), {
        [this.computedClass('indicatorsInsideClass', 'o-car__indicators--inside')]: this.indicatorInside
      }, {
        [this.computedClass('indicatorsInsidePositionClass', 'o-car__indicators--inside--', this.indicatorPosition)]: this.indicatorInside && this.indicatorPosition
      }];
    },

    indicatorClasses() {
      return [this.computedClass('indicatorClass', 'o-car__indicator')];
    },

    dragging() {
      return this.dragX !== false;
    },

    itemStyle() {
      return `width: ${this.itemWidth}px;`;
    },

    translation() {
      return -helpers.bound(this.delta + this.scrollIndex * this.itemWidth, 0, (this.childItems.length - this.settings.itemsToShow) * this.itemWidth);
    },

    total() {
      return this.childItems.length - this.settings.itemsToShow;
    },

    indicatorCount() {
      return Math.ceil(this.total / this.settings.itemsToList) + 1;
    },

    indicatorIndex() {
      return Math.ceil(this.scrollIndex / this.settings.itemsToList);
    },

    hasArrows() {
      return this.settings.arrowHover && this.itemsHovered || !this.settings.arrowHover;
    },

    hasPrev() {
      return (this.settings.repeat || this.scrollIndex > 0) && this.hasArrows;
    },

    hasNext() {
      return (this.settings.repeat || this.scrollIndex < this.total) && this.hasArrows;
    },

    breakpointKeys() {
      return Object.keys(this.breakpoints).sort((a, b) => b - a);
    },

    settings() {
      let breakpoint = this.breakpointKeys.filter(breakpoint => {
        if (this.windowWidth >= breakpoint) {
          return true;
        }
      })[0];

      if (breakpoint) {
        return { ...this.$props,
          ...this.breakpoints[breakpoint]
        };
      }

      return this.$props;
    },

    itemWidth() {
      if (this.windowWidth) {
        // Ensure component is mounted

        /* eslint-disable-next-line */
        this.refresh_; // We force the computed property to refresh if this prop is changed

        const rect = this.$el.getBoundingClientRect();
        return rect.width / this.settings.itemsToShow;
      }

      return 0;
    }

  },
  watch: {
    /**
     * When v-model is changed set the new active item.
     */
    value(value) {
      if (value <= this.childItems.length - 1) {
        this.activeIndex = value;
        this.switchTo(value * this.settings.itemsToList, true);
      }
    },

    /**
     *  When autoplay is changed, start or pause timer accordingly
     */
    autoplay(status) {
      if (status) {
        this.startTimer();
      } else {
        this.pauseTimer();
      }
    },

    /**
     *  Since the timer can get paused at the end, if repeat is changed we need to restart it
     */
    repeat(status) {
      if (status) {
        this.startTimer();
      }
    }

  },
  methods: {
    indicatorItemClasses(index) {
      return [this.computedClass('indicatorItemClass', 'o-car__indicator__item'), {
        [this.computedClass('indicatorItemActiveClass', 'o-car__indicator__item--active')]: this.indicatorIndex === index
      }, {
        [this.computedClass('indicatorItemStyleClass', 'o-car__indicator__item--', this.indicatorStyle)]: this.indicatorStyle
      }];
    },

    onMouseEnter() {
      this.itemsHovered = true;
      this.checkPause();
    },

    onMouseLeave() {
      this.itemsHovered = false;
      this.startTimer();
    },

    startTimer() {
      if (!this.autoplay || this.timer) return;
      this.isPause = false;
      this.timer = setInterval(() => {
        if (!this.repeat && this.activeIndex >= this.childItems.length - 1) {
          this.pauseTimer();
        } else {
          this.next();
        }
      }, this.interval);
    },

    pauseTimer() {
      this.isPause = true;

      if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
      }
    },

    restartTimer() {
      this.pauseTimer();
      this.startTimer();
    },

    checkPause() {
      if (this.pauseHover && this.autoplay) {
        this.pauseTimer();
      }
    },

    modeChange(trigger, value) {
      if (this.indicatorMode === trigger) {
        return this.switchTo(value * this.settings.itemsToList);
      }
    },

    resized() {
      this.windowWidth = window.innerWidth;
    },

    switchTo(newIndex, onlyMove = this.asIndicator) {
      if (this.settings.repeat) {
        newIndex = helpers.mod(newIndex, this.total + 1);
      }

      newIndex = helpers.bound(newIndex, 0, this.total);
      this.scrollIndex = newIndex;
      this.$emit('scroll', this.indicatorIndex);

      if (!onlyMove) {
        this.activeIndex = Math.ceil(newIndex / this.settings.itemsToList);

        if (this.value !== this.activeIndex) {
          this.$emit('input', this.activeIndex);
        }
      }
    },

    next() {
      this.switchTo(this.scrollIndex + this.settings.itemsToList);
    },

    prev() {
      this.switchTo(this.scrollIndex - this.settings.itemsToList);
    },

    // handle drag event
    dragStart(event) {
      if (this.dragging || !this.settings.hasDrag || event.button !== 0 && event.type !== 'touchstart') return;
      this.hold = Date.now();
      this.touch = !!event.touches;
      this.dragX = this.touch ? event.touches[0].clientX : event.clientX;

      if (this.touch) {
        this.pauseTimer();
      }

      window.addEventListener(this.touch ? 'touchmove' : 'mousemove', this.dragMove);
      window.addEventListener(this.touch ? 'touchend' : 'mouseup', this.dragEnd);
    },

    dragMove(event) {
      if (!this.dragging) return;
      const dragEndX = event.touches ? (event.changedTouches[0] || event.touches[0]).clientX : event.clientX;
      this.delta = this.dragX - dragEndX;

      if (!event.touches) {
        event.preventDefault();
      }
    },

    dragEnd(event) {
      if (!this.dragging && !this.hold) return;

      if (this.hold) {
        const signCheck = helpers.sign(this.delta);
        const results = Math.round(Math.abs(this.delta / this.itemWidth) + 0.15); // Hack

        this.switchTo(this.scrollIndex + signCheck * results);
      }

      this.delta = 0;
      this.dragX = false;

      if (event && event.touches) {
        this.startTimer();
      }

      window.removeEventListener(this.touch ? 'touchmove' : 'mousemove', this.dragMove);
      window.removeEventListener(this.touch ? 'touchend' : 'mouseup', this.dragEnd);
    },

    refresh() {
      this.$nextTick(() => {
        this.refresh_++;
      });
    }

  },

  mounted() {
    if (typeof window !== 'undefined') {
      if (window.ResizeObserver) {
        this.observer = new ResizeObserver(this.refresh);
        this.observer.observe(this.$el);
      }

      window.addEventListener('resize', this.resized);
      document.addEventListener('animationend', this.refresh);
      document.addEventListener('transitionend', this.refresh);
      document.addEventListener('transitionstart', this.refresh);
      this.resized();
      this.startTimer();
    }

    if (this.$attrs.config) {
      throw new Error('The config prop was removed, you need to use v-bind instead');
    }
  },

  beforeDestroy() {
    if (typeof window !== 'undefined') {
      if (window.ResizeObserver) {
        this.observer.disconnect();
      }

      window.removeEventListener('resize', this.resized);
      document.removeEventListener('animationend', this.refresh);
      document.removeEventListener('transitionend', this.refresh);
      document.removeEventListener('transitionstart', this.refresh);
      this.dragEnd();
      this.pauseTimer();
    }
  }

};

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.rootClasses,on:{"mouseenter":_vm.onMouseEnter,"mouseleave":_vm.onMouseLeave}},[_c('div',{class:_vm.sceneClasses},[_c('div',{class:_vm.itemsClasses,style:('transform:translateX('+_vm.translation+'px)'),on:{"mousedown":_vm.dragStart,"touchstart":_vm.dragStart}},[_vm._t("default")],2),_vm._t("arrow",[(_vm.arrow)?[_c('o-icon',{directives:[{name:"show",rawName:"v-show",value:(_vm.hasPrev),expression:"hasPrev"}],class:_vm.arrowIconPrevClasses,attrs:{"pack":_vm.iconPack,"icon":_vm.iconPrev,"size":_vm.iconSize,"both":""},nativeOn:{"click":function($event){return _vm.prev($event)}}}),_c('o-icon',{directives:[{name:"show",rawName:"v-show",value:(_vm.hasNext),expression:"hasNext"}],class:_vm.arrowIconNextClasses,attrs:{"pack":_vm.iconPack,"icon":_vm.iconNext,"size":_vm.iconSize,"both":""},nativeOn:{"click":function($event){return _vm.next($event)}}})]:_vm._e()],{"hasPrev":_vm.hasPrev,"prev":_vm.prev,"hasNext":_vm.hasNext,"next":_vm.next})],2),_vm._t("indicators",[(_vm.childItems.length)?[(_vm.indicator && !_vm.asIndicator)?_c('div',{class:_vm.indicatorsClasses},_vm._l((_vm.indicatorCount),function(_,index){return _c('a',{key:index,class:_vm.indicatorClasses,on:{"mouseover":function($event){return _vm.modeChange('hover', index)},"click":function($event){return _vm.modeChange('click', index)}}},[_vm._t("indicator",[_c('span',{class:_vm.indicatorItemClasses(index)})],{"i":index})],2)}),0):_vm._e()]:_vm._e()],{"active":_vm.activeIndex,"switchTo":_vm.switchTo,"indicatorIndex":_vm.indicatorIndex}),(_vm.overlay)?[_vm._t("overlay")]:_vm._e()],2)};
var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = /*#__PURE__*/plugins$1.normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

//
/**
 * @displayName Carousel Item
 */

var script$1 = {
  name: 'OCarouselItem',
  configField: 'carousel',
  mixins: [InjectedChildMixin.InjectedChildMixin('carousel', InjectedChildMixin.Sorted$1), plugins$1.BaseComponentMixin],
  props: {
    itemClass: [String, Function, Array],
    itemActiveClass: [String, Function, Array]
  },
  computed: {
    itemClasses() {
      return [this.computedClass('itemClass', 'o-car__item'), {
        [this.computedClass('itemActiveClass', 'o-car__item--active')]: this.isActive
      }];
    },

    itemStyle() {
      return `width: ${this.parent.itemWidth}px;`;
    },

    isActive() {
      return this.parent.activeIndex === this.index;
    }

  },
  methods: {
    onClick(event) {
      if (this.isActive) {
        this.parent.$emit('click', event);
      }

      if (this.parent.asIndicator) {
        this.parent.activeIndex = this.index;
        this.parent.$emit('input', this.index);
      }
    }

  }
};

/* script */
const __vue_script__$1 = script$1;

/* template */
var __vue_render__$1 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.itemClasses,style:(_vm.itemStyle),on:{"click":_vm.onClick}},[_vm._t("default")],2)};
var __vue_staticRenderFns__$1 = [];

  /* style */
  const __vue_inject_styles__$1 = undefined;
  /* scoped */
  const __vue_scope_id__$1 = undefined;
  /* module identifier */
  const __vue_module_identifier__$1 = undefined;
  /* functional template */
  const __vue_is_functional_template__$1 = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1 = /*#__PURE__*/plugins$1.normalizeComponent(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    false,
    undefined,
    undefined,
    undefined
  );

const Plugin = {
  install(Vue) {
    plugins$1.registerComponent(Vue, __vue_component__);
    plugins$1.registerComponent(Vue, __vue_component__$1);
  }

};
plugins$1.use(Plugin);

exports.OCarousel = __vue_component__;
exports.OCarouselItem = __vue_component__$1;
exports.default = Plugin;
