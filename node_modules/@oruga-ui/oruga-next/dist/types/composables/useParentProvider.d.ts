import { Component, ComputedRef, MaybeRefOrGetter, Ref } from 'vue';
export type ProviderItem<T = unknown> = {
    index: number;
    data?: T;
    identifier: string;
};
type ProviderParentOptions<T = unknown> = {
    /**
     * Root element of the provider component
     */
    rootRef?: MaybeRefOrGetter<HTMLElement | Component | null | undefined>;
    /**
     * Override the provide/inject key.
     * Default is the component configField attribute
     */
    key?: string;
    /**
     * Additional data provided for the child to the item
     */
    data?: ComputedRef<T>;
};
/**
 * Provide functionalities and data to child components
 * @param options parent provider options
 */
export declare function useProviderParent<ItemData = unknown, ParentData = unknown>(options?: ProviderParentOptions<ParentData>): {
    childItems: Readonly<Ref<ProviderItem<ItemData>[]>>;
};
type ProviderChildOptions<T = unknown> = {
    /**
     * Override the provide/inject key.
     * Default is the component configField attribute
     */
    key?: string;
    /**
     * Does the child need the be below the parent?
     * @default true
     */
    needParent?: boolean;
    /**
     * Additional data appended to the item
     */
    data?: ComputedRef<T>;
    /**
     * Register child on parent
     * @default true
     */
    register?: boolean;
};
export declare function useProviderChild<ParentData, ItemData = unknown>(options: Omit<ProviderChildOptions<ItemData>, "needParent"> & {
    needParent: true;
}): {
    parent: Readonly<Ref<ParentData>>;
    item: Readonly<Ref<ProviderItem<ItemData> | undefined>>;
};
export declare function useProviderChild<ParentData, ItemData = unknown>(options: Omit<ProviderChildOptions<ItemData>, "needParent"> & {
    needParent: false;
}): {
    parent: Readonly<Ref<ParentData | undefined>>;
    item: Readonly<Ref<ProviderItem<ItemData> | undefined>>;
};
export declare function useProviderChild<ParentData, ItemData = unknown>(options: Omit<ProviderChildOptions<ItemData>, "needParent"> & {
    register: false;
}): {
    parent: Readonly<Ref<ParentData>>;
    item: Readonly<Ref<undefined>>;
};
export declare function useProviderChild<ParentData, ItemData = unknown>(options: Omit<ProviderChildOptions<ItemData>, "needParent" | "register"> & {
    needParent: true;
    register: true;
}): {
    parent: Readonly<Ref<ParentData>>;
    item: Readonly<Ref<ProviderItem<ItemData>>>;
};
export declare function useProviderChild<ParentData, ItemData = unknown>(options?: Omit<ProviderChildOptions<ItemData>, "needParent" | "register">): {
    parent: Readonly<Ref<ParentData>>;
    item: Readonly<Ref<ProviderItem<ItemData>>>;
};
export {};
