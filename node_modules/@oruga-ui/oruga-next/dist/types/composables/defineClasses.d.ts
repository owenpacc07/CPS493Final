import { MaybeRefOrGetter, Ref, EffectScope } from 'vue';
import { ClassBind } from '../types';
type ComputedClass = readonly [
    className: string,
    defaultClass: string,
    suffix?: MaybeRefOrGetter<string | undefined> | null,
    apply?: MaybeRefOrGetter<boolean> | null
];
/** Helper function to get all active classes from a class binding list */
export declare const getActiveClasses: (classes: MaybeRefOrGetter<ClassBind[]>) => string[];
type DefineClassesOptions = {
    /**
     * Pass a custom effect scope.
     * By default a new effect scope is created.
     * An error will be thrown if no current scope or a custom scope is given.
     * @default effectScope()
     */
    scope?: EffectScope;
    /**
     * Pass a custom props object which will be watched on additionaly to the current component instance props.
     * this will recompute the class bind property when the class property change.
     * @default vm.proxy?.$props
     */
    props?: Record<string, any>;
};
export declare function defineClasses(...args: [...ComputedClass[], DefineClassesOptions]): Ref<ClassBind[]>;
export declare function defineClasses(...args: [...ComputedClass[]]): Ref<ClassBind[]>;
export {};
