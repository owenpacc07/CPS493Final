import { ComponentPublicInstance, MaybeRefOrGetter, MaybeRef, Component } from 'vue';
export type MaybeElement = Element | Document | Window | HTMLElement | SVGElement | Component | ComponentPublicInstance | undefined | null;
export type UnRefElementReturn<T extends MaybeElement = MaybeElement> = T extends ComponentPublicInstance ? Exclude<MaybeElement, ComponentPublicInstance> : T extends Component ? HTMLElement : T | undefined;
/** Get the dom element of a ref of element or Vue component instance */
export declare function unrefElement<T extends MaybeElement>(elRef: MaybeRefOrGetter<T> | MaybeRef<T>): UnRefElementReturn<T>;
/** Resolve an HTML element based on query selector or an explizit dom element */
export declare function resolveElement(target: MaybeRefOrGetter<HTMLElement | string>): HTMLElement | null;
