import { TableColumn, TableRow } from './types';
declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onSelect?: ((newRow: T, oldRow: T) => any) | undefined;
        readonly onSort?: ((column: TableColumn<T>, direction: "desc" | "asc", event: Event) => any) | undefined;
        readonly onClick?: ((row: T, index: number, event: Event) => any) | undefined;
        readonly onContextmenu?: ((row: T, index: number, event: Event) => any) | undefined;
        readonly onDblclick?: ((row: T, index: number, event: Event) => any) | undefined;
        readonly onDragend?: ((row: T, index: number, event: DragEvent) => any) | undefined;
        readonly onDragleave?: ((row: T, index: number, event: DragEvent) => any) | undefined;
        readonly onDragover?: ((row: T, index: number, event: DragEvent) => any) | undefined;
        readonly onDragstart?: ((row: T, index: number, event: DragEvent) => any) | undefined;
        readonly onDrop?: ((row: T, index: number, event: DragEvent) => any) | undefined;
        readonly onMouseenter?: ((row: T, index: number, event: Event) => any) | undefined;
        readonly onMouseleave?: ((row: T, index: number, event: Event) => any) | undefined;
        readonly onCheck?: ((value: T[], row: T) => any) | undefined;
        readonly "onUpdate:currentPage"?: ((...args: unknown[]) => any) | undefined;
        readonly "onUpdate:selected"?: ((...args: unknown[]) => any) | undefined;
        readonly "onUpdate:checkedRows"?: ((...args: unknown[]) => any) | undefined;
        readonly "onUpdate:detailedRows"?: ((...args: unknown[]) => any) | undefined;
        readonly "onPage-change"?: ((page: number) => any) | undefined;
        readonly "onCheck-all"?: ((value: T[]) => any) | undefined;
        readonly "onFilters-change"?: ((value: Record<string, string>) => any) | undefined;
        readonly "onFilters-event"?: ((filtersEvent: string, filters: Record<string, string>, event: Event) => any) | undefined;
        readonly "onDetails-open"?: ((row: T) => any) | undefined;
        readonly "onDetails-close"?: ((row: T) => any) | undefined;
        readonly "onCell-click"?: ((row: T, column: TableColumn<T>, index: number, colindex: number, event: Event) => any) | undefined;
        readonly onColumndragstart?: ((column: TableColumn<T>, index: number, event: DragEvent) => any) | undefined;
        readonly onColumndragend?: ((column: TableColumn<T>, index: number, event: DragEvent) => any) | undefined;
        readonly onColumndrop?: ((column: TableColumn<T>, index: number, event: DragEvent) => any) | undefined;
        readonly onColumndragleave?: ((column: TableColumn<T>, index: number, event: DragEvent) => any) | undefined;
        readonly onColumndragover?: ((column: TableColumn<T>, index: number, event: DragEvent) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onDragend" | "onDragleave" | "onDragover" | "onDragstart" | "onDrop" | "onClick" | "onContextmenu" | "onDblclick" | "onMouseenter" | "onMouseleave" | "onSelect" | "onSort" | "onCheck" | "onUpdate:currentPage" | "onUpdate:selected" | "onUpdate:checkedRows" | "onUpdate:detailedRows" | "onPage-change" | "onCheck-all" | "onFilters-change" | "onFilters-event" | "onDetails-open" | "onDetails-close" | "onCell-click" | "onColumndragstart" | "onColumndragend" | "onColumndrop" | "onColumndragleave" | "onColumndragover"> & ({
        currentPage?: number;
        selected?: T;
        checkedRows?: T[];
        detailedRows?: T[];
    } & {
        override?: boolean;
        data?: T[] | undefined;
        columns?: TableColumn<T>[] | undefined;
        rowKey?: string | keyof T | undefined;
        rowClass?: ((row: T, index: number) => string) | undefined;
        thAttrs?: ((column: TableColumn<T>) => object) | undefined;
        tdAttrs?: ((row: T, column: TableColumn<T>) => object) | undefined;
        customCompare?: ((a: T, b: T) => boolean) | undefined;
        bordered?: boolean;
        striped?: boolean;
        narrowed?: boolean;
        hoverable?: boolean;
        selected?: T | undefined;
        selectable?: boolean;
        isRowSelectable?: ((row: T) => boolean) | undefined;
        showHeader?: boolean;
        draggable?: boolean;
        draggableColumn?: boolean;
        scrollable?: boolean;
        stickyHeader?: boolean;
        height?: number | string;
        checkable?: boolean;
        checkableHeader?: boolean;
        stickyCheckbox?: boolean;
        checkedRows?: T[] | undefined;
        checkboxPosition?: "left" | "right";
        checkboxVariant?: string;
        isRowChecked?: ((row: T) => boolean) | undefined;
        isRowCheckable?: ((row: T) => boolean) | undefined;
        backendSorting?: boolean;
        defaultSort?: string | [string, "asc" | "desc"];
        defaultSortDirection?: "asc" | "desc";
        sortIcon?: string;
        sortIconSize?: string;
        iconPack?: string;
        detailed?: boolean;
        detailedRows?: T[] | undefined;
        isDetailedVisible?: ((row: T) => boolean) | undefined;
        showDetailIcon?: boolean;
        detailIcon?: string;
        customDetailRow?: boolean;
        detailTransition?: string;
        paginated?: boolean;
        backendPagination?: boolean;
        total?: number;
        currentPage?: number;
        perPage?: number | string;
        paginationPosition?: "bottom" | "top" | "both";
        paginationSize?: string;
        paginationRounded?: boolean;
        paginationSimple?: boolean;
        paginationOrder?: "centered" | "right" | "left";
        backendFiltering?: boolean;
        filtersIcon?: string;
        filtersPlaceholder?: string;
        filtersEvent?: string;
        filterDebounce?: number;
        emptyLabel?: string;
        emptyIcon?: string;
        emptyIconSize?: string;
        loading?: boolean;
        loadingIcon?: string;
        loadingLabel?: string;
        mobileBreakpoint?: string;
        mobileCards?: boolean;
        mobileSortPlaceholder?: string;
        ariaNextLabel?: string;
        ariaPreviousLabel?: string;
        ariaPageLabel?: string;
        ariaCurrentLabel?: string;
    } & Partial<{
        rootClass: import('../../types').ComponentClass;
        mobileClass: import('../../types').ComponentClass;
        mobileSortClass: import('../../types').ComponentClass;
        wrapperClass: import('../../types').ComponentClass;
        stickyHeaderClass: import('../../types').ComponentClass;
        scrollableClass: import('../../types').ComponentClass;
        tableClass: import('../../types').ComponentClass;
        borderedClass: import('../../types').ComponentClass;
        stripedClass: import('../../types').ComponentClass;
        narrowedClass: import('../../types').ComponentClass;
        hoverableClass: import('../../types').ComponentClass;
        emptyClass: import('../../types').ComponentClass;
        thClass: import('../../types').ComponentClass;
        thPositionClass: import('../../types').ComponentClass;
        thCheckboxClass: import('../../types').ComponentClass;
        thStickyClass: import('../../types').ComponentClass;
        thDetailedClass: import('../../types').ComponentClass;
        thSortableClass: import('../../types').ComponentClass;
        thSortIconClass: import('../../types').ComponentClass;
        thCurrentSortClass: import('../../types').ComponentClass;
        thUnselectableClass: import('../../types').ComponentClass;
        thSubheadingClass: import('../../types').ComponentClass;
        trSelectedClass: import('../../types').ComponentClass;
        trCheckedClass: import('../../types').ComponentClass;
        trDetailedClass: import('../../types').ComponentClass;
        trEmptyClass: import('../../types').ComponentClass;
        tdClass: import('../../types').ComponentClass;
        tdPositionClass: import('../../types').ComponentClass;
        tdStickyClass: import('../../types').ComponentClass;
        tdCheckboxClass: import('../../types').ComponentClass;
        tdDetailedChevronClass: import('../../types').ComponentClass;
        paginationWrapperClass: import('../../types').ComponentClass;
        footerClass: import('../../types').ComponentClass;
        loadingClasses: object;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        rows: import('vue').ComputedRef<TableRow<T>[]>;
        sort: (field: string, direction: "asc" | "desc") => void;
    }>): void;
    attrs: any;
    slots: {
        default?(_: {}): any;
        before?(_: {}): any;
        after?(_: {}): any;
        pagination?(_: {
            current: number;
            perPage: string | number;
            total: number;
            change: (page: any) => any;
        }): any;
        pagination?(_: {
            current: number;
            perPage: string | number;
            total: number;
            change: (page: any) => any;
        }): any;
        'top-left'?(_: {}): any;
        caption?(_: {}): any;
        preheader?(_: {}): any;
        'check-all'?(_: {
            isAllChecked: boolean;
            isAllUncheckable: boolean;
            checkAll: () => void;
        }): any;
        'check-all'?(_: {
            isAllChecked: boolean;
            isAllUncheckable: boolean;
            checkAll: () => void;
        }): any;
        subheading?(_: {}): any;
        detail?(_: {
            row: T;
            index: number;
        }): any;
        detail?(_: {
            row: T;
            index: number;
        }): any;
        empty?(_: {}): any;
        footer?(_: {
            columnCount: number;
            rowCount: number;
        }): any;
        footer?(_: {
            columnCount: number;
            rowCount: number;
        }): any;
        loading?(_: {
            loading: boolean;
        }): any;
        'bottom-left'?(_: {}): any;
    };
    emit: (((evt: "select", newRow: T, oldRow: T) => void) & ((evt: "sort", column: TableColumn<T>, direction: "desc" | "asc", event: Event) => void) & ((evt: "click", row: T, index: number, event: Event) => void) & ((evt: "contextmenu", row: T, index: number, event: Event) => void) & ((evt: "dblclick", row: T, index: number, event: Event) => void) & ((evt: "dragend", row: T, index: number, event: DragEvent) => void) & ((evt: "dragleave", row: T, index: number, event: DragEvent) => void) & ((evt: "dragover", row: T, index: number, event: DragEvent) => void) & ((evt: "dragstart", row: T, index: number, event: DragEvent) => void) & ((evt: "drop", row: T, index: number, event: DragEvent) => void) & ((evt: "mouseenter", row: T, index: number, event: Event) => void) & ((evt: "mouseleave", row: T, index: number, event: Event) => void) & ((evt: "check", value: T[], row: T) => void) & ((evt: "update:currentPage", value: number) => void) & ((evt: "update:selected", value: T) => void) & ((evt: "update:checkedRows", value: T[]) => void) & ((evt: "update:detailedRows", value: T[]) => void) & ((evt: "page-change", page: number) => void) & ((evt: "check-all", value: T[]) => void) & ((evt: "filters-change", value: Record<string, string>) => void) & ((evt: "filters-event", filtersEvent: string, filters: Record<string, string>, event: Event) => void) & ((evt: "details-open", row: T) => void) & ((evt: "details-close", row: T) => void) & ((evt: "cell-click", row: T, column: TableColumn<T>, index: number, colindex: number, event: Event) => void) & ((evt: "columndragstart", column: TableColumn<T>, index: number, event: DragEvent) => void) & ((evt: "columndragend", column: TableColumn<T>, index: number, event: DragEvent) => void) & ((evt: "columndrop", column: TableColumn<T>, index: number, event: DragEvent) => void) & ((evt: "columndragleave", column: TableColumn<T>, index: number, event: DragEvent) => void) & ((evt: "columndragover", column: TableColumn<T>, index: number, event: DragEvent) => void)) & (((evt: "update:currentPage", value: number) => void) & ((evt: "update:selected", value: T) => void) & ((evt: "update:checkedRows", value: T[]) => void) & ((evt: "update:detailedRows", value: T[]) => void));
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
