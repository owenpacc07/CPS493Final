import { PropType } from 'vue';
import { ComponentClass } from '../../types';
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    current: {
        type: NumberConstructor;
        default: undefined;
    };
    paginated: {
        type: BooleanConstructor;
        default: boolean;
    };
    rootClass: {
        type: PropType<ComponentClass>;
        default: undefined;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (event: number) => any;
    "update:current": (...args: unknown[]) => any;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    current: {
        type: NumberConstructor;
        default: undefined;
    };
    paginated: {
        type: BooleanConstructor;
        default: boolean;
    };
    rootClass: {
        type: PropType<ComponentClass>;
        default: undefined;
    };
}>> & Readonly<{
    onChange?: ((event: number) => any) | undefined;
    "onUpdate:current"?: ((...args: unknown[]) => any) | undefined;
}>, {
    rootClass: ComponentClass;
    paginated: boolean;
    current: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
