import { EmitsToProps, MaybeRefOrGetter, VNodeTypes } from 'vue';
import { ProgrammaticComponentProps, ProgrammaticComponentEmits, ProgrammaticComponentExpose } from './ProgrammaticComponent';
declare module "../../index" {
    interface OrugaProgrammatic {
        programmatic: typeof ComponentProgrammatic;
    }
}
/** useProgrammatic composable `open` function options */
export type ProgrammaticOptions<C extends VNodeTypes> = {
    /**
     * Specify a target the component get rendered into.
     * @default `document.body`
     */
    target?: MaybeRefOrGetter<string | HTMLElement | null>;
    /**
     * Specify the template `id` for the programmatic container element.
     * @default `programmatic-app`
     */
    appId?: string;
} & Omit<ProgrammaticComponentProps<C>, "component"> & // component props
EmitsToProps<Omit<ProgrammaticComponentEmits, "destroy">>;
/** public options interface for programmatically called components */
export type ProgrammaticComponentOptions = EmitsToProps<Pick<ProgrammaticComponentEmits, "close">> & Record<string, any>;
/** useProgrammatic composable `open` function return value */
export type ProgrammaticExpose = ProgrammaticComponentExpose;
export declare const ComponentProgrammatic: {
    /** Returns the number of registered active instances. */
    count: () => number;
    /**
     * Create a new programmatic component instance.
     * @param component component to render
     * @param options render options
     */
    open<C extends VNodeTypes>(component: C, options?: ProgrammaticOptions<C>): ProgrammaticExpose;
    /** close the last registred instance in the global programmatic instance registry */
    close(...args: unknown[]): void;
    /** close all instances in the global programmatic instance registry */
    closeAll(...args: unknown[]): void;
};
export default ComponentProgrammatic;
