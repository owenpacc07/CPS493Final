import { ComponentInternalInstance, VNodeTypes } from 'vue';
import { ComponentProps } from 'vue-component-type-helpers';
import { default as InstanceRegistry } from './InstanceRegistry';
export type ProgrammaticComponentProps<C extends VNodeTypes> = {
    /**
     * Component to be injected.
     * Terminate the component by emitting a 'close' event â€” emits('close')
     */
    component: C;
    /**
     * Props to be binded to the injected component.
     * Both attributes and properties can be used in props.
     * Vue automatically picks the right way to assign it.
     * `class` and `style` have the same object / array value support like in templates.
     * Event listeners should be passed as onXxx.
     * @see https://vuejs.org/api/render-function.html#h
     */
    props?: ComponentProps<C> | {
        container?: HTMLElement;
    };
    /** Programmatic component registry instance */
    registry?: InstanceRegistry<ComponentInternalInstance>;
};
export type ProgrammaticComponentEmits = {
    /**
     * On component close event.
     * This get called when the component emits `close` or the exposed `close` function get called.
     */
    close?: (...args: unknown[]) => void;
    /** On component destroy event which get called when the component should be destroyed. */
    destroy?: () => void;
};
export type ProgrammaticComponentExpose = {
    /** Call the close event of the component. */
    close: (...args: unknown[]) => void;
    /** Promise which get resolved on the close event. */
    promise: Promise<unknown>;
};
export declare const ProgrammaticComponent: import('vue').DefineSetupFnComponent<ProgrammaticComponentProps<any>, ProgrammaticComponentEmits, {}, ProgrammaticComponentProps<any> & {
    onDestroy?: ((...args: never) => any) | undefined;
    onClose?: ((...args: never) => any) | undefined;
}, import('vue').PublicProps>;
