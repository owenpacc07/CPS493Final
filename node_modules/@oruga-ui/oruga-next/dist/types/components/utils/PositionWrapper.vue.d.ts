import { Component, PropType } from 'vue';
type Position = "top" | "bottom" | "left" | "right";
declare const contentRef: import('vue').Ref<HTMLElement | Component | undefined, HTMLElement | Component | undefined>;
declare function setContent<T extends typeof contentRef.value>(el: T): typeof el;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {
            setContent: typeof setContent;
        }): any;
        default?(_: {
            setContent: typeof setContent;
        }): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    teleport: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor)[];
        required: true;
    };
    trigger: {
        type: PropType<HTMLElement | Component>;
        default: undefined;
    };
    /**
     * Position of the component relative to the trigger
     * @values auto, top, bottom, left, right, top-right, top-left, bottom-left, bottom-right
     */
    position: {
        type: StringConstructor;
        validator: (value: string) => boolean;
        required: true;
    };
    /** Used for calculation position auto */
    defaultPosition: {
        type: PropType<Position>;
        validator: (value: string) => boolean;
        default: string;
    };
    /** disable the position calculation */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** update positioning on teleport */
    disablePositioning: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:position": (value: string) => any;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    teleport: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor)[];
        required: true;
    };
    trigger: {
        type: PropType<HTMLElement | Component>;
        default: undefined;
    };
    /**
     * Position of the component relative to the trigger
     * @values auto, top, bottom, left, right, top-right, top-left, bottom-left, bottom-right
     */
    position: {
        type: StringConstructor;
        validator: (value: string) => boolean;
        required: true;
    };
    /** Used for calculation position auto */
    defaultPosition: {
        type: PropType<Position>;
        validator: (value: string) => boolean;
        default: string;
    };
    /** disable the position calculation */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** update positioning on teleport */
    disablePositioning: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    "onUpdate:position"?: ((value: string) => any) | undefined;
}>, {
    trigger: HTMLElement | Component;
    disabled: boolean;
    defaultPosition: Position;
    disablePositioning: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
