import { PropType } from 'vue';
import { ClassBind, ComponentClass } from '../../types';
declare function __VLS_template(): any;
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /** the internal input value */
    value: {
        type: PropType<Date | Date[] | undefined>;
        default: undefined;
    };
    /** the active state of the dropdown */
    active: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** parent picker component props  */
    pickerProps: {
        type: ObjectConstructor;
        required: true;
    };
    /** data-oruga attribute value */
    dataOruga: {
        type: StringConstructor;
        required: true;
    };
    /** format props value to input value */
    formatter: {
        type: PropType<(value: Date | Date[] | undefined, isNative: boolean) => string>;
        required: true;
    };
    /** parse input value to props value */
    parser: {
        type: PropType<(value: string, isNative: boolean) => Date | Date[] | undefined>;
        required: true;
    };
    type: {
        type: StringConstructor;
        required: true;
    };
    step: {
        type: StringConstructor;
        default: undefined;
    };
    min: {
        type: DateConstructor;
        default: undefined;
    };
    max: {
        type: DateConstructor;
        default: undefined;
    };
    stayOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** the DateTimeFormat object to watch for to update the parsed input value */
    dtf: {
        type: ObjectConstructor;
        default: undefined;
    };
    rootClasses: {
        type: PropType<ClassBind[]>;
        required: true;
    };
    dropdownClasses: {
        type: PropType<ClassBind[]>;
        required: true;
    };
    boxClass: {
        type: PropType<ComponentClass>;
        required: true;
    };
}>, {
    focus: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    left: (event: Event) => any;
    right: (event: Event) => any;
    focus: (event: Event) => any;
    blur: (event: Event) => any;
    invalid: (event: Event) => any;
    "icon-click": (event: Event) => any;
    "icon-right-click": (event: Event) => any;
    "update:active": (...args: unknown[]) => any;
    "update:value": (value: Date | Date[] | undefined) => any;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /** the internal input value */
    value: {
        type: PropType<Date | Date[] | undefined>;
        default: undefined;
    };
    /** the active state of the dropdown */
    active: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** parent picker component props  */
    pickerProps: {
        type: ObjectConstructor;
        required: true;
    };
    /** data-oruga attribute value */
    dataOruga: {
        type: StringConstructor;
        required: true;
    };
    /** format props value to input value */
    formatter: {
        type: PropType<(value: Date | Date[] | undefined, isNative: boolean) => string>;
        required: true;
    };
    /** parse input value to props value */
    parser: {
        type: PropType<(value: string, isNative: boolean) => Date | Date[] | undefined>;
        required: true;
    };
    type: {
        type: StringConstructor;
        required: true;
    };
    step: {
        type: StringConstructor;
        default: undefined;
    };
    min: {
        type: DateConstructor;
        default: undefined;
    };
    max: {
        type: DateConstructor;
        default: undefined;
    };
    stayOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** the DateTimeFormat object to watch for to update the parsed input value */
    dtf: {
        type: ObjectConstructor;
        default: undefined;
    };
    rootClasses: {
        type: PropType<ClassBind[]>;
        required: true;
    };
    dropdownClasses: {
        type: PropType<ClassBind[]>;
        required: true;
    };
    boxClass: {
        type: PropType<ComponentClass>;
        required: true;
    };
}>> & Readonly<{
    onLeft?: ((event: Event) => any) | undefined;
    onRight?: ((event: Event) => any) | undefined;
    onFocus?: ((event: Event) => any) | undefined;
    onBlur?: ((event: Event) => any) | undefined;
    onInvalid?: ((event: Event) => any) | undefined;
    "onIcon-click"?: ((event: Event) => any) | undefined;
    "onIcon-right-click"?: ((event: Event) => any) | undefined;
    "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
    "onUpdate:value"?: ((value: Date | Date[] | undefined) => any) | undefined;
}>, {
    value: Date | Date[] | undefined;
    active: boolean;
    max: Date;
    min: Date;
    step: string;
    stayOpen: boolean;
    dtf: Record<string, any>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, any, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
