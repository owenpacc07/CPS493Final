import { CarouselProps } from './props';
type __VLS_Props = CarouselProps;
declare function onPrev(): void;
declare function onNext(): void;
/**
 * Show the slide by index
 * @param index the real index of the slide
 */
declare function switchTo(index?: number): void;
declare function onToggleAutoplay(): void;
type __VLS_PublicProps = {
    modelValue?: number;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        pause?(_: {
            autoplay: boolean;
            toggle: typeof onToggleAutoplay;
        }): any;
        arrow?(_: {
            hasPrev: boolean;
            prev: typeof onPrev;
            hasNext: boolean;
            next: typeof onNext;
        }): any;
        default?(_: {}): any;
        indicators?(_: {
            active: number;
            switchTo: typeof switchTo;
        }): any;
        indicator?(_: {
            index: any;
        }): any;
        overlay?(_: {}): any;
    };
    refs: {
        rootElement: HTMLDivElement;
    };
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    click: (event: Event) => any;
    change: (value: number) => any;
    "update:modelValue": (value: number) => any;
    "update:model-value": (value: number) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onClick?: ((event: Event) => any) | undefined;
    onChange?: ((value: number) => any) | undefined;
    "onUpdate:modelValue"?: ((value: number) => any) | undefined;
    "onUpdate:model-value"?: ((value: number) => any) | undefined;
}>, {
    iconPack: string;
    override: boolean;
    iconSize: string;
    repeat: boolean;
    interval: number;
    indicatorPosition: string;
    indicatorStyle: string;
    itemsToShow: number;
    itemsToList: number;
    arrows: boolean;
    arrowsHover: boolean;
    iconPrev: string;
    iconNext: string;
    iconAutoplayPause: string;
    iconAutoplayResume: string;
    ariaAutoplayPauseLabel: string;
    ariaAutoplayResumeLabel: string;
    ariaNextLabel: string;
    ariaPreviousLabel: string;
    overlay: boolean;
    modelValue: number;
    dragable: boolean;
    autoplay: boolean;
    pauseHover: boolean;
    indicators: boolean;
    indicatorInside: boolean;
    breakpoints: Record<number, any>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    rootElement: HTMLDivElement;
}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
