import { Component, MaybeRefOrGetter } from 'vue';
import { ProgrammaticComponentOptions, ProgrammaticExpose } from '../programmatic';
import { ModalProps } from './props';
declare module "../../index" {
    interface OrugaProgrammatic {
        modal: typeof ModalProgrammatic;
    }
}
/** useModalProgrammatic composable options */
export type ModalProgrammaticOptions<C extends Component> = Readonly<ModalProps<C>> & ProgrammaticComponentOptions;
declare const ModalProgrammatic: {
    /** Returns the number of registered active instances. */
    count: () => number;
    /**
     * Create a new programmatic modal component instance.
     * @param options modal content string or modal component props object
     * @param target specify a target the component get rendered into - default is `document.body`
     * @returns ProgrammaticExpose
     */
    open<C extends Component>(options: string | ModalProgrammaticOptions<C>, target?: MaybeRefOrGetter<string | HTMLElement | null>): ProgrammaticExpose;
    /** Close the last registred instance in the modal programmatic instance registry. */
    close(...args: unknown[]): void;
    /** Close all instances in the programmatic modal instance registry. */
    closeAll(...args: unknown[]): void;
};
export default ModalProgrammatic;
