import { Component } from 'vue';
declare const _default: <C extends Component>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onClose?: ((...args: unknown[]) => any) | undefined;
        readonly "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onClose" | "onUpdate:active"> & ({
        active?: boolean;
    } & {
        override?: boolean;
        active?: boolean;
        fullScreen?: boolean;
        content?: string;
        width?: string | number;
        animation?: string;
        overlay?: boolean;
        cancelable?: string[] | boolean;
        clipScroll?: boolean;
        trapFocus?: boolean;
        role?: "dialog" | "alertdialog";
        ariaLabel?: string;
        autoFocus?: boolean;
        closeIcon?: string;
        closeIconSize?: string;
        mobileBreakpoint?: string;
        teleport?: boolean | string | object;
        container?: HTMLElement;
        component?: C | undefined;
        props?: import('vue-component-type-helpers').ComponentProps<C> | undefined;
        events?: import('vue').EmitsToProps<import('vue-component-type-helpers').ComponentEmit<C>> | undefined;
    } & Partial<{
        rootClass: import('../..').ComponentClass;
        mobileClass: import('../..').ComponentClass;
        activeClass: import('../..').ComponentClass;
        overlayClass: import('../..').ComponentClass;
        contentClass: import('../..').ComponentClass;
        fullScreenClass: import('../..').ComponentClass;
        closeClass: import('../..').ComponentClass;
        scrollClipClass: import('../..').ComponentClass;
        scrollKeepClass: import('../..').ComponentClass;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        close: (...args: unknown[]) => void;
    }>): void;
    attrs: any;
    slots: {
        default?(_: {
            close: (...args: unknown[]) => void;
        }): any;
    };
    emit: (((evt: "close", ...args: unknown[]) => void) & ((evt: "update:active", value: boolean) => void)) & ((evt: "update:active", value: boolean) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
