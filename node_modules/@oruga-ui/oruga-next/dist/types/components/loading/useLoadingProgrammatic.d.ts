import { MaybeRefOrGetter } from 'vue';
import { ProgrammaticComponentOptions, ProgrammaticExpose } from '../programmatic';
import { LoadingProps } from './props';
declare module "../../index" {
    interface OrugaProgrammatic {
        loading: typeof LoadingProgrammatic;
    }
}
/** useLoadingProgrammatic composable options */
export type LoadingProgrammaticOptions = Readonly<LoadingProps> & ProgrammaticComponentOptions;
declare const LoadingProgrammatic: {
    /** Returns the number of registered active instances. */
    count: () => number;
    /**
     * Create a new programmatic loading component instance.
     * @param options loading label string or loading component props object
     * @param target specify a target the component get rendered into
     * @returns ProgrammaticExpose
     */
    open(options: string | LoadingProgrammaticOptions, target?: MaybeRefOrGetter<string | HTMLElement | null>): ProgrammaticExpose;
    /** Close the last registred instance in the loading programmatic instance registry. */
    close(...args: unknown[]): void;
    /** Close all instances in the programmatic loading instance registry. */
    closeAll(...args: unknown[]): void;
};
export default LoadingProgrammatic;
