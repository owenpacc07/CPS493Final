declare const _default: <T = string>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onAdd?: ((value: T) => any) | undefined;
        readonly onInput?: ((value: string, event: Event) => any) | undefined;
        readonly onFocus?: ((event: Event) => any) | undefined;
        readonly onBlur?: ((event: Event) => any) | undefined;
        readonly onInvalid?: ((event: Event) => any) | undefined;
        readonly onRemove?: ((value: T) => any) | undefined;
        readonly "onUpdate:modelValue"?: ((value: T[] | undefined) => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: (T[] | undefined)[]) => any) | undefined;
        readonly "onIcon-click"?: ((event: Event) => any) | undefined;
        readonly "onIcon-right-click"?: ((event: Event) => any) | undefined;
        readonly "onScroll-start"?: (() => any) | undefined;
        readonly "onScroll-end"?: (() => any) | undefined;
        readonly "onUpdate:input"?: ((...args: unknown[]) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onFocus" | "onBlur" | "onInput" | "onInvalid" | "onUpdate:modelValue" | "onUpdate:model-value" | "onIcon-click" | "onIcon-right-click" | "onScroll-start" | "onScroll-end" | "onUpdate:input" | "onAdd" | "onRemove"> & ({
        modelValue?: T[] | undefined;
        input?: string;
    } & {
        override?: boolean;
        modelValue?: T[] | undefined;
        input?: string;
        options?: import('../../composables').OptionsPropWithGroups<T> | undefined;
        filter?: ((options: T, value: string) => boolean) | undefined;
        size?: string;
        variant?: string;
        maxitems?: string | number;
        maxlength?: string | number;
        counter?: boolean;
        openOnFocus?: boolean;
        keepOpen?: boolean;
        placeholder?: string;
        expanded?: boolean;
        disabled?: boolean;
        keepFirst?: boolean;
        allowNew?: boolean;
        allowDuplicates?: boolean;
        validateItem?: ((value: string | T) => boolean) | undefined;
        createItem?: ((value: string | T) => T) | undefined;
        checkScroll?: boolean;
        closable?: boolean;
        iconPack?: string;
        icon?: string;
        closeIcon?: string;
        ariaCloseLabel?: string;
        autocomplete?: string;
        useHtml5Validation?: boolean;
        customValidity?: string | ((currentValue: T[] | null | undefined, state: ValidityState) => string) | undefined;
        teleport?: boolean | string | object;
    } & Partial<{
        rootClass: import('../..').ComponentClass;
        expandedClass: import('../..').ComponentClass;
        sizeClass: import('../..').ComponentClass;
        variantClass: import('../..').ComponentClass;
        containerClass: import('../..').ComponentClass;
        itemClass: import('../..').ComponentClass;
        closeClass: import('../..').ComponentClass;
        counterClass: import('../..').ComponentClass;
        autocompleteClasses: object;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        focus: () => void;
        value: import('vue').ModelRef<T[] | undefined, string, T[] | undefined, T[] | undefined>;
    }>): void;
    attrs: any;
    slots: {
        selected?(_: {
            items: T[] | undefined;
            options: (import('../../composables').OptionsItem<T> | {
                label: T;
                value: T;
                key: string;
            })[];
            removeItem: (index: number, event?: Event) => void;
        }): any;
        header?(_: {}): any;
        default?(_: {
            option: import('../../composables').OptionsItem<T>;
            index: number;
            value: T;
        }): any;
        empty?(_: {}): any;
        footer?(_: {}): any;
        counter?(_: {
            items: number;
            total: string | number;
        }): any;
        counter?(_: {
            items: number;
            total: string | number;
        }): any;
    };
    emit: (((evt: "add", value: T) => void) & ((evt: "input", value: string, event: Event) => void) & ((evt: "focus", event: Event) => void) & ((evt: "blur", event: Event) => void) & ((evt: "invalid", event: Event) => void) & ((evt: "remove", value: T) => void) & ((evt: "update:model-value", value: (T[] | undefined)[]) => void) & ((evt: "icon-click", event: Event) => void) & ((evt: "icon-right-click", event: Event) => void) & ((evt: "scroll-start") => void) & ((evt: "scroll-end") => void) & ((evt: "update:input", value: string) => void)) & (((evt: "update:modelValue", value: T[] | undefined) => void) & ((evt: "update:input", value: string) => void));
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
