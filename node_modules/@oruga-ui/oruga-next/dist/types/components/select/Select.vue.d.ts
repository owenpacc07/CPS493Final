declare const _default: <T, IsMultiple extends boolean = false>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onFocus?: ((event: Event) => any) | undefined;
        readonly onBlur?: ((event: Event) => any) | undefined;
        readonly onInvalid?: ((event: Event) => any) | undefined;
        readonly "onUpdate:modelValue"?: ((value: (IsMultiple extends true ? T[] : T) | undefined) => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: (IsMultiple extends true ? T[] : T) | undefined) => any) | undefined;
        readonly "onIcon-click"?: ((event: Event) => any) | undefined;
        readonly "onIcon-right-click"?: ((event: Event) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onFocus" | "onBlur" | "onInvalid" | "onUpdate:modelValue" | "onUpdate:model-value" | "onIcon-click" | "onIcon-right-click"> & ({
        modelValue?: (IsMultiple extends true ? T[] : T) | undefined;
    } & {
        override?: boolean;
        modelValue?: (IsMultiple extends true ? T[] : T) | undefined;
        multiple?: IsMultiple | undefined;
        options?: import('../../composables').OptionsPropWithGroups<T> | undefined;
        size?: string;
        variant?: string;
        placeholder?: string;
        disabled?: boolean;
        required?: boolean;
        expanded?: boolean;
        rounded?: boolean;
        nativeSize?: string | number;
        iconPack?: string;
        icon?: string;
        iconClickable?: boolean;
        iconRight?: string;
        iconRightClickable?: boolean;
        iconRightVariant?: string;
        id?: string;
        autocomplete?: string;
        statusIcon?: boolean;
        useHtml5Validation?: boolean;
        customValidity?: string | ((currentValue: (IsMultiple extends true ? T[] : T) | null | undefined, state: ValidityState) => string) | undefined;
    } & Partial<{
        rootClass: import('../..').ComponentClass;
        sizeClass: import('../..').ComponentClass;
        variantClass: import('../..').ComponentClass;
        expandedClass: import('../..').ComponentClass;
        disabledClass: import('../..').ComponentClass;
        roundedClass: import('../..').ComponentClass;
        hasIconRightClass: import('../..').ComponentClass;
        multipleClass: import('../..').ComponentClass;
        selectClass: import('../..').ComponentClass;
        placeholderClass: import('../..').ComponentClass;
        arrowedClass: import('../..').ComponentClass;
        iconLeftSpaceClass: import('../..').ComponentClass;
        iconRightSpaceClass: import('../..').ComponentClass;
        iconLeftClass: import('../..').ComponentClass;
        iconRightClass: import('../..').ComponentClass;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        focus: () => void;
        value: import('vue').ModelRef<(IsMultiple extends true ? T[] : T) | undefined, string, (IsMultiple extends true ? T[] : T) | undefined, (IsMultiple extends true ? T[] : T) | undefined>;
    }>): void;
    attrs: any;
    slots: {
        placeholder?(_: {}): any;
        default?(_: {}): any;
    };
    emit: (((evt: "focus", event: Event) => void) & ((evt: "blur", event: Event) => void) & ((evt: "invalid", event: Event) => void) & ((evt: "update:model-value", value: (IsMultiple extends true ? T[] : T) | undefined) => void) & ((evt: "icon-click", event: Event) => void) & ((evt: "icon-right-click", event: Event) => void)) & ((evt: "update:modelValue", value: (IsMultiple extends true ? T[] : T) | undefined) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
