import { SliderProps } from './props';
declare const _default: <IsRange extends boolean = false>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onChange?: ((value: (IsRange extends true ? [number, number] : number) | undefined) => any) | undefined;
        readonly onDragend?: (() => any) | undefined;
        readonly onDragstart?: (() => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: (IsRange extends true ? [number, number] : number) | undefined) => any) | undefined;
        readonly onDragging?: ((value: (IsRange extends true ? [number, number] : number) | undefined) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onDragend" | "onDragstart" | "onChange" | "onUpdate:model-value" | "onDragging"> & SliderProps<IsRange> & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        value: import('vue').ComputedRef<(IsRange extends true ? [number, number] : number) | undefined>;
    }>): void;
    attrs: any;
    slots: {
        default?(_: {}): any;
    };
    emit: ((evt: "change", value: (IsRange extends true ? [number, number] : number) | undefined) => void) & ((evt: "dragend") => void) & ((evt: "dragstart") => void) & ((evt: "update:model-value", value: (IsRange extends true ? [number, number] : number) | undefined) => void) & ((evt: "dragging", value: (IsRange extends true ? [number, number] : number) | undefined) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
