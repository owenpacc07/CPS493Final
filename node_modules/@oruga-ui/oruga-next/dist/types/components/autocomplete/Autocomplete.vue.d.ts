import { OptionsItem } from '../../types';
declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onInput?: ((value: string, event: Event) => any) | undefined;
        readonly onSelect?: ((value: T | undefined) => any) | undefined;
        readonly onFocus?: ((event: Event) => any) | undefined;
        readonly onBlur?: ((event: Event) => any) | undefined;
        readonly onInvalid?: ((event: Event) => any) | undefined;
        readonly "onUpdate:modelValue"?: ((value: T | undefined) => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: T | undefined) => any) | undefined;
        readonly "onIcon-click"?: ((event: Event) => any) | undefined;
        readonly "onIcon-right-click"?: ((event: Event) => any) | undefined;
        readonly "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
        readonly "onScroll-start"?: (() => any) | undefined;
        readonly "onScroll-end"?: (() => any) | undefined;
        readonly "onUpdate:input"?: ((...args: unknown[]) => any) | undefined;
        readonly "onSelect-header"?: (() => any) | undefined;
        readonly "onSelect-footer"?: (() => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onFocus" | "onBlur" | "onInput" | "onInvalid" | "onSelect" | "onUpdate:modelValue" | "onUpdate:model-value" | "onIcon-click" | "onIcon-right-click" | "onUpdate:active" | "onScroll-start" | "onScroll-end" | "onUpdate:input" | "onSelect-header" | "onSelect-footer"> & ({
        active?: boolean;
        modelValue?: T | undefined;
        input?: string;
    } & {
        override?: boolean;
        modelValue?: T | undefined;
        input?: string;
        active?: boolean;
        options?: import('../../composables').OptionsPropWithGroups<T> | undefined;
        backendFiltering?: boolean;
        filter?: ((option: T, value: string) => boolean) | undefined;
        type?: string;
        menuTag?: import('../../types').DynamicComponent;
        itemTag?: import('../../types').DynamicComponent;
        size?: string;
        position?: "auto" | "top" | "bottom";
        placeholder?: string;
        expanded?: boolean;
        rounded?: boolean;
        disabled?: boolean;
        maxlength?: string | number;
        debounce?: number;
        keepFirst?: boolean;
        keepOpen?: boolean;
        clearOnSelect?: boolean;
        openOnFocus?: boolean;
        selectOnClose?: boolean;
        selectableHeader?: boolean;
        selectableFooter?: boolean;
        maxHeight?: string | number;
        checkScroll?: boolean;
        iconPack?: string;
        icon?: string;
        iconClickable?: boolean;
        iconRight?: string;
        iconRightClickable?: boolean;
        iconRightVariant?: string;
        clearable?: boolean;
        clearIcon?: string;
        statusIcon?: boolean;
        mobileModal?: boolean;
        desktopModal?: boolean;
        animation?: string;
        autocomplete?: string;
        useHtml5Validation?: boolean;
        customValidity?: string | ((currentValue: T | null | undefined, state: ValidityState) => string) | undefined;
        teleport?: boolean | string | object;
    } & Partial<{
        rootClass: import('../../types').ComponentClass;
        itemClass: import('../../types').ComponentClass;
        itemGroupTitleClass: import('../../types').ComponentClass;
        itemEmptyClass: import('../../types').ComponentClass;
        itemHeaderClass: import('../../types').ComponentClass;
        itemFooterClass: import('../../types').ComponentClass;
        inputClasses: import('../input/props').InputProps<false>;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        focus: () => void;
        value: import('vue').ModelRef<string, string, string, string>;
    }>): void;
    attrs: any;
    slots: {
        header?(_: {}): any;
        group?(_: {
            group: string;
            index: number;
        }): any;
        default?(_: {
            option: OptionsItem<T>;
            value: T;
            index: number;
        }): any;
        empty?(_: {}): any;
        footer?(_: {}): any;
    };
    emit: (((evt: "input", value: string, event: Event) => void) & ((evt: "select", value: T | undefined) => void) & ((evt: "focus", event: Event) => void) & ((evt: "blur", event: Event) => void) & ((evt: "invalid", event: Event) => void) & ((evt: "update:model-value", value: T | undefined) => void) & ((evt: "icon-click", event: Event) => void) & ((evt: "icon-right-click", event: Event) => void) & ((evt: "update:active", value: boolean) => void) & ((evt: "scroll-start") => void) & ((evt: "scroll-end") => void) & ((evt: "update:input", value: string) => void) & ((evt: "select-header") => void) & ((evt: "select-footer") => void)) & (((evt: "update:modelValue", value: T | undefined) => void) & ((evt: "update:active", value: boolean) => void) & ((evt: "update:input", value: string) => void));
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
