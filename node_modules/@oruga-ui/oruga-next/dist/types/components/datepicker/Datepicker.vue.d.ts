declare const _default: <IsRange extends boolean = false, IsMultiple extends boolean = false>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onFocus?: ((event: Event) => any) | undefined;
        readonly onBlur?: ((event: Event) => any) | undefined;
        readonly onInvalid?: ((event: Event) => any) | undefined;
        readonly "onUpdate:modelValue"?: ((value: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined) => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined) => any) | undefined;
        readonly "onIcon-click"?: ((event: Event) => any) | undefined;
        readonly "onIcon-right-click"?: ((event: Event) => any) | undefined;
        readonly "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
        readonly "onRange-start"?: ((value: Date) => any) | undefined;
        readonly "onRange-end"?: ((value: Date) => any) | undefined;
        readonly "onChange-month"?: ((value: number) => any) | undefined;
        readonly "onChange-year"?: ((value: number) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onFocus" | "onBlur" | "onInvalid" | "onUpdate:modelValue" | "onUpdate:model-value" | "onIcon-click" | "onIcon-right-click" | "onUpdate:active" | "onRange-start" | "onRange-end" | "onChange-month" | "onChange-year"> & ({
        modelValue?: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined;
        active?: boolean;
    } & {
        override?: boolean;
        modelValue?: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined;
        range?: IsRange | undefined;
        multiple?: IsMultiple | undefined;
        active?: boolean;
        type?: "month" | "date";
        dayNames?: string[];
        monthNames?: string[];
        size?: string;
        focusedDate?: Date;
        events?: import('./types').DatepickerEvent[];
        indicators?: string;
        minDate?: Date;
        maxDate?: Date;
        expanded?: boolean;
        rounded?: boolean;
        inline?: boolean;
        placeholder?: string;
        readonly?: boolean;
        disabled?: boolean;
        openOnFocus?: boolean;
        closeOnClick?: boolean;
        locale?: string;
        formatter?: ((date: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined) => string) | undefined;
        parser?: ((date: string) => (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined) | undefined;
        creator?: () => Date;
        selectableDates?: Date[] | ((date: Date) => boolean);
        unselectableDates?: Date[] | ((date: Date) => boolean);
        unselectableDaysOfWeek?: number[];
        nearbyMonthDays?: boolean;
        nearbySelectableMonthDays?: boolean;
        showWeekNumber?: boolean;
        weekNumberClickable?: boolean;
        firstDayOfWeek?: number;
        rulesForFirstWeek?: number;
        yearsRange?: number[];
        position?: "auto" | "top" | "bottom" | "left" | "right" | "top-right" | "top-left" | "bottom-left" | "bottom-right";
        iconPack?: string;
        icon?: string;
        iconRight?: string;
        iconRightClickable?: boolean;
        iconPrev?: string;
        iconNext?: string;
        mobileModal?: boolean;
        desktopModal?: boolean;
        mobileNative?: boolean;
        mobileBreakpoint?: string;
        teleport?: boolean | string | object;
        useHtml5Validation?: boolean;
        customValidity?: string | ((currentValue: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | null | undefined, state: ValidityState) => string) | undefined;
        ariaNextLabel?: string;
        ariaPreviousLabel?: string;
        ariaSelectMonthLabel?: string;
        ariaSelectYearLabel?: string;
    } & Partial<{
        rootClass: import('../../types').ComponentClass;
        mobileClass: import('../../types').ComponentClass;
        sizeClass: import('../../types').ComponentClass;
        expandedClass: import('../../types').ComponentClass;
        boxClass: import('../../types').ComponentClass;
        headerClass: import('../../types').ComponentClass;
        prevButtonClass: import('../../types').ComponentClass;
        nextButtonClass: import('../../types').ComponentClass;
        listsClass: import('../../types').ComponentClass;
        footerClass: import('../../types').ComponentClass;
        tableClass: import('../../types').ComponentClass;
        tableHeadClass: import('../../types').ComponentClass;
        tableHeadCellClass: import('../../types').ComponentClass;
        tableBodyClass: import('../../types').ComponentClass;
        tableRowClass: import('../../types').ComponentClass;
        tableCellClass: import('../../types').ComponentClass;
        tableCellInvisibleClass: import('../../types').ComponentClass;
        tableCellSelectedClass: import('../../types').ComponentClass;
        tableCellFirstSelectedClass: import('../../types').ComponentClass;
        tableCellWithinSelectedClass: import('../../types').ComponentClass;
        tableCellLastSelectedClass: import('../../types').ComponentClass;
        tableCellFirstHoveredClass: import('../../types').ComponentClass;
        tableCellWithinHoveredClass: import('../../types').ComponentClass;
        tableCellLastHoveredClass: import('../../types').ComponentClass;
        tableCellTodayClass: import('../../types').ComponentClass;
        tableCellSelectableClass: import('../../types').ComponentClass;
        tableCellUnselectableClass: import('../../types').ComponentClass;
        tableCellNearbyClass: import('../../types').ComponentClass;
        tableCellEventsClass: import('../../types').ComponentClass;
        tableEventsClass: import('../../types').ComponentClass;
        tableEventClass: import('../../types').ComponentClass;
        tableEventVariantClass: import('../../types').ComponentClass;
        tableEventIndicatorClass: import('../../types').ComponentClass;
        monthClass: import('../../types').ComponentClass;
        monthTableClass: import('../../types').ComponentClass;
        monthCellClass: import('../../types').ComponentClass;
        monthCellSelectedClass: import('../../types').ComponentClass;
        monthCellFirstSelectedClass: import('../../types').ComponentClass;
        monthCellWithinSelectedClass: import('../../types').ComponentClass;
        monthCellLastSelectedClass: import('../../types').ComponentClass;
        monthCellWithinHoveredRangeClass: import('../../types').ComponentClass;
        monthCellFirstHoveredClass: import('../../types').ComponentClass;
        monthCellWithinHoveredClass: import('../../types').ComponentClass;
        monthCellLastHoveredClass: import('../../types').ComponentClass;
        monthCellTodayClass: import('../../types').ComponentClass;
        monthCellSelectableClass: import('../../types').ComponentClass;
        monthCellUnselectableClass: import('../../types').ComponentClass;
        monthCellEventsClass: import('../../types').ComponentClass;
        monthEventsClass: import('../../types').ComponentClass;
        monthEventClass: import('../../types').ComponentClass;
        monthEventVariantClass: import('../../types').ComponentClass;
        monthEventIndicatorClass: import('../../types').ComponentClass;
        dropdownClass: import('../../types').ComponentClass;
        inputClass: import('../../types').ComponentClass;
        inputClasses: import('../input/props').InputProps<false>;
        dropdownClasses: import('../dropdown/props').DropdownProps<string, false>;
        selectClasses: import('../select/props').SelectProps<number, false>;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        focus: () => void | undefined;
        value: import('vue').ModelRef<(IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined, string, (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined, (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined>;
    }>): void;
    attrs: any;
    slots: {
        trigger?(_: {}): any;
        header?(_: {}): any;
        body?(_: {}): any;
        footer?(_: {}): any;
    };
    emit: (((evt: "focus", event: Event) => void) & ((evt: "blur", event: Event) => void) & ((evt: "invalid", event: Event) => void) & ((evt: "update:model-value", value: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined) => void) & ((evt: "icon-click", event: Event) => void) & ((evt: "icon-right-click", event: Event) => void) & ((evt: "update:active", value: boolean) => void) & ((evt: "range-start", value: Date) => void) & ((evt: "range-end", value: Date) => void) & ((evt: "change-month", value: number) => void) & ((evt: "change-year", value: number) => void)) & (((evt: "update:modelValue", value: (IsRange extends true ? [] | [Date, Date] : IsMultiple extends true ? Date[] : Date) | undefined) => void) & ((evt: "update:active", value: boolean) => void));
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
