import { DatepickerEvent } from './types';
import { DatepickerProps } from './props';
declare const _default: <IsRange extends boolean, IsMultiple extends boolean>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{
        events: DatepickerEvent[];
        selectedDate: Date | Date[];
    }> & Omit<{
        readonly month: number;
        readonly week: Date[];
        readonly pickerProps: DatepickerProps<IsRange, IsMultiple>;
        readonly day: number;
        readonly hoveredDateRange: Date[];
        readonly events?: DatepickerEvent[] | undefined;
        readonly selectedDate?: Date | Date[] | undefined;
        readonly onSelect?: ((value: Date) => any) | undefined;
        readonly "onHover-enddate"?: ((value: Date) => any) | undefined;
        readonly "onChange-focus"?: ((value: Date) => any) | undefined;
        readonly "onWeek-number-click"?: ((value: number) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, "events" | "selectedDate">, "onSelect" | ("month" | "week" | "pickerProps" | "day" | "hoveredDateRange") | "onHover-enddate" | "onChange-focus" | "onWeek-number-click" | ("events" | "selectedDate")> & {} & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: {};
    emit: ((evt: "select", value: Date) => void) & ((evt: "hover-enddate", value: Date) => void) & ((evt: "change-focus", value: Date) => void) & ((evt: "week-number-click", value: number) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
