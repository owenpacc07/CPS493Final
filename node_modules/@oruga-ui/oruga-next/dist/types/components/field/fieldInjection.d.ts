import { ComputedRef } from 'vue';
import { FieldProps } from './props';
export type FieldData = {
    $el: Element | null;
    props: FieldProps;
    hasInnerField: boolean;
    variant?: string;
    message?: string;
    labelId: string;
    inputAttrs: object;
    addInnerField: () => void;
    setInputId: (value: string) => void;
    setFocus: (value: boolean) => void;
    setFilled: (value: boolean) => void;
    setVariant: (value?: string) => void;
    setMessage: (value?: string) => void;
};
/** provide/inject type */
type ProvidedField = ComputedRef<FieldData | undefined>;
/**
 * Provide field component data via dependency injection.
 * Provided data is a computed ref to ensure reactivity.
 */
export declare function provideField(data: ProvidedField): void;
/** Inject parent field component if used inside one. **/
export declare function injectField(): {
    parentField: ComputedRef<FieldData | undefined>;
    statusVariantIcon: ComputedRef<string>;
    statusVariant: ComputedRef<string | undefined>;
    statusMessage: ComputedRef<string | undefined>;
};
export {};
