import { Component } from 'vue';
declare const _default: <T, IsMultiple extends boolean = false>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onSelect?: ((value: T) => any) | undefined;
        readonly onClose?: ((method: string, event: Event) => any) | undefined;
        readonly onOpen?: ((method: string, event: Event) => any) | undefined;
        readonly onChange?: ((value: (IsMultiple extends true ? T[] : T) | undefined) => any) | undefined;
        readonly "onUpdate:modelValue"?: ((value: (IsMultiple extends true ? T[] : T) | undefined) => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: (IsMultiple extends true ? T[] : T) | undefined) => any) | undefined;
        readonly "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
        readonly "onScroll-start"?: (() => any) | undefined;
        readonly "onScroll-end"?: (() => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onChange" | "onSelect" | "onUpdate:modelValue" | "onUpdate:model-value" | "onClose" | "onOpen" | "onUpdate:active" | "onScroll-start" | "onScroll-end"> & ({
        modelValue?: (IsMultiple extends true ? T[] : T) | undefined;
        active?: boolean;
    } & {
        override?: boolean;
        modelValue?: (IsMultiple extends true ? T[] : T) | undefined;
        multiple?: IsMultiple | undefined;
        options?: import('../../composables').OptionsPropWithGroups<T> | undefined;
        active?: boolean;
        label?: string;
        disabled?: boolean;
        inline?: boolean;
        selectable?: boolean;
        scrollable?: boolean;
        checkScroll?: boolean;
        maxHeight?: string | number;
        position?: "auto" | "top" | "bottom" | "left" | "right" | "top-right" | "top-left" | "bottom-left" | "bottom-right";
        animation?: string;
        expanded?: boolean;
        menuId?: string;
        menuTag?: import('../..').DynamicComponent;
        triggerTag?: import('../..').DynamicComponent;
        triggers?: ("click" | "keydown" | "hover" | "contextmenu" | "focus")[];
        delay?: number;
        keepOpen?: boolean;
        keepFirst?: boolean;
        closeOnOutside?: boolean;
        closeOnScroll?: boolean;
        selectOnFocus?: boolean;
        selectOnClose?: boolean;
        mobileModal?: boolean;
        desktopModal?: boolean;
        mobileBreakpoint?: string;
        teleport?: boolean | string | object;
        clipScroll?: boolean;
        labelledby?: string;
        ariaLabel?: string;
    } & Partial<{
        rootClass: import('../..').ComponentClass;
        mobileClass: import('../..').ComponentClass;
        modalClass: import('../..').ComponentClass;
        teleportClass: import('../..').ComponentClass;
        inlineClass: import('../..').ComponentClass;
        disabledClass: import('../..').ComponentClass;
        expandedClass: import('../..').ComponentClass;
        positionClass: import('../..').ComponentClass;
        activeClass: import('../..').ComponentClass;
        hoverableClass: import('../..').ComponentClass;
        triggerClass: import('../..').ComponentClass;
        menuClass: import('../..').ComponentClass;
        menuPositionClass: import('../..').ComponentClass;
        menuActiveClass: import('../..').ComponentClass;
        overlayClass: import('../..').ComponentClass;
        scrollClipClass: import('../..').ComponentClass;
        scrollKeepClass: import('../..').ComponentClass;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        $trigger: import('vue').Ref<HTMLElement | undefined, HTMLElement | undefined>;
        $content: import('vue').Ref<HTMLElement | Component | undefined, HTMLElement | Component | undefined>;
        value: import('vue').ModelRef<(IsMultiple extends true ? T[] : T) | undefined, string, (IsMultiple extends true ? T[] : T) | undefined, (IsMultiple extends true ? T[] : T) | undefined>;
    }>): void;
    attrs: any;
    slots: {
        trigger?(_: {
            active: boolean;
            value: [{
                type: import('vue').PropType<__VLS_NonUndefinedable<IsMultiple extends true ? T[] : T>>;
                default: undefined;
            }] extends [import('vue').Prop<infer V, infer D>] ? unknown extends V ? keyof V extends never ? import('@vue/shared').IfAny<V, V, D> : V : V : {
                type: import('vue').PropType<__VLS_NonUndefinedable<IsMultiple extends true ? T[] : T>>;
                default: undefined;
            };
            toggle: (event: Event) => void;
        }): any;
        default?(_: {
            active: boolean;
            focusedIndex: number | undefined;
            toggle: (method: string, event: Event) => void;
        }): any;
        before?(_: {}): any;
        group?(_: {
            group: string;
            index: number;
        }): any;
        after?(_: {}): any;
    };
    emit: (((evt: "select", value: T) => void) & ((evt: "close", method: string, event: Event) => void) & ((evt: "open", method: string, event: Event) => void) & ((evt: "change", value: (IsMultiple extends true ? T[] : T) | undefined) => void) & ((evt: "update:model-value", value: (IsMultiple extends true ? T[] : T) | undefined) => void) & ((evt: "update:active", value: boolean) => void) & ((evt: "scroll-start") => void) & ((evt: "scroll-end") => void)) & (((evt: "update:modelValue", value: (IsMultiple extends true ? T[] : T) | undefined) => void) & ((evt: "update:active", value: boolean) => void));
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
