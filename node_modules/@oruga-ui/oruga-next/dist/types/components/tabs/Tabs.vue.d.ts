declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onChange?: ((newValue: T | undefined, oldValue: T | undefined) => any) | undefined;
        readonly "onUpdate:modelValue"?: ((value: T | undefined) => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: T | undefined) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onChange" | "onUpdate:modelValue" | "onUpdate:model-value"> & ({
        modelValue?: T | undefined;
    } & {
        override?: boolean;
        modelValue?: T | undefined;
        options?: import('../../composables').OptionsProp<T> | undefined;
        variant?: string;
        size?: string;
        vertical?: boolean;
        position?: "left" | "centered" | "right";
        type?: string;
        expanded?: boolean;
        tag?: import('../..').DynamicComponent;
        activateOnFocus?: boolean;
        animated?: boolean;
        animation?: [string, string] | [string, string, string, string];
        animateInitially?: boolean;
        multiline?: boolean;
        ariaLabel?: string;
    } & Partial<{
        rootClass: import('../..').ComponentClass;
        positionClass: import('../..').ComponentClass;
        sizeClass: import('../..').ComponentClass;
        typeClass: import('../..').ComponentClass;
        expandedClass: import('../..').ComponentClass;
        verticalClass: import('../..').ComponentClass;
        multilineClass: import('../..').ComponentClass;
        listClass: import('../..').ComponentClass;
        contentClass: import('../..').ComponentClass;
        transitioningClass: import('../..').ComponentClass;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: {
        before?(_: {}): any;
        after?(_: {}): any;
        default?(_: {}): any;
    };
    emit: (((evt: "change", newValue: T | undefined, oldValue: T | undefined) => void) & ((evt: "update:model-value", value: T | undefined) => void)) & ((evt: "update:modelValue", value: T | undefined) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
