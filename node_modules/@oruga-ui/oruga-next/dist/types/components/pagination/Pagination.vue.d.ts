import { PaginationProps } from './props';
import { DynamicComponent } from '../../types';
type __VLS_Props = PaginationProps;
/** Previous button click listener. */
declare function prev(event: Event): void;
/** Next button click listener. */
declare function next(event: Event): void;
/** First button click listener. */
declare function first(event: Event): void;
/** Last button click listener. */
declare function last(event: Event): void;
type __VLS_PublicProps = {
    "current"?: number;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        previous?(_: {
            number: number;
            isCurrent: boolean;
            onClick: (event: Event) => void;
            ariaLabel: string;
            tag: DynamicComponent;
        }): any;
        next?(_: {
            number: number;
            isCurrent: boolean;
            onClick: (event: Event) => void;
            ariaLabel: string;
            tag: DynamicComponent;
        }): any;
        default?(_: {
            number: number;
            isCurrent: boolean;
            onClick: (event: Event) => void;
            ariaLabel: string;
            tag: DynamicComponent;
        }): any;
        default?(_: {
            number: number;
            isCurrent: boolean;
            onClick: (event: Event) => void;
            ariaLabel: string;
            tag: DynamicComponent;
        }): any;
        default?(_: {
            number: number;
            isCurrent: boolean;
            onClick: (event: Event) => void;
            ariaLabel: string;
            tag: DynamicComponent;
        }): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    last: typeof last;
    first: typeof first;
    prev: typeof prev;
    next: typeof next;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (event: number) => any;
    "update:current": (...args: unknown[]) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onChange?: ((event: number) => any) | undefined;
    "onUpdate:current"?: ((...args: unknown[]) => any) | undefined;
}>, {
    size: string;
    iconPack: string;
    mobileBreakpoint: string;
    override: boolean;
    rounded: boolean;
    iconPrev: string;
    iconNext: string;
    ariaNextLabel: string;
    ariaPreviousLabel: string;
    perPage: number | string;
    simple: boolean;
    order: "centered" | "right" | "left";
    buttonTag: DynamicComponent;
    ariaPageLabel: string;
    ariaCurrentLabel: string;
    total: number;
    current: number;
    rangeBefore: number;
    rangeAfter: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
