import { File } from '../../utils/ssr';
declare const _default: <T extends object | typeof File, IsMultiple extends boolean = false>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onFocus?: ((event: Event) => any) | undefined;
        readonly onBlur?: ((event: Event) => any) | undefined;
        readonly onInvalid?: ((event: Event) => any) | undefined;
        readonly "onUpdate:modelValue"?: ((value: (IsMultiple extends true ? T[] : T) | undefined) => any) | undefined;
        readonly "onUpdate:model-value"?: ((value: (IsMultiple extends true ? T[] : T) | undefined) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onFocus" | "onBlur" | "onInvalid" | "onUpdate:modelValue" | "onUpdate:model-value"> & ({
        modelValue?: (IsMultiple extends true ? T[] : T) | undefined;
    } & {
        override?: boolean;
        modelValue?: (IsMultiple extends true ? T[] : T) | undefined;
        multiple?: IsMultiple | undefined;
        variant?: string;
        disabled?: boolean;
        accept?: string;
        dragDrop?: boolean;
        expanded?: boolean;
        native?: boolean;
        useHtml5Validation?: boolean;
        customValidity?: string | ((currentValue: (IsMultiple extends true ? T[] : T) | null | undefined, state: ValidityState) => string) | undefined;
    } & Partial<{
        rootClass: import('../..').ComponentClass;
        expandedClass: import('../..').ComponentClass;
        variantClass: import('../..').ComponentClass;
        draggableClass: import('../..').ComponentClass;
        disabledClass: import('../..').ComponentClass;
        hoveredClass: import('../..').ComponentClass;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        focus: () => void;
        value: import('vue').ModelRef<(IsMultiple extends true ? T[] : T) | undefined, string, (IsMultiple extends true ? T[] : T) | undefined, (IsMultiple extends true ? T[] : T) | undefined>;
    }>): void;
    attrs: any;
    slots: {
        default?(_: {
            onclick: (event: Event) => void;
        }): any;
        default?(_: {
            onclick: (event: Event) => void;
        }): any;
    };
    emit: (((evt: "focus", event: Event) => void) & ((evt: "blur", event: Event) => void) & ((evt: "invalid", event: Event) => void) & ((evt: "update:model-value", value: (IsMultiple extends true ? T[] : T) | undefined) => void)) & ((evt: "update:modelValue", value: (IsMultiple extends true ? T[] : T) | undefined) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
