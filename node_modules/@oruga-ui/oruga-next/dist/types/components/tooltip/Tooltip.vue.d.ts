import { TooltipProps } from './props';
type __VLS_Props = TooltipProps;
type __VLS_PublicProps = {
    "active"?: boolean;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {
            active: boolean;
        }): any;
        content?(_: {}): any;
    };
    refs: {
        triggerRef: unknown;
    };
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    close: () => any;
    open: () => any;
    "update:active": (...args: unknown[]) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onClose?: (() => any) | undefined;
    onOpen?: (() => any) | undefined;
    "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
}>, {
    label: string;
    override: boolean;
    position: "auto" | "top" | "bottom" | "left" | "right" | "top-right" | "top-left" | "bottom-left" | "bottom-right";
    variant: string;
    active: boolean;
    animation: string;
    teleport: boolean | string | object;
    triggerTag: import('../..').DynamicComponent;
    triggers: Array<"click" | "hover" | "contextmenu" | "focus">;
    closeable: Array<"content" | "outside" | "escape"> | boolean;
    disabled: boolean;
    delay: number;
    multiline: boolean;
    always: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    triggerRef: unknown;
}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
