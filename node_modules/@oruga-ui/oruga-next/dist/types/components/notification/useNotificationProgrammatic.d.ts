import { Component, MaybeRefOrGetter } from 'vue';
import { ProgrammaticComponentOptions, ProgrammaticExpose } from '../programmatic';
import { NotificationProps, NotificationNoticeProps } from './props';
declare module "../../index" {
    interface OrugaProgrammatic {
        notification: typeof NotificationProgrammatic;
    }
}
/** useNotificationProgrammatic composable options */
export type NotificationProgrammaticOptions<C extends Component> = Readonly<Omit<NotificationNoticeProps<C> & NotificationProps, "container">> & ProgrammaticComponentOptions;
declare const NotificationProgrammatic: {
    /** Returns the number of registered active instances. */
    count: () => number;
    /**
     * Create a new programmatic notification component instance.
     * @param options notification message string or notification component props object
     * @param target specify a target the component get rendered into - default is `document.body`
     * @returns ProgrammaticExpose
     */
    open<C extends Component>(options: string | NotificationProgrammaticOptions<C>, target?: MaybeRefOrGetter<string | HTMLElement | null>): ProgrammaticExpose;
    /** Close the last registred instance in the notification programmatic instance registry. */
    close(...args: unknown[]): void;
    /** Close all instances in the programmatic notification instance registry. */
    closeAll(...args: unknown[]): void;
};
export default NotificationProgrammatic;
