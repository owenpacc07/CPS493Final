declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly onClick?: ((value: T, event: Event) => any) | undefined;
        readonly "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, never>, "onClick" | "onUpdate:active"> & ({
        active?: boolean;
    } & {
        override?: boolean;
        value?: T | undefined;
        active?: boolean;
        options?: import('../../composables').OptionsProp<T> | undefined;
        label?: string;
        expanded?: boolean;
        disabled?: boolean;
        hidden?: boolean;
        submenuId?: string;
        icon?: string;
        iconPack?: string;
        iconSize?: string;
        animation?: string;
        tag?: import('../..').DynamicComponent;
    } & Partial<{
        itemClass: import('../..').ComponentClass;
        itemActiveClass: import('../..').ComponentClass;
        itemFocusedClass: import('../..').ComponentClass;
        itemDisabledClass: import('../..').ComponentClass;
        itemButtonClass: import('../..').ComponentClass;
        itemButtonActiveClass: import('../..').ComponentClass;
        itemButtonFocusedClass: import('../..').ComponentClass;
        itemButtonDisabledClass: import('../..').ComponentClass;
        itemButtonIconClass: import('../..').ComponentClass;
        itemSubmenuClass: import('../..').ComponentClass;
    }>) & Partial<{}>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: {
        label?(_: {
            expanded: boolean;
            active: boolean;
        }): any;
        default?(_: {}): any;
    };
    emit: (((evt: "click", value: T, event: Event) => void) & ((evt: "update:active", value: boolean) => void)) & ((evt: "update:active", value: boolean) => void);
}>) => import('vue').VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
