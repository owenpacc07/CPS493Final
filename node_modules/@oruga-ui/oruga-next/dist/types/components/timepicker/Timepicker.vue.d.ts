import { TimepickerProps } from './props';
type ModelValue = TimepickerProps["modelValue"];
type __VLS_Props = TimepickerProps;
type __VLS_PublicProps = {
    modelValue?: ModelValue;
    "active"?: boolean;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        trigger?(_: {}): any;
        footer?(_: {}): any;
    };
    refs: {
        pickerComponent: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                value: Date | Date[] | undefined;
                active: boolean;
                max: Date;
                min: Date;
                step: string;
                stayOpen: boolean;
                dtf: Record<string, any>;
            }> & Omit<{
                readonly active: boolean;
                readonly type: string;
                readonly formatter: (value: Date | Date[] | undefined, isNative: boolean) => string;
                readonly parser: (value: string, isNative: boolean) => Date | Date[] | undefined;
                readonly boxClass: import('../../types').ComponentClass;
                readonly dropdownClasses: import('../../types').ClassBind[];
                readonly rootClasses: import('../../types').ClassBind[];
                readonly dataOruga: string;
                readonly pickerProps: Record<string, any>;
                readonly stayOpen: boolean;
                readonly value?: Date | Date[] | undefined;
                readonly max?: Date | undefined;
                readonly min?: Date | undefined;
                readonly step?: string | undefined;
                readonly dtf?: Record<string, any> | undefined;
                readonly onLeft?: ((event: Event) => any) | undefined;
                readonly onRight?: ((event: Event) => any) | undefined;
                readonly onFocus?: ((event: Event) => any) | undefined;
                readonly onBlur?: ((event: Event) => any) | undefined;
                readonly onInvalid?: ((event: Event) => any) | undefined;
                readonly "onIcon-click"?: ((event: Event) => any) | undefined;
                readonly "onIcon-right-click"?: ((event: Event) => any) | undefined;
                readonly "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
                readonly "onUpdate:value"?: ((value: Date | Date[] | undefined) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, "value" | "active" | "max" | "min" | "step" | "stayOpen" | "dtf">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: any;
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "left", event: Event) => void) & ((event: "right", event: Event) => void) & ((event: "focus", event: Event) => void) & ((event: "blur", event: Event) => void) & ((event: "invalid", event: Event) => void) & ((event: "icon-click", event: Event) => void) & ((event: "icon-right-click", event: Event) => void) & ((event: "update:active", ...args: unknown[]) => void) & ((event: "update:value", value: Date | Date[] | undefined) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
                value: {
                    type: import('vue').PropType<Date | Date[] | undefined>;
                    default: undefined;
                };
                active: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pickerProps: {
                    type: ObjectConstructor;
                    required: true;
                };
                dataOruga: {
                    type: StringConstructor;
                    required: true;
                };
                formatter: {
                    type: import('vue').PropType<(value: Date | Date[] | undefined, isNative: boolean) => string>;
                    required: true;
                };
                parser: {
                    type: import('vue').PropType<(value: string, isNative: boolean) => Date | Date[] | undefined>;
                    required: true;
                };
                type: {
                    type: StringConstructor;
                    required: true;
                };
                step: {
                    type: StringConstructor;
                    default: undefined;
                };
                min: {
                    type: DateConstructor;
                    default: undefined;
                };
                max: {
                    type: DateConstructor;
                    default: undefined;
                };
                stayOpen: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                dtf: {
                    type: ObjectConstructor;
                    default: undefined;
                };
                rootClasses: {
                    type: import('vue').PropType<import('../../types').ClassBind[]>;
                    required: true;
                };
                dropdownClasses: {
                    type: import('vue').PropType<import('../../types').ClassBind[]>;
                    required: true;
                };
                boxClass: {
                    type: import('vue').PropType<import('../../types').ComponentClass>;
                    required: true;
                };
            }>> & Readonly<{
                onLeft?: ((event: Event) => any) | undefined;
                onRight?: ((event: Event) => any) | undefined;
                onFocus?: ((event: Event) => any) | undefined;
                onBlur?: ((event: Event) => any) | undefined;
                onInvalid?: ((event: Event) => any) | undefined;
                "onIcon-click"?: ((event: Event) => any) | undefined;
                "onIcon-right-click"?: ((event: Event) => any) | undefined;
                "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
                "onUpdate:value"?: ((value: Date | Date[] | undefined) => any) | undefined;
            }>, {
                focus: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                left: (event: Event) => any;
                right: (event: Event) => any;
                focus: (event: Event) => any;
                blur: (event: Event) => any;
                invalid: (event: Event) => any;
                "icon-click": (event: Event) => any;
                "icon-right-click": (event: Event) => any;
                "update:active": (...args: unknown[]) => any;
                "update:value": (value: Date | Date[] | undefined) => any;
            }, string, {
                value: Date | Date[] | undefined;
                active: boolean;
                max: Date;
                min: Date;
                step: string;
                stayOpen: boolean;
                dtf: Record<string, any>;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            value: Date | Date[] | undefined;
            active: boolean;
            max: Date;
            min: Date;
            step: string;
            stayOpen: boolean;
            dtf: Record<string, any>;
        }> & Omit<Readonly<import('vue').ExtractPropTypes<{
            value: {
                type: import('vue').PropType<Date | Date[] | undefined>;
                default: undefined;
            };
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            pickerProps: {
                type: ObjectConstructor;
                required: true;
            };
            dataOruga: {
                type: StringConstructor;
                required: true;
            };
            formatter: {
                type: import('vue').PropType<(value: Date | Date[] | undefined, isNative: boolean) => string>;
                required: true;
            };
            parser: {
                type: import('vue').PropType<(value: string, isNative: boolean) => Date | Date[] | undefined>;
                required: true;
            };
            type: {
                type: StringConstructor;
                required: true;
            };
            step: {
                type: StringConstructor;
                default: undefined;
            };
            min: {
                type: DateConstructor;
                default: undefined;
            };
            max: {
                type: DateConstructor;
                default: undefined;
            };
            stayOpen: {
                type: BooleanConstructor;
                default: boolean;
            };
            dtf: {
                type: ObjectConstructor;
                default: undefined;
            };
            rootClasses: {
                type: import('vue').PropType<import('../../types').ClassBind[]>;
                required: true;
            };
            dropdownClasses: {
                type: import('vue').PropType<import('../../types').ClassBind[]>;
                required: true;
            };
            boxClass: {
                type: import('vue').PropType<import('../../types').ComponentClass>;
                required: true;
            };
        }>> & Readonly<{
            onLeft?: ((event: Event) => any) | undefined;
            onRight?: ((event: Event) => any) | undefined;
            onFocus?: ((event: Event) => any) | undefined;
            onBlur?: ((event: Event) => any) | undefined;
            onInvalid?: ((event: Event) => any) | undefined;
            "onIcon-click"?: ((event: Event) => any) | undefined;
            "onIcon-right-click"?: ((event: Event) => any) | undefined;
            "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
            "onUpdate:value"?: ((value: Date | Date[] | undefined) => any) | undefined;
        }>, "focus" | ("value" | "active" | "max" | "min" | "step" | "stayOpen" | "dtf")> & import('vue').ShallowUnwrapRef<{
            focus: () => void;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: any;
        }) | null;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    focus: () => void | undefined;
    value: import('vue').ModelRef<Date | undefined, string, Date | undefined, Date | undefined>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    focus: (event: Event) => any;
    blur: (event: Event) => any;
    invalid: (event: Event) => any;
    "update:modelValue": (value: Date | undefined) => any;
    "update:model-value": (value: Date) => any;
    "icon-click": (event: Event) => any;
    "icon-right-click": (event: Event) => any;
    "update:active": (...args: unknown[]) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onFocus?: ((event: Event) => any) | undefined;
    onBlur?: ((event: Event) => any) | undefined;
    onInvalid?: ((event: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: Date | undefined) => any) | undefined;
    "onUpdate:model-value"?: ((value: Date) => any) | undefined;
    "onIcon-click"?: ((event: Event) => any) | undefined;
    "onIcon-right-click"?: ((event: Event) => any) | undefined;
    "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
}>, {
    size: string;
    iconPack: string;
    useHtml5Validation: boolean;
    mobileBreakpoint: string;
    override: boolean;
    icon: string;
    position: string;
    active: boolean;
    openOnFocus: boolean;
    iconRight: string;
    mobileModal: boolean;
    desktopModal: boolean;
    teleport: boolean | string | object;
    inputClasses: import('../input/props').InputProps<false>;
    rounded: boolean;
    closeOnClick: boolean;
    formatter: (date: TimepickerProps["modelValue"]) => string;
    parser: (date: string) => TimepickerProps["modelValue"];
    creator: () => Date;
    mobileNative: boolean;
    dropdownClasses: import('../dropdown/props').DropdownProps<string, false>;
    selectClasses: import('../select/props').SelectProps<number | string, false>;
    expanded: boolean;
    disabled: boolean;
    modelValue: Date;
    customValidity: string | ((currentValue: Date | null | undefined, state: ValidityState) => string);
    placeholder: string;
    iconRightClickable: boolean;
    inline: boolean;
    readonly: boolean;
    locale: string;
    minTime: Date;
    maxTime: Date;
    hourFormat: "12" | "24" | 12 | 24;
    incrementHours: number;
    incrementMinutes: number;
    incrementSeconds: number;
    enableSeconds: boolean;
    defaultMinutes: number;
    defaultSeconds: number;
    unselectableTimes: Date[] | ((date: Date) => boolean);
    resetOnMeridianChange: boolean;
    ariaSelectSecondsLabel: string;
    ariaSelectMinutesLabel: string;
    ariaSelectHoursLabel: string;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    pickerComponent: ({
        $: import('vue').ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: Date | Date[] | undefined;
            active: boolean;
            max: Date;
            min: Date;
            step: string;
            stayOpen: boolean;
            dtf: Record<string, any>;
        }> & Omit<{
            readonly active: boolean;
            readonly type: string;
            readonly formatter: (value: Date | Date[] | undefined, isNative: boolean) => string;
            readonly parser: (value: string, isNative: boolean) => Date | Date[] | undefined;
            readonly boxClass: import('../../types').ComponentClass;
            readonly dropdownClasses: import('../../types').ClassBind[];
            readonly rootClasses: import('../../types').ClassBind[];
            readonly dataOruga: string;
            readonly pickerProps: Record<string, any>;
            readonly stayOpen: boolean;
            readonly value?: Date | Date[] | undefined;
            readonly max?: Date | undefined;
            readonly min?: Date | undefined;
            readonly step?: string | undefined;
            readonly dtf?: Record<string, any> | undefined;
            readonly onLeft?: ((event: Event) => any) | undefined;
            readonly onRight?: ((event: Event) => any) | undefined;
            readonly onFocus?: ((event: Event) => any) | undefined;
            readonly onBlur?: ((event: Event) => any) | undefined;
            readonly onInvalid?: ((event: Event) => any) | undefined;
            readonly "onIcon-click"?: ((event: Event) => any) | undefined;
            readonly "onIcon-right-click"?: ((event: Event) => any) | undefined;
            readonly "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
            readonly "onUpdate:value"?: ((value: Date | Date[] | undefined) => any) | undefined;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, "value" | "active" | "max" | "min" | "step" | "stayOpen" | "dtf">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: any;
        $slots: Readonly<{
            [name: string]: import('vue').Slot<any> | undefined;
        }>;
        $root: import('vue').ComponentPublicInstance | null;
        $parent: import('vue').ComponentPublicInstance | null;
        $host: Element | null;
        $emit: ((event: "left", event: Event) => void) & ((event: "right", event: Event) => void) & ((event: "focus", event: Event) => void) & ((event: "blur", event: Event) => void) & ((event: "invalid", event: Event) => void) & ((event: "icon-click", event: Event) => void) & ((event: "icon-right-click", event: Event) => void) & ((event: "update:active", ...args: unknown[]) => void) & ((event: "update:value", value: Date | Date[] | undefined) => void);
        $el: any;
        $options: import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
            value: {
                type: import('vue').PropType<Date | Date[] | undefined>;
                default: undefined;
            };
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            pickerProps: {
                type: ObjectConstructor;
                required: true;
            };
            dataOruga: {
                type: StringConstructor;
                required: true;
            };
            formatter: {
                type: import('vue').PropType<(value: Date | Date[] | undefined, isNative: boolean) => string>;
                required: true;
            };
            parser: {
                type: import('vue').PropType<(value: string, isNative: boolean) => Date | Date[] | undefined>;
                required: true;
            };
            type: {
                type: StringConstructor;
                required: true;
            };
            step: {
                type: StringConstructor;
                default: undefined;
            };
            min: {
                type: DateConstructor;
                default: undefined;
            };
            max: {
                type: DateConstructor;
                default: undefined;
            };
            stayOpen: {
                type: BooleanConstructor;
                default: boolean;
            };
            dtf: {
                type: ObjectConstructor;
                default: undefined;
            };
            rootClasses: {
                type: import('vue').PropType<import('../../types').ClassBind[]>;
                required: true;
            };
            dropdownClasses: {
                type: import('vue').PropType<import('../../types').ClassBind[]>;
                required: true;
            };
            boxClass: {
                type: import('vue').PropType<import('../../types').ComponentClass>;
                required: true;
            };
        }>> & Readonly<{
            onLeft?: ((event: Event) => any) | undefined;
            onRight?: ((event: Event) => any) | undefined;
            onFocus?: ((event: Event) => any) | undefined;
            onBlur?: ((event: Event) => any) | undefined;
            onInvalid?: ((event: Event) => any) | undefined;
            "onIcon-click"?: ((event: Event) => any) | undefined;
            "onIcon-right-click"?: ((event: Event) => any) | undefined;
            "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
            "onUpdate:value"?: ((value: Date | Date[] | undefined) => any) | undefined;
        }>, {
            focus: () => void;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            left: (event: Event) => any;
            right: (event: Event) => any;
            focus: (event: Event) => any;
            blur: (event: Event) => any;
            invalid: (event: Event) => any;
            "icon-click": (event: Event) => any;
            "icon-right-click": (event: Event) => any;
            "update:active": (...args: unknown[]) => any;
            "update:value": (value: Date | Date[] | undefined) => any;
        }, string, {
            value: Date | Date[] | undefined;
            active: boolean;
            max: Date;
            min: Date;
            step: string;
            stayOpen: boolean;
            dtf: Record<string, any>;
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import('vue').nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
    } & Readonly<{
        value: Date | Date[] | undefined;
        active: boolean;
        max: Date;
        min: Date;
        step: string;
        stayOpen: boolean;
        dtf: Record<string, any>;
    }> & Omit<Readonly<import('vue').ExtractPropTypes<{
        value: {
            type: import('vue').PropType<Date | Date[] | undefined>;
            default: undefined;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        pickerProps: {
            type: ObjectConstructor;
            required: true;
        };
        dataOruga: {
            type: StringConstructor;
            required: true;
        };
        formatter: {
            type: import('vue').PropType<(value: Date | Date[] | undefined, isNative: boolean) => string>;
            required: true;
        };
        parser: {
            type: import('vue').PropType<(value: string, isNative: boolean) => Date | Date[] | undefined>;
            required: true;
        };
        type: {
            type: StringConstructor;
            required: true;
        };
        step: {
            type: StringConstructor;
            default: undefined;
        };
        min: {
            type: DateConstructor;
            default: undefined;
        };
        max: {
            type: DateConstructor;
            default: undefined;
        };
        stayOpen: {
            type: BooleanConstructor;
            default: boolean;
        };
        dtf: {
            type: ObjectConstructor;
            default: undefined;
        };
        rootClasses: {
            type: import('vue').PropType<import('../../types').ClassBind[]>;
            required: true;
        };
        dropdownClasses: {
            type: import('vue').PropType<import('../../types').ClassBind[]>;
            required: true;
        };
        boxClass: {
            type: import('vue').PropType<import('../../types').ComponentClass>;
            required: true;
        };
    }>> & Readonly<{
        onLeft?: ((event: Event) => any) | undefined;
        onRight?: ((event: Event) => any) | undefined;
        onFocus?: ((event: Event) => any) | undefined;
        onBlur?: ((event: Event) => any) | undefined;
        onInvalid?: ((event: Event) => any) | undefined;
        "onIcon-click"?: ((event: Event) => any) | undefined;
        "onIcon-right-click"?: ((event: Event) => any) | undefined;
        "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
        "onUpdate:value"?: ((value: Date | Date[] | undefined) => any) | undefined;
    }>, "focus" | ("value" | "active" | "max" | "min" | "step" | "stayOpen" | "dtf")> & import('vue').ShallowUnwrapRef<{
        focus: () => void;
    }> & {} & import('vue').ComponentCustomProperties & {} & {
        $slots: any;
    }) | null;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
