import { DatepickerProps } from '../datepicker/props';
import { TimepickerProps } from '../timepicker/props';
import { DatetimepickerProps } from './props';
type ModelValue = DatetimepickerProps["modelValue"];
type __VLS_Props = DatetimepickerProps;
type __VLS_PublicProps = {
    "active"?: boolean;
    modelValue?: ModelValue;
} & __VLS_Props;
declare function __VLS_template(): any;
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    focus: () => void;
    value: import('vue').ModelRef<Date | undefined, string, Date | undefined, Date | undefined>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    focus: (event: Event) => any;
    blur: (event: Event) => any;
    invalid: (event: Event) => any;
    "update:modelValue": (value: Date | undefined) => any;
    "update:model-value": (value: Date) => any;
    "icon-click": (event: Event) => any;
    "icon-right-click": (event: Event) => any;
    "update:active": (...args: unknown[]) => any;
    "range-start": (value: Date) => any;
    "range-end": (value: Date) => any;
    "change-month": (value: number) => any;
    "change-year": (value: number) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onFocus?: ((event: Event) => any) | undefined;
    onBlur?: ((event: Event) => any) | undefined;
    onInvalid?: ((event: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((value: Date | undefined) => any) | undefined;
    "onUpdate:model-value"?: ((value: Date) => any) | undefined;
    "onIcon-click"?: ((event: Event) => any) | undefined;
    "onIcon-right-click"?: ((event: Event) => any) | undefined;
    "onUpdate:active"?: ((...args: unknown[]) => any) | undefined;
    "onRange-start"?: ((value: Date) => any) | undefined;
    "onRange-end"?: ((value: Date) => any) | undefined;
    "onChange-month"?: ((value: number) => any) | undefined;
    "onChange-year"?: ((value: number) => any) | undefined;
}>, {
    size: string;
    iconPack: string;
    useHtml5Validation: boolean;
    override: boolean;
    datepicker: DatepickerProps;
    icon: string;
    timepicker: TimepickerProps;
    position: "auto" | "top" | "bottom" | "left" | "right" | "top-right" | "top-left" | "bottom-left" | "bottom-right";
    active: boolean;
    openOnFocus: boolean;
    iconRight: string;
    mobileModal: boolean;
    desktopModal: boolean;
    teleport: boolean | string | object;
    rounded: boolean;
    formatter: (date: DatetimepickerProps["modelValue"]) => string;
    parser: (date: string) => DatetimepickerProps["modelValue"];
    creator: () => Date;
    mobileNative: boolean;
    expanded: boolean;
    disabled: boolean;
    modelValue: Date;
    customValidity: string | ((currentValue: Date | null | undefined, state: ValidityState) => string);
    placeholder: string;
    iconRightClickable: boolean;
    inline: boolean;
    readonly: boolean;
    locale: string;
    minDatetime: Date;
    maxDatetime: Date;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, any, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
