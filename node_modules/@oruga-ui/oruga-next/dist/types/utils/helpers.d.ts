import { DeepType } from '../types';
export declare const sign: (x: number) => number;
/**
 * Native modulo bug with negative numbers
 * @param n
 * @param mod
 * @returns {number}
 */
export declare const mod: (n: number, mod: number) => number;
/** add a prefix `0` to a 1 digit number */
export declare const pad: (value: number) => string;
/**
 * Asserts a value is beetween min and max
 * @param val
 * @param min
 * @param max
 * @returns {number}
 */
export declare function bound(val: number, min: number, max: number): number;
/**
 * checks if the value is of type object
 */
export declare const isObject: (value: unknown) => value is object;
/**
 * checks if the value is of type date
 */
export declare const isDate: (value: unknown) => value is Date;
/**
 * checks if the value is not null or undefined
 */
export declare const isDefined: <T>(value: T | undefined | null) => value is T;
/**
 * Determines if the value of a prop that is either present (true) or not
 * present (undefined). For example, the prop disabled should disable
 * by just existing, but what if it is set to the string "false" â€” then it
 * should not be disabled.
 *
 * @param value - Value to check for undefined.
 * @returns boolean
 */
export declare const isTrueish: (value: unknown) => boolean;
export declare const blankIfUndefined: (value: string | null | undefined) => string;
export declare const defaultIfUndefined: <T>(value: T | undefined, defaultValue: T) => T;
export declare const toCssDimension: (width: string | number | undefined, dimension?: string) => string | undefined;
/**
 * Sort an array by key without mutating original data.
 * Call the user sort function if it was passed.
 */
export declare function sortBy<T>(array: T[], key: string, fn?: (a: T, b: T, asc: boolean) => number, isAsc?: boolean, mutate?: boolean): T[];
/**
 * Deeply check if two values are equal
 */
export declare function isEqual(valueA: unknown, valueB: unknown): boolean;
/**
 * @deprecated not used
 * Returns true if it is a DOM element
 * @source https://stackoverflow.com/questions/384286/how-do-you-check-if-a-javascript-object-is-a-dom-object
 */
export declare function isElement(el: any): el is Element;
/**
 * Return display text for an option.
 * If option is an object, get the property from path based on given field, or else just the property.
 * Apply a formatter function to the property if given.
 * Return the display label.
 *
 * @param obj Object to get the label for
 * @param field  Property path of the object to use as display text
 * @param formatter Function to format the property to a string
 */
export declare function getPropertyValue<O, K extends keyof O | string>(obj: O, field?: K, formatter?: (value: DeepType<O, K>, option: O) => string): string;
/**
 * Merge function to replace Object.assign with deep merging possibility
 */
export declare function merge(target: any, source: any, deep?: boolean): any;
/**
 * Performs a deep merge of `source` into `target`.
 * Mutates `target` only but not its objects and arrays.
 *
 * @author inspired by [jhildenbiddle](https://stackoverflow.com/a/48218209).
 */
export declare function mergeDeep(target: any, source: any): any;
/**
 * Get a value of an object property/path even if it's nested
 */
export declare function getValueByPath<O, K extends keyof O | string>(obj: O, path: K, defaultValue?: DeepType<O, K>): DeepType<O, K> | undefined;
/**
 * Set a value of an object property/path even if it's nested
 */
export declare function setValueByPath(obj: Record<string, any>, path: string, value: any): void;
export declare function removeElement(el: Element): void;
/**
 * Escape regex characters
 * http://stackoverflow.com/a/6969486
 */
export declare function escapeRegExpChars(value: string): string;
/**
 * Remove accents/diacritics in a string
 * https://stackoverflow.com/a/37511463
 */
export declare function removeDiacriticsFromString(value: string): string;
/** checks if a vue vnode is empty */
export declare function isVNodeEmpty(vnode: any): boolean;
/**
 * Mobile detection
 * https://www.abeautifulsite.net/detecting-mobile-devices-with-javascript
 */
export declare const isMobileAgent: {
    Android: () => boolean;
    BlackBerry: () => boolean;
    iOS: () => boolean;
    Opera: () => boolean;
    Windows: () => boolean;
    any: () => boolean;
};
