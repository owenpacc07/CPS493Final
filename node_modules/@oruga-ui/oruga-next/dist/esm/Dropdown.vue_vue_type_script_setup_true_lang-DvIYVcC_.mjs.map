{"version":3,"file":"Dropdown.vue_vue_type_script_setup_true_lang-DvIYVcC_.mjs","sources":["../../src/components/dropdown/DropdownItem.vue","../../src/composables/useScrollHelper.ts","../../src/composables/useInfiniteScroll.ts","../../src/components/dropdown/Dropdown.vue"],"sourcesContent":["<script setup lang=\"ts\" generic=\"T\">\nimport { useId, computed, useTemplateRef } from \"vue\";\n\nimport { getDefault } from \"@/utils/config\";\nimport { isDefined, isEqual } from \"@/utils/helpers\";\nimport { defineClasses, useProviderChild } from \"@/composables\";\n\nimport type { DropdownComponent, DropdownItemComponent } from \"./types\";\nimport type { DropdownItemProps } from \"./props\";\n\n/**\n * An option item used by the dropdown component.\n * @displayName Dropdown Item\n */\ndefineOptions({\n    isOruga: true,\n    name: \"ODropdownItem\",\n    configField: \"dropdown\",\n});\n\nconst props = withDefaults(defineProps<DropdownItemProps<T>>(), {\n    override: undefined,\n    value: undefined,\n    label: undefined,\n    disabled: false,\n    clickable: true,\n    hidden: false,\n    tag: () => getDefault(\"dropdown.itemTag\", \"div\"),\n});\n\nconst emits = defineEmits<{\n    /**\n     * onclick event\n     * @param value {string | number | object} value prop data\n     * @param event {event} Native Event\n     */\n    click: [value: T, event: Event];\n}>();\n\nconst itemValue = props.value ?? useId();\n\nconst rootRef = useTemplateRef<Element>(\"rootElement\");\n\n// provided data is a computed ref to ensure reactivity\nconst providedData = computed<DropdownItemComponent<T>>(() => ({\n    ...props,\n    $el: rootRef.value,\n    value: itemValue,\n    selectItem,\n}));\n\n/** inject functionalities and data from the parent component */\nconst { parent, item } = useProviderChild<\n    DropdownComponent<T>,\n    DropdownItemComponent<T>\n>({ data: providedData });\n\nconst isClickable = computed(\n    () => !parent.value.disabled && !props.disabled && props.clickable,\n);\n\nconst isSelected = computed(() => {\n    if (!isDefined(parent.value.selected)) return false;\n    if (parent.value.multiple && Array.isArray(parent.value.selected))\n        return parent.value.selected.some((selected: T) =>\n            isEqual(itemValue, selected),\n        );\n    return isEqual(itemValue, parent.value.selected);\n});\n\nconst isFocused = computed(\n    () => item.value.identifier === parent.value.focsuedIdentifier,\n);\n\n/** Click listener, select the item. */\nfunction selectItem(event: Event): void {\n    if (!isClickable.value) return;\n    parent.value.selectItem(item.value, event);\n    emits(\"click\", itemValue as T, event);\n}\n\n/** Hover listener, focus the item. */\nfunction focusItem(): void {\n    parent.value.focusItem(item.value);\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"itemClass\", \"o-dropdown__item\"],\n    [\n        \"itemDisabledClass\",\n        \"o-dropdown__item--disabled\",\n        null,\n        computed(() => parent.value.disabled || props.disabled),\n    ],\n    [\"itemSelectedClass\", \"o-dropdown__item--active\", null, isSelected],\n    [\"itemClickableClass\", \"o-dropdown__item--clickable\", null, isClickable],\n    [\"itemFocusedClass\", \"o-dropdown__item--focused\", null, isFocused],\n);\n</script>\n\n<template>\n    <component\n        :is=\"tag\"\n        :id=\"`${parent.menuId}-${item.identifier}`\"\n        ref=\"rootElement\"\n        data-oruga=\"dropdown-item\"\n        :data-id=\"`dropdown-${item.identifier}`\"\n        :class=\"rootClasses\"\n        :role=\"parent.selectable ? 'option' : 'menuitem'\"\n        :aria-selected=\"parent.selectable ? isSelected : undefined\"\n        :aria-disabled=\"disabled\"\n        @click=\"selectItem\"\n        @mouseenter=\"focusItem\"\n        @keydown.enter=\"selectItem\"\n        @keydown.space=\"selectItem\">\n        <!--\n            @slot Override the label, default is label prop \n        -->\n        <slot>{{ label }}</slot>\n    </component>\n</template>\n","import type { MaybeRefOrGetter } from \"vue\";\nimport { unrefElement } from \"./unrefElement\";\n\n/** check if element is visible in browser view port */\nexport function isElementInView(\n    elementRef: MaybeRefOrGetter<HTMLElement>,\n): boolean {\n    const element = unrefElement(elementRef);\n    const bounding = element.getBoundingClientRect();\n\n    return (\n        bounding.top >= 0 &&\n        bounding.left >= 0 &&\n        bounding.bottom <=\n            (window.innerHeight || document.documentElement.clientHeight) &&\n        bounding.right <=\n            (window.innerWidth || document.documentElement.clientWidth)\n    );\n}\n\n/** check if an element is currently scrollable */\nexport function isScrollable(\n    elementRef: MaybeRefOrGetter<HTMLElement>,\n): boolean {\n    const element = unrefElement(elementRef);\n    return element && element.clientHeight < element.scrollHeight;\n}\n\n/**\n * ensure a given child element is within the parent's visible scroll area\n * if the child is not visible, scroll the parent\n */\nexport function maintainScrollVisibility(\n    activeElement: MaybeRefOrGetter<HTMLElement>,\n    scrollParent: MaybeRefOrGetter<HTMLElement>,\n): void {\n    const parent = unrefElement(scrollParent);\n    const element = unrefElement(activeElement);\n\n    const { offsetHeight, offsetTop } = element;\n    const { offsetHeight: parentOffsetHeight, scrollTop } = parent;\n\n    const isAbove = offsetTop < scrollTop;\n    const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n    if (isAbove) {\n        parent.scrollTo(0, offsetTop);\n    } else if (isBelow) {\n        parent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n    }\n}\n","import { isClient } from \"@/utils/ssr\";\nimport type { MaybeRefOrGetter } from \"vue\";\nimport { useEventListener, type EventTarget } from \"./useEventListener\";\nimport { unrefElement } from \"./unrefElement\";\n\nexport function useInfiniteScroll(\n    elementRef: MaybeRefOrGetter<EventTarget>,\n    onEnd: () => void,\n    onStart: () => void,\n): { checkScroll: () => void } {\n    if (isClient) useEventListener(elementRef, \"scroll\", checkScroll);\n\n    /** Check if the scroll list inside the dropdown reached the top or it's end. */\n    function checkScroll(): void {\n        const element = unrefElement(elementRef);\n        if (!element) return;\n        const trashhold = element.offsetTop;\n        if (element.clientHeight !== element.scrollHeight) {\n            if (\n                Math.ceil(\n                    element.scrollTop + element.clientHeight + trashhold,\n                ) >= element.scrollHeight\n            ) {\n                onEnd();\n            } else if (element.scrollTop <= trashhold) {\n                onStart();\n            }\n        }\n    }\n\n    return { checkScroll };\n}\n","<script setup lang=\"ts\" generic=\"T, IsMultiple extends boolean = false\">\nimport { computed, nextTick, ref, watch, useId, type Component } from \"vue\";\n\nimport ODropdownItem from \"../dropdown/DropdownItem.vue\";\nimport PositionWrapper from \"../utils/PositionWrapper.vue\";\n\nimport { getDefault } from \"@/utils/config\";\nimport { toCssDimension, isMobileAgent, isTrueish, mod } from \"@/utils/helpers\";\nimport { isClient } from \"@/utils/ssr\";\nimport {\n    unrefElement,\n    defineClasses,\n    toOptionsGroup,\n    normalizeOptions,\n    useProviderParent,\n    useMatchMedia,\n    useClickOutside,\n    usePreventScrolling,\n    useSequentialId,\n    useEventListener,\n    type OptionsGroupItem,\n} from \"@/composables\";\n\nimport type {\n    DropdownChildItem,\n    DropdownComponent,\n    DropdownItemComponent,\n} from \"./types\";\nimport type { DropdownProps } from \"./props\";\nimport { injectField } from \"../field/fieldInjection\";\nimport { maintainScrollVisibility } from \"@/composables/useScrollHelper\";\nimport { useInfiniteScroll } from \"@/composables/useInfiniteScroll\";\n\n/**\n * Dropdowns are very versatile, can used as a quick menu or even like a select for discoverable content.\n * @displayName Dropdown\n * @requires ./DropdownItem.vue\n * @style _dropdown.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"ODropdown\",\n    configField: \"dropdown\",\n});\n\ntype ModelValue = DropdownProps<T, IsMultiple>[\"modelValue\"];\n\nconst props = withDefaults(defineProps<DropdownProps<T, IsMultiple>>(), {\n    override: undefined,\n    modelValue: undefined,\n    // multiple: false,\n    options: undefined,\n    active: false,\n    label: undefined,\n    disabled: false,\n    inline: false,\n    selectable: false,\n    keepOpen: () => getDefault(\"dropdown.keepOpen\", false),\n    keepFirst: () => getDefault(\"dropdown.keepFirst\", false),\n    closeOnOutside: () => getDefault(\"dropdown.closeOnOutside\", true),\n    closeOnScroll: () => getDefault(\"dropdown.closeOnScroll\", false),\n    selectOnFocus: () => getDefault(\"dropdown.selectOnFocus\", false),\n    selectOnClose: () => getDefault(\"dropdown.selectOnClose\", false),\n    expanded: false,\n    position: () => getDefault(\"dropdown.position\", \"bottom-left\"),\n    scrollable: false,\n    maxHeight: () => getDefault(\"dropdown.maxHeight\", 200),\n    checkScroll: () => getDefault(\"dropdown.checkScroll\", false),\n    menuId: () => useId(),\n    menuTag: () => getDefault(\"dropdown.menuTag\", \"div\"),\n    triggerTag: () => getDefault(\"dropdown.triggerTag\", \"div\"),\n    triggers: () => getDefault(\"dropdown.triggers\", [\"click\"]),\n    delay: undefined,\n    desktopModal: () => getDefault(\"dropdown.desktopModal\", false),\n    mobileModal: () => getDefault(\"dropdown.mobileModal\", true),\n    mobileBreakpoint: () => getDefault(\"dropdown.mobileBreakpoint\"),\n    animation: () => getDefault(\"dropdown.animation\", \"fade\"),\n    teleport: () => getDefault(\"dropdown.teleport\", false),\n    clipScroll: () => getDefault(\"dropdown.clipScroll\", false),\n});\n\nconst emits = defineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {T | T[]} updated modelValue prop\n     */\n    \"update:model-value\": [value: ModelValue];\n    /**\n     * active prop two-way binding\n     * @param value {boolean} updated active prop\n     */\n    \"update:active\": [value: boolean];\n    /**\n     * on select event - fired before update:modelValue\n     * @param value {T} selected value\n     */\n    select: [value: T];\n    /**\n     * @deprecated use update:model-value instead\n     * on change event - fired after update:modelValue\n     * @param value {T | T[]} selected value\n     */\n    change: [value: ModelValue];\n    /**\n     * on open event\n     * @param method {string} open method\n     * @param event {Event} native event\n     */\n    open: [method: string, event: Event];\n    /**\n     * on close event\n     * @param method {string} close method\n     * @param event {Event} native event\n     */\n    close: [method: string, event: Event];\n    /** the list inside the dropdown reached the start */\n    \"scroll-start\": [];\n    /** the list inside the dropdown reached it's end */\n    \"scroll-end\": [];\n}>();\n\nconst triggerRef = ref<HTMLElement>();\nconst menuRef = ref<HTMLElement | Component>();\n\n// provided data is a computed ref to ensure reactivity\nconst provideData = computed<DropdownComponent<T>>(() => ({\n    disabled: props.disabled,\n    multiple: isTrueish(props.multiple),\n    selectable: props.selectable,\n    menuId: props.menuId,\n    selected: vmodel.value,\n    focsuedIdentifier: focusedItem.value?.identifier,\n    selectItem,\n    focusItem,\n}));\n\n/** provide functionalities and data to child item components */\nconst { childItems } = useProviderParent<\n    DropdownItemComponent<T>,\n    DropdownComponent<T>\n>({\n    rootRef: menuRef,\n    data: provideData,\n});\n\n// create a unique id sequence\nconst { nextSequence } = useSequentialId();\n\n/** normalized programamtic options */\nconst groupedOptions = computed<OptionsGroupItem<T>[]>(() => {\n    const normalizedOptions = normalizeOptions<T>(props.options, nextSequence);\n    const groupedOptions = toOptionsGroup<T>(normalizedOptions, nextSequence());\n    return groupedOptions;\n});\n\n/** is any option visible */\nconst isNotEmpty = computed(() => childItems.value.some(isItemViable));\n\n// inject parent field component if used inside one\nconst { parentField } = injectField();\n\n// the selected item value, use v-model to make it two-way binding\nconst vmodel = defineModel<ModelValue>({ default: undefined });\n\n// the active state of the dropdown, use v-model:active to make it two-way binding\nconst isActive = defineModel<boolean>(\"active\", { default: false });\n\n// set field labelId or create a unique label id if a label is given\nconst labelId = props.labelledby ?? parentField.value?.labelId;\n\nconst autoPosition = ref(props.position);\n\n/** update autoPosition on prop change */\nwatch(\n    () => props.position,\n    (v) => (autoPosition.value = v),\n);\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\n// check if client is mobile native\nconst isMobileNative = isClient && isMobileAgent.any();\n\n// check if should be shown as modal\nconst isModal = computed(\n    () =>\n        !props.inline &&\n        ((isMobile.value && props.mobileModal) ||\n            (!isMobile.value && props.desktopModal)),\n);\n\nconst menuStyle = computed(() => ({\n    maxHeight: props.scrollable ? toCssDimension(props.maxHeight) : null,\n    overflow: props.scrollable ? \"auto\" : null,\n}));\n\nconst hoverable = computed(() => props.triggers.includes(\"hover\"));\n\nconst toggleScroll = usePreventScrolling(props.clipScroll);\n\n// set infinite scroll handler\nif (isClient && props.scrollable && props.checkScroll)\n    useInfiniteScroll(\n        menuRef,\n        () => emits(\"scroll-end\"),\n        () => emits(\"scroll-start\"),\n    );\n\n// set click outside handler\nif (isClient && props.closeOnOutside)\n    useClickOutside([menuRef, triggerRef], onClickedOutside, {\n        trigger: isActive,\n        passive: true,\n    });\n\n// set scroll page event\nif (isClient && props.closeOnScroll)\n    useEventListener(window, \"scroll\", onPageScroll, { passive: true });\n\nwatch(\n    isActive,\n    (value) => {\n        // on active set event handler if not open as modal\n        if (value) {\n            // keep first option always pre-focused\n            if (!props.inline && props.keepFirst && !focusedItem.value)\n                moveFocus(1);\n        }\n        if (isModal.value) toggleScroll(value);\n    },\n    { flush: \"post\" },\n);\n\nwatch(\n    childItems,\n    () => {\n        // change pre-focused element when items change and keepFirst\n        if (isActive.value && !props.inline && props.keepFirst) {\n            focusedItem.value = undefined;\n            moveFocus(1);\n        }\n    },\n    { deep: true, flush: \"post\" },\n);\n\n// #region --- Trigger Handler ---\n\n/** Close dropdown if clicked outside. */\nfunction onClickedOutside(event: Event): void {\n    if (!isActive.value || props.inline) return;\n    if (!props.closeOnOutside) return;\n    close(\"outside\", event);\n}\n\n/** Close dropdown if page get scrolled. */\nfunction onPageScroll(event: Event): void {\n    if (!isActive.value || props.inline) return;\n    if (!props.closeOnScroll) return;\n    close(\"scroll\", event);\n}\n\nfunction onTriggerClick(event: Event): void {\n    // check if is mobile native and hoverable together\n    if (isMobileNative && hoverable.value) toggle(\"click\", event);\n    // check normal click conditions\n    if (!props.triggers.includes(\"click\")) return;\n    toggle(\"click\", event);\n}\n\nfunction onTriggerContextMenu(event: MouseEvent): void {\n    if (!props.triggers.includes(\"contextmenu\")) return;\n    event.preventDefault();\n    open(\"contextmenu\", event);\n}\n\nfunction onTriggerFocus(event: Event): void {\n    if (!props.triggers.includes(\"focus\")) return;\n    open(\"focus\", event);\n}\n\nfunction onTriggerHover(event: Event): void {\n    if (isMobileNative) return;\n    if (!props.triggers.includes(\"hover\")) return;\n    open(\"hover\", event);\n}\n\nfunction onTriggerHoverLeave(event: Event): void {\n    if (isMobileNative) return;\n    if (!props.triggers.includes(\"hover\")) return;\n    close(\"outside\", event);\n}\n\n/** Toggle dropdown if it's not disabled. */\nfunction toggle(method: string, event: Event): void {\n    if (props.disabled) return;\n    if (!isActive.value) open(method, event);\n    else close(method, event);\n}\n\nlet timer: ReturnType<typeof setTimeout> | undefined;\n\nfunction open(method: string, event: Event): void {\n    if (props.disabled) return;\n    if (isActive.value) return;\n    if (props.delay) {\n        timer = setTimeout(() => {\n            isActive.value = true;\n            emits(\"open\", method, event);\n            timer = undefined;\n        }, props.delay);\n    } else {\n        // if not active, toggle after clickOutside event\n        // this fixes toggling programmatic\n        nextTick(() => (isActive.value = true));\n        emits(\"open\", method, event);\n    }\n}\n\nfunction close(method: string, event: Event): void {\n    if (!isActive.value) return;\n    emits(\"close\", method, event);\n\n    // select item when dropdown closed\n    if (props.selectOnClose && focusedItem.value?.data?.value)\n        selectItem(focusedItem.value);\n\n    isActive.value = false;\n    focusedItem.value = undefined;\n    if (timer) clearTimeout(timer);\n}\n\n// #endregion --- Trigger Handler ---\n\n// #region --- Select Feature ---\n\n/**\n * Click listener from DropdownItem.\n *   1. Set new selected item.\n *   2. Update v-model.\n *   3. Close the dropdown.\n */\nfunction selectItem(item: DropdownChildItem<T>, event?: Event): void {\n    const value = item.data!.value!;\n    emits(\"select\", value);\n\n    if (props.selectable) {\n        // set selected option\n        if (isTrueish(props.multiple)) {\n            if (vmodel.value && Array.isArray(vmodel.value)) {\n                if (!vmodel.value.includes(value)) {\n                    // add a value\n                    vmodel.value = [...vmodel.value, value] as ModelValue;\n                } else {\n                    // remove a value\n                    vmodel.value = vmodel.value.filter(\n                        (val) => val !== value,\n                    ) as ModelValue;\n                }\n            } else {\n                // init new value array\n                vmodel.value = [value] as ModelValue;\n            }\n            // emit change after vmodel has changed\n            nextTick(() => emits(\"change\", vmodel.value));\n        } else {\n            if (vmodel.value !== value) {\n                // update a single value\n                vmodel.value = value as ModelValue;\n                // emit change after vmodel has changed\n                nextTick(() => emits(\"change\", vmodel.value));\n            }\n        }\n    }\n\n    triggerRef.value?.focus();\n    if (props.keepOpen || !isActive.value || !event) return;\n    close(\"content\", event);\n}\n\n// #endregion --- Select Feature ---\n\n// #region --- Focus Feature ---\n\nconst focusedItem = ref<DropdownChildItem<T>>();\n\n/** Hover listener from DropdownItem. */\nfunction focusItem(value: DropdownChildItem<T>): void {\n    focusedItem.value = value;\n}\n\n/** Set focus on a tab item. */\nfunction moveFocus(delta: 1 | -1): void {\n    if (!isNotEmpty.value) return;\n    const item = getFirstViableItem(focusedItem.value?.index || 0, delta);\n    setFocus(item);\n}\n\n/** Set focus on a dropdown item. */\nfunction setFocus(item: DropdownChildItem<T>): void {\n    if (props.selectOnFocus && item.data?.value)\n        selectItem(item, new Event(\"focus\"));\n\n    const dropdownMenu = unrefElement(menuRef);\n    const element = unrefElement(item.data?.$el);\n    if (!dropdownMenu || !element) return;\n\n    // set item as focused\n    focusedItem.value = item;\n\n    // scroll item into view\n    maintainScrollVisibility(element, dropdownMenu);\n}\n\nfunction onUpPressed(event: Event): void {\n    if (!isActive.value) return open(\"keydown\", event);\n    moveFocus(-1);\n}\n\nfunction onDownPressed(event: Event): void {\n    if (!isActive.value) return open(\"keydown\", event);\n    moveFocus(1);\n}\n\nfunction onEnter(event: Event): void {\n    if (!isActive.value) return;\n    if (focusedItem.value) {\n        setFocus(focusedItem.value);\n        focusedItem.value.data?.selectItem(event);\n    }\n}\n\n/** Go to the first viable item */\nfunction onHomePressed(event: Event): void {\n    open(\"keydown\", event);\n    if (!isNotEmpty.value) return;\n    const item = getFirstViableItem(0, 1);\n    setFocus(item);\n}\n\n/** Go to the last viable item */\nfunction onEndPressed(event: Event): void {\n    open(\"keydown\", event);\n    if (!isNotEmpty.value) return;\n    const item = getFirstViableItem(childItems.value.length - 1, -1);\n    setFocus(item);\n}\n\nfunction onEscape(event: Event): void {\n    close(\"escape\", event);\n}\n\n/**\n * Get the first 'viable' child, starting at startingIndex and in the direction specified\n * by the boolean parameter forward. In other words, first try to select the child at index\n * startingIndex, and if it is not visible or it is disabled, then go to the index in the\n * specified direction until either returning to startIndex or finding a viable child item.\n */\nfunction getFirstViableItem(\n    startingIndex: number,\n    delta: 1 | -1,\n): DropdownChildItem<T> {\n    let newIndex = mod(\n        focusedItem.value?.index == startingIndex\n            ? startingIndex + delta\n            : startingIndex,\n        childItems.value.length,\n    );\n    for (\n        ;\n        newIndex !== focusedItem.value?.index;\n        newIndex = mod(newIndex + delta, childItems.value.length)\n    ) {\n        // Break if the item at this index is viable (not disabled)\n        if (isItemViable(childItems.value[newIndex])) break;\n    }\n\n    return childItems.value[newIndex];\n}\n\nfunction isItemViable(item: DropdownChildItem<T>): boolean {\n    return !item.data?.disabled && !item.data?.hidden && !!item.data?.clickable;\n}\n\n// #endregion --- Focus Feature ---\n\n// #region --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-dropdown\"],\n    [\n        \"disabledClass\",\n        \"o-dropdown--disabled\",\n        null,\n        computed(() => props.disabled),\n    ],\n    [\n        \"expandedClass\",\n        \"o-dropdown--expanded\",\n        null,\n        computed(() => props.expanded),\n    ],\n    [\"inlineClass\", \"o-dropdown--inline\", null, computed(() => props.inline)],\n    [\"mobileClass\", \"o-dropdown--mobile\", null, isMobile],\n    [\"modalClass\", \"o-dropdown--modal\", null, isModal],\n    [\"hoverableClass\", \"o-dropdown--hoverable\", null, hoverable],\n    [\n        \"positionClass\",\n        \"o-dropdown--position-\",\n        autoPosition,\n        computed(() => !!autoPosition.value),\n    ],\n    [\n        \"activeClass\",\n        \"o-dropdown--active\",\n        null,\n        computed(() => isActive.value || props.inline),\n    ],\n);\n\nconst triggerClasses = defineClasses([\"triggerClass\", \"o-dropdown__trigger\"]);\n\nconst teleportClasses = defineClasses([\n    \"teleportClass\",\n    \"o-dropdown--teleport\",\n    null,\n    computed(() => !!props.teleport),\n]);\n\nconst overlayClasses = defineClasses([\"overlayClass\", \"o-dropdown__overlay\"]);\n\nconst menuClasses = defineClasses(\n    [\"menuClass\", \"o-dropdown__menu\"],\n    [\n        \"menuPositionClass\",\n        \"o-dropdown__menu--\",\n        autoPosition,\n        computed(() => !!autoPosition.value),\n    ],\n    [\n        \"menuActiveClass\",\n        \"o-dropdown__menu--active\",\n        null,\n        computed(() => isActive.value || props.inline),\n    ],\n);\n\n// #endregion --- Computed Component Classes ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ $trigger: triggerRef, $content: menuRef, value: vmodel });\n</script>\n\n<template>\n    <div\n        data-oruga=\"dropdown\"\n        :class=\"rootClasses\"\n        @mouseleave=\"onTriggerHoverLeave\"\n        @focusout=\"onTriggerHoverLeave\">\n        <component\n            :is=\"triggerTag\"\n            v-if=\"!inline\"\n            ref=\"triggerRef\"\n            :class=\"triggerClasses\"\n            :role=\"selectable ? 'combobox' : undefined\"\n            :tabindex=\"disabled ? -1 : null\"\n            :aria-haspopup=\"selectable ? 'listbox' : 'menu'\"\n            :aria-expanded=\"selectable ? isActive : undefined\"\n            :aria-activedescendant=\"\n                focusedItem ? `${menuId}-${focusedItem.identifier}` : undefined\n            \"\n            :aria-disabled=\"disabled\"\n            :aria-controls=\"menuId\"\n            :aria-labelledby=\"selectable ? labelId : undefined\"\n            :aria-label=\"selectable ? ariaLabel : undefined\"\n            @click=\"onTriggerClick\"\n            @contextmenu=\"onTriggerContextMenu\"\n            @mouseenter=\"onTriggerHover\"\n            @focus.capture=\"onTriggerFocus\"\n            @keydown.tab=\"onEscape\"\n            @keydown.escape=\"onEscape\"\n            @keydown.enter=\"onEnter\"\n            @keydown.space=\"onEnter\"\n            @keydown.up.prevent=\"onUpPressed\"\n            @keydown.down.prevent=\"onDownPressed\"\n            @keydown.home.prevent=\"onHomePressed\"\n            @keydown.end.prevent=\"onEndPressed\">\n            <!--\n                @slot Override the trigger element, default is label prop\n                @binding {boolean} active - dropdown active state\n                @binding {T | T[]} value - the selected value\n                @binding {() => void} toggle - toggle dropdown active state\n            -->\n            <slot\n                name=\"trigger\"\n                :active=\"isActive\"\n                :value=\"modelValue\"\n                :toggle=\"onTriggerClick\">\n                {{ label }}\n            </slot>\n        </component>\n\n        <PositionWrapper\n            v-slot=\"{ setContent }\"\n            v-model:position=\"autoPosition\"\n            :teleport=\"teleport\"\n            :class=\"[...rootClasses, ...teleportClasses]\"\n            :trigger=\"triggerRef\"\n            :disabled=\"!isActive\"\n            default-position=\"bottom\"\n            :disable-positioning=\"!isModal\">\n            <transition v-if=\"isModal\" :name=\"animation\">\n                <div\n                    v-show=\"isActive\"\n                    :class=\"overlayClasses\"\n                    tabindex=\"-1\"\n                    @click=\"onClickedOutside\" />\n            </transition>\n\n            <transition :name=\"animation\">\n                <component\n                    :is=\"menuTag\"\n                    v-show=\"(!disabled && isActive) || inline\"\n                    :id=\"menuId\"\n                    :ref=\"(el) => (menuRef = setContent(el))\"\n                    :tabindex=\"inline ? 0 : -1\"\n                    :class=\"menuClasses\"\n                    :style=\"menuStyle\"\n                    :role=\"selectable ? 'listbox' : 'menu'\"\n                    :aria-labelledby=\"labelId\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-hidden=\"!inline && (disabled || !isActive)\"\n                    :aria-multiselectable=\"\n                        selectable ? isTrueish(multiple) : undefined\n                    \"\n                    @keydown.enter.prevent=\"inline && onEnter($event)\"\n                    @keydown.space.prevent=\"inline && onEnter($event)\"\n                    @keydown.up.prevent=\"inline && onUpPressed($event)\"\n                    @keydown.down.prevent=\"inline && onDownPressed($event)\"\n                    @keydown.home.prevent=\"inline && onHomePressed($event)\"\n                    @keydown.end.prevent=\"inline && onEndPressed($event)\">\n                    <!--\n                        @slot Place dropdown items here\n                        @binding {boolean} active - dropdown active state\n                        @binding {number} focusedIndex - index of the focused element\n                        @binding {() => void} toggle - toggle dropdown active state\n                    -->\n                    <slot\n                        :active=\"isActive\"\n                        :focused-index=\"focusedItem?.index\"\n                        :toggle=\"toggle\">\n                        <!--\n                            @slot Place extra `o-dropdown-item` components here, even if you have some options defined by prop\n                        -->\n                        <slot name=\"before\" />\n\n                        <template v-for=\"(group, groupIndex) in groupedOptions\">\n                            <o-dropdown-item\n                                v-if=\"group.label\"\n                                v-show=\"!group.hidden\"\n                                v-bind=\"group.attrs\"\n                                :key=\"group.key\"\n                                :value=\"group.value\"\n                                :hidden=\"group.hidden\"\n                                role=\"presentation\"\n                                :clickable=\"false\">\n                                <!--\n                                    @slot Override the option group\n                                    @binding {object} group - options group\n                                    @binding {number} index - option index\n                                -->\n                                <slot\n                                    v-if=\"$slots.group\"\n                                    name=\"group\"\n                                    :group=\"group.label\"\n                                    :index=\"groupIndex\" />\n                                <span v-else>\n                                    {{ group.label }}\n                                </span>\n                            </o-dropdown-item>\n\n                            <o-dropdown-item\n                                v-for=\"option in group.options\"\n                                v-show=\"!option.hidden\"\n                                v-bind=\"option.attrs\"\n                                :key=\"option.key\"\n                                :value=\"option.value\"\n                                :hidden=\"option.hidden\">\n                                {{ option.label }}\n                            </o-dropdown-item>\n                        </template>\n\n                        <!--\n                            @slot Place extra `o-dropdown-item` components here, even if you have some options defined by prop\n                        -->\n                        <slot name=\"after\" />\n                    </slot>\n                </component>\n            </transition>\n        </PositionWrapper>\n    </div>\n</template>\n"],"names":["_a","groupedOptions","_useModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,UAAM,QAAQ;AAUd,UAAM,QAAQ;AASR,UAAA,YAAY,MAAM,SAAS,MAAM;AAEjC,UAAA,UAAU,eAAwB,aAAa;AAG/C,UAAA,eAAe,SAAmC,OAAO;AAAA,MAC3D,GAAG;AAAA,MACH,KAAK,QAAQ;AAAA,MACb,OAAO;AAAA,MACP;AAAA,IAAA,EACF;AAGI,UAAA,EAAE,QAAQ,KAAK,IAAI,iBAGvB,EAAE,MAAM,cAAc;AAExB,UAAM,cAAc;AAAA,MAChB,MAAM,CAAC,OAAO,MAAM,YAAY,CAAC,MAAM,YAAY,MAAM;AAAA,IAC7D;AAEM,UAAA,aAAa,SAAS,MAAM;AAC9B,UAAI,CAAC,UAAU,OAAO,MAAM,QAAQ,EAAU,QAAA;AAC9C,UAAI,OAAO,MAAM,YAAY,MAAM,QAAQ,OAAO,MAAM,QAAQ;AACrD,eAAA,OAAO,MAAM,SAAS;AAAA,UAAK,CAAC,aAC/B,QAAQ,WAAW,QAAQ;AAAA,QAC/B;AACJ,aAAO,QAAQ,WAAW,OAAO,MAAM,QAAQ;AAAA,IAAA,CAClD;AAED,UAAM,YAAY;AAAA,MACd,MAAM,KAAK,MAAM,eAAe,OAAO,MAAM;AAAA,IACjD;AAGA,aAAS,WAAW,OAAoB;AAChC,UAAA,CAAC,YAAY,MAAO;AACxB,aAAO,MAAM,WAAW,KAAK,OAAO,KAAK;AACnC,YAAA,SAAS,WAAgB,KAAK;AAAA,IAAA;AAIxC,aAAS,YAAkB;AAChB,aAAA,MAAM,UAAU,KAAK,KAAK;AAAA,IAAA;AAKrC,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,kBAAkB;AAAA,MAChC;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,OAAO,MAAM,YAAY,MAAM,QAAQ;AAAA,MAC1D;AAAA,MACA,CAAC,qBAAqB,4BAA4B,MAAM,UAAU;AAAA,MAClE,CAAC,sBAAsB,+BAA+B,MAAM,WAAW;AAAA,MACvE,CAAC,oBAAoB,6BAA6B,MAAM,SAAS;AAAA,IACrE;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEgB,SAAA,yBACZ,eACA,cACI;AACE,QAAA,SAAS,aAAa,YAAY;AAClC,QAAA,UAAU,aAAa,aAAa;AAEpC,QAAA,EAAE,cAAc,UAAA,IAAc;AACpC,QAAM,EAAE,cAAc,oBAAoB,UAAc,IAAA;AAExD,QAAM,UAAU,YAAY;AACtB,QAAA,UAAU,YAAY,eAAe,YAAY;AAEvD,MAAI,SAAS;AACF,WAAA,SAAS,GAAG,SAAS;AAAA,aACrB,SAAS;AAChB,WAAO,SAAS,GAAG,YAAY,qBAAqB,YAAY;AAAA,EAAA;AAExE;AC7CgB,SAAA,kBACZ,YACA,OACA,SAC2B;AAC3B,MAAI,SAAU,kBAAiB,YAAY,UAAU,WAAW;AAGhE,WAAS,cAAoB;AACnB,UAAA,UAAU,aAAa,UAAU;AACvC,QAAI,CAAC,QAAS;AACd,UAAM,YAAY,QAAQ;AACtB,QAAA,QAAQ,iBAAiB,QAAQ,cAAc;AAC/C,UACI,KAAK;AAAA,QACD,QAAQ,YAAY,QAAQ,eAAe;AAAA,MAAA,KAC1C,QAAQ,cACf;AACQ,cAAA;AAAA,MAAA,WACC,QAAQ,aAAa,WAAW;AAC/B,gBAAA;AAAA,MAAA;AAAA,IACZ;AAAA,EACJ;AAGJ,SAAO,EAAE,YAAY;AACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgBA,UAAM,QAAQ;AAkCd,UAAM,QAAQ;AAwCd,UAAM,aAAa,IAAiB;AACpC,UAAM,UAAU,IAA6B;AAGvC,UAAA,cAAc,SAA+B,MAAO;;AAAA;AAAA,QACtD,UAAU,MAAM;AAAA,QAChB,UAAU,UAAU,MAAM,QAAQ;AAAA,QAClC,YAAY,MAAM;AAAA,QAClB,QAAQ,MAAM;AAAA,QACd,UAAU,OAAO;AAAA,QACjB,oBAAmBA,MAAA,YAAY,UAAZ,gBAAAA,IAAmB;AAAA,QACtC;AAAA,QACA;AAAA,MAAA;AAAA,KACF;AAGI,UAAA,EAAE,WAAW,IAAI,kBAGrB;AAAA,MACE,SAAS;AAAA,MACT,MAAM;AAAA,IAAA,CACT;AAGK,UAAA,EAAE,aAAa,IAAI,gBAAgB;AAGnC,UAAA,iBAAiB,SAAgC,MAAM;AACzD,YAAM,oBAAoB,iBAAoB,MAAM,SAAS,YAAY;AACzE,YAAMC,kBAAiB,eAAkB,mBAAmB,aAAA,CAAc;AACnEA,aAAAA;AAAAA,IAAA,CACV;AAGD,UAAM,aAAa,SAAS,MAAM,WAAW,MAAM,KAAK,YAAY,CAAC;AAG/D,UAAA,EAAE,YAAY,IAAI,YAAY;AAG9B,UAAA,SAASC,SAAuB,SAAA,YAAuB;AAGvD,UAAA,WAAWA,SAAoB,SAAC,QAA4B;AAGlE,UAAM,UAAU,MAAM,gBAAc,iBAAY,UAAZ,mBAAmB;AAEjD,UAAA,eAAe,IAAI,MAAM,QAAQ;AAGvC;AAAA,MACI,MAAM,MAAM;AAAA,MACZ,CAAC,MAAO,aAAa,QAAQ;AAAA,IACjC;AAEA,UAAM,EAAE,SAAa,IAAA,cAAc,MAAM,gBAAgB;AAGnD,UAAA,iBAAiB,YAAY,cAAc,IAAI;AAGrD,UAAM,UAAU;AAAA,MACZ,MACI,CAAC,MAAM,WACL,SAAS,SAAS,MAAM,eACrB,CAAC,SAAS,SAAS,MAAM;AAAA,IACtC;AAEM,UAAA,YAAY,SAAS,OAAO;AAAA,MAC9B,WAAW,MAAM,aAAa,eAAe,MAAM,SAAS,IAAI;AAAA,MAChE,UAAU,MAAM,aAAa,SAAS;AAAA,IAAA,EACxC;AAEF,UAAM,YAAY,SAAS,MAAM,MAAM,SAAS,SAAS,OAAO,CAAC;AAE3D,UAAA,eAAe,oBAAoB,MAAM,UAAU;AAGrD,QAAA,YAAY,MAAM,cAAc,MAAM;AACtC;AAAA,QACI;AAAA,QACA,MAAM,MAAM,YAAY;AAAA,QACxB,MAAM,MAAM,cAAc;AAAA,MAC9B;AAGJ,QAAI,YAAY,MAAM;AAClB,sBAAgB,CAAC,SAAS,UAAU,GAAG,kBAAkB;AAAA,QACrD,SAAS;AAAA,QACT,SAAS;AAAA,MAAA,CACZ;AAGL,QAAI,YAAY,MAAM;AAClB,uBAAiB,QAAQ,UAAU,cAAc,EAAE,SAAS,MAAM;AAEtE;AAAA,MACI;AAAA,MACA,CAAC,UAAU;AAEP,YAAI,OAAO;AAEP,cAAI,CAAC,MAAM,UAAU,MAAM,aAAa,CAAC,YAAY;AACjD,sBAAU,CAAC;AAAA,QAAA;AAEf,YAAA,QAAQ,MAAO,cAAa,KAAK;AAAA,MACzC;AAAA,MACA,EAAE,OAAO,OAAO;AAAA,IACpB;AAEA;AAAA,MACI;AAAA,MACA,MAAM;AAEF,YAAI,SAAS,SAAS,CAAC,MAAM,UAAU,MAAM,WAAW;AACpD,sBAAY,QAAQ;AACpB,oBAAU,CAAC;AAAA,QAAA;AAAA,MAEnB;AAAA,MACA,EAAE,MAAM,MAAM,OAAO,OAAO;AAAA,IAChC;AAKA,aAAS,iBAAiB,OAAoB;AAC1C,UAAI,CAAC,SAAS,SAAS,MAAM,OAAQ;AACjC,UAAA,CAAC,MAAM,eAAgB;AAC3B,YAAM,WAAW,KAAK;AAAA,IAAA;AAI1B,aAAS,aAAa,OAAoB;AACtC,UAAI,CAAC,SAAS,SAAS,MAAM,OAAQ;AACjC,UAAA,CAAC,MAAM,cAAe;AAC1B,YAAM,UAAU,KAAK;AAAA,IAAA;AAGzB,aAAS,eAAe,OAAoB;AAExC,UAAI,kBAAkB,UAAU,MAAO,QAAO,SAAS,KAAK;AAE5D,UAAI,CAAC,MAAM,SAAS,SAAS,OAAO,EAAG;AACvC,aAAO,SAAS,KAAK;AAAA,IAAA;AAGzB,aAAS,qBAAqB,OAAyB;AACnD,UAAI,CAAC,MAAM,SAAS,SAAS,aAAa,EAAG;AAC7C,YAAM,eAAe;AACrB,WAAK,eAAe,KAAK;AAAA,IAAA;AAG7B,aAAS,eAAe,OAAoB;AACxC,UAAI,CAAC,MAAM,SAAS,SAAS,OAAO,EAAG;AACvC,WAAK,SAAS,KAAK;AAAA,IAAA;AAGvB,aAAS,eAAe,OAAoB;AACxC,UAAI,eAAgB;AACpB,UAAI,CAAC,MAAM,SAAS,SAAS,OAAO,EAAG;AACvC,WAAK,SAAS,KAAK;AAAA,IAAA;AAGvB,aAAS,oBAAoB,OAAoB;AAC7C,UAAI,eAAgB;AACpB,UAAI,CAAC,MAAM,SAAS,SAAS,OAAO,EAAG;AACvC,YAAM,WAAW,KAAK;AAAA,IAAA;AAIjB,aAAA,OAAO,QAAgB,OAAoB;AAChD,UAAI,MAAM,SAAU;AACpB,UAAI,CAAC,SAAS,MAAO,MAAK,QAAQ,KAAK;AAAA,UAClC,OAAM,QAAQ,KAAK;AAAA,IAAA;AAGxB,QAAA;AAEK,aAAA,KAAK,QAAgB,OAAoB;AAC9C,UAAI,MAAM,SAAU;AACpB,UAAI,SAAS,MAAO;AACpB,UAAI,MAAM,OAAO;AACb,gBAAQ,WAAW,MAAM;AACrB,mBAAS,QAAQ;AACX,gBAAA,QAAQ,QAAQ,KAAK;AACnB,kBAAA;AAAA,QAAA,GACT,MAAM,KAAK;AAAA,MAAA,OACX;AAGM,iBAAA,MAAO,SAAS,QAAQ,IAAK;AAChC,cAAA,QAAQ,QAAQ,KAAK;AAAA,MAAA;AAAA,IAC/B;AAGK,aAAA,MAAM,QAAgB,OAAoB;;AAC3C,UAAA,CAAC,SAAS,MAAO;AACf,YAAA,SAAS,QAAQ,KAAK;AAG5B,UAAI,MAAM,mBAAiB,MAAAF,MAAA,YAAY,UAAZ,gBAAAA,IAAmB,SAAnB,mBAAyB;AAChD,mBAAW,YAAY,KAAK;AAEhC,eAAS,QAAQ;AACjB,kBAAY,QAAQ;AAChB,UAAA,oBAAoB,KAAK;AAAA,IAAA;AAaxB,aAAA,WAAW,MAA4B,OAAqB;;AAC3D,YAAA,QAAQ,KAAK,KAAM;AACzB,YAAM,UAAU,KAAK;AAErB,UAAI,MAAM,YAAY;AAEd,YAAA,UAAU,MAAM,QAAQ,GAAG;AAC3B,cAAI,OAAO,SAAS,MAAM,QAAQ,OAAO,KAAK,GAAG;AAC7C,gBAAI,CAAC,OAAO,MAAM,SAAS,KAAK,GAAG;AAE/B,qBAAO,QAAQ,CAAC,GAAG,OAAO,OAAO,KAAK;AAAA,YAAA,OACnC;AAEI,qBAAA,QAAQ,OAAO,MAAM;AAAA,gBACxB,CAAC,QAAQ,QAAQ;AAAA,cACrB;AAAA,YAAA;AAAA,UACJ,OACG;AAEI,mBAAA,QAAQ,CAAC,KAAK;AAAA,UAAA;AAGzB,mBAAS,MAAM,MAAM,UAAU,OAAO,KAAK,CAAC;AAAA,QAAA,OACzC;AACC,cAAA,OAAO,UAAU,OAAO;AAExB,mBAAO,QAAQ;AAEf,qBAAS,MAAM,MAAM,UAAU,OAAO,KAAK,CAAC;AAAA,UAAA;AAAA,QAChD;AAAA,MACJ;AAGJ,OAAAA,MAAA,WAAW,UAAX,gBAAAA,IAAkB;AAClB,UAAI,MAAM,YAAY,CAAC,SAAS,SAAS,CAAC,MAAO;AACjD,YAAM,WAAW,KAAK;AAAA,IAAA;AAO1B,UAAM,cAAc,IAA0B;AAG9C,aAAS,UAAU,OAAmC;AAClD,kBAAY,QAAQ;AAAA,IAAA;AAIxB,aAAS,UAAU,OAAqB;;AAChC,UAAA,CAAC,WAAW,MAAO;AACvB,YAAM,OAAO,qBAAmBA,MAAA,YAAY,UAAZ,gBAAAA,IAAmB,UAAS,GAAG,KAAK;AACpE,eAAS,IAAI;AAAA,IAAA;AAIjB,aAAS,SAAS,MAAkC;;AAC5C,UAAA,MAAM,mBAAiBA,MAAA,KAAK,SAAL,gBAAAA,IAAW;AAClC,mBAAW,MAAM,IAAI,MAAM,OAAO,CAAC;AAEjC,YAAA,eAAe,aAAa,OAAO;AACzC,YAAM,UAAU,cAAa,UAAK,SAAL,mBAAW,GAAG;AACvC,UAAA,CAAC,gBAAgB,CAAC,QAAS;AAG/B,kBAAY,QAAQ;AAGpB,+BAAyB,SAAS,YAAY;AAAA,IAAA;AAGlD,aAAS,YAAY,OAAoB;AACrC,UAAI,CAAC,SAAS,MAAc,QAAA,KAAK,WAAW,KAAK;AACjD,gBAAU,EAAE;AAAA,IAAA;AAGhB,aAAS,cAAc,OAAoB;AACvC,UAAI,CAAC,SAAS,MAAc,QAAA,KAAK,WAAW,KAAK;AACjD,gBAAU,CAAC;AAAA,IAAA;AAGf,aAAS,QAAQ,OAAoB;;AAC7B,UAAA,CAAC,SAAS,MAAO;AACrB,UAAI,YAAY,OAAO;AACnB,iBAAS,YAAY,KAAK;AACd,SAAAA,MAAA,YAAA,MAAM,SAAN,gBAAAA,IAAY,WAAW;AAAA,MAAK;AAAA,IAC5C;AAIJ,aAAS,cAAc,OAAoB;AACvC,WAAK,WAAW,KAAK;AACjB,UAAA,CAAC,WAAW,MAAO;AACjB,YAAA,OAAO,mBAAmB,GAAG,CAAC;AACpC,eAAS,IAAI;AAAA,IAAA;AAIjB,aAAS,aAAa,OAAoB;AACtC,WAAK,WAAW,KAAK;AACjB,UAAA,CAAC,WAAW,MAAO;AACvB,YAAM,OAAO,mBAAmB,WAAW,MAAM,SAAS,GAAG,EAAE;AAC/D,eAAS,IAAI;AAAA,IAAA;AAGjB,aAAS,SAAS,OAAoB;AAClC,YAAM,UAAU,KAAK;AAAA,IAAA;AAShB,aAAA,mBACL,eACA,OACoB;;AACpB,UAAI,WAAW;AAAA,UACXA,MAAA,YAAY,UAAZ,gBAAAA,IAAmB,UAAS,gBACtB,gBAAgB,QAChB;AAAA,QACN,WAAW,MAAM;AAAA,MACrB;AAGI,aAAA,eAAa,iBAAY,UAAZ,mBAAmB,QAChC,WAAW,IAAI,WAAW,OAAO,WAAW,MAAM,MAAM,GAC1D;AAEE,YAAI,aAAa,WAAW,MAAM,QAAQ,CAAC,EAAG;AAAA,MAAA;AAG3C,aAAA,WAAW,MAAM,QAAQ;AAAA,IAAA;AAGpC,aAAS,aAAa,MAAqC;;AAChD,aAAA,GAACA,MAAA,KAAK,SAAL,gBAAAA,IAAW,aAAY,GAAC,UAAK,SAAL,mBAAW,WAAU,CAAC,GAAC,UAAK,SAAL,mBAAW;AAAA,IAAA;AAOtE,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,YAAY;AAAA,MAC1B;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,QAAQ;AAAA,MACjC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,QAAQ;AAAA,MACjC;AAAA,MACA,CAAC,eAAe,sBAAsB,MAAM,SAAS,MAAM,MAAM,MAAM,CAAC;AAAA,MACxE,CAAC,eAAe,sBAAsB,MAAM,QAAQ;AAAA,MACpD,CAAC,cAAc,qBAAqB,MAAM,OAAO;AAAA,MACjD,CAAC,kBAAkB,yBAAyB,MAAM,SAAS;AAAA,MAC3D;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,CAAC,CAAC,aAAa,KAAK;AAAA,MACvC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,SAAS,SAAS,MAAM,MAAM;AAAA,MAAA;AAAA,IAErD;AAEA,UAAM,iBAAiB,cAAc,CAAC,gBAAgB,qBAAqB,CAAC;AAE5E,UAAM,kBAAkB,cAAc;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,MAAM,CAAC,CAAC,MAAM,QAAQ;AAAA,IAAA,CAClC;AAED,UAAM,iBAAiB,cAAc,CAAC,gBAAgB,qBAAqB,CAAC;AAE5E,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,kBAAkB;AAAA,MAChC;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,CAAC,CAAC,aAAa,KAAK;AAAA,MACvC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,SAAS,SAAS,MAAM,MAAM;AAAA,MAAA;AAAA,IAErD;AAKA,aAAa,EAAE,UAAU,YAAY,UAAU,SAAS,OAAO,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}