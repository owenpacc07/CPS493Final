/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
import { defineComponent, computed, createBlock, openBlock, resolveDynamicComponent, withKeys, normalizeClass, unref, withCtx, createElementVNode, createCommentVNode, createElementBlock, renderSlot, createTextVNode, toDisplayString } from "vue";
import { _ as _sfc_main$1 } from "./Icon.vue_vue_type_script_setup_true_lang-v4MwBFqk.mjs";
import { g as getDefault } from "./config-B-gWlaT6.mjs";
import { d as defineClasses } from "./defineClasses-BApkclKh.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    isOruga: true,
    name: "OButton",
    configField: "button"
  },
  __name: "Button",
  props: {
    override: { type: Boolean, default: void 0 },
    tag: { default: () => getDefault("button.tag", "button") },
    variant: { default: () => getDefault("button.variant") },
    size: { default: () => getDefault("button.size") },
    label: { default: void 0 },
    iconPack: { default: () => getDefault("button.iconPack") },
    iconLeft: { default: void 0 },
    iconRight: { default: void 0 },
    rounded: { type: Boolean, default: () => getDefault("button.rounded", false) },
    expanded: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    outlined: { type: Boolean, default: false },
    loading: { type: Boolean, default: false },
    inverted: { type: Boolean, default: false },
    type: { default: "button" },
    iconBoth: { type: Boolean, default: false },
    rootClass: {},
    sizeClass: {},
    variantClass: {},
    outlinedClass: {},
    invertedClass: {},
    loadingClass: {},
    expandedClass: {},
    roundedClass: {},
    disabledClass: {},
    wrapperClass: {},
    iconClass: {},
    iconLeftClass: {},
    iconRightClass: {},
    labelClass: {}
  },
  emits: ["click"],
  setup(__props) {
    const props = __props;
    const computedTag = computed(
      () => typeof props.disabled !== "undefined" && props.disabled !== false ? "button" : props.tag
    );
    const computedNativeType = computed(
      () => props.tag === "button" || props.tag === "input" ? props.type : null
    );
    const rootClasses = defineClasses(
      ["rootClass", "o-button"],
      [
        "sizeClass",
        "o-button--",
        computed(() => props.size),
        computed(() => !!props.size)
      ],
      [
        "variantClass",
        "o-button--",
        computed(() => props.variant),
        computed(() => !!props.variant && !props.outlined && !props.inverted)
      ],
      [
        "outlinedClass",
        "o-button--outlined",
        null,
        computed(() => props.outlined && !props.variant)
      ],
      [
        "invertedClass",
        "o-button--inverted",
        null,
        computed(() => props.inverted && !props.variant)
      ],
      [
        "outlinedClass",
        "o-button--outlined-",
        computed(() => props.variant),
        computed(() => props.outlined && !!props.variant)
      ],
      [
        "invertedClass",
        "o-button--inverted-",
        computed(() => props.variant),
        computed(() => props.inverted && !!props.variant)
      ],
      [
        "expandedClass",
        "o-button--expanded",
        null,
        computed(() => props.expanded)
      ],
      ["loadingClass", "o-button--loading", null, computed(() => props.loading)],
      ["roundedClass", "o-button--rounded", null, computed(() => props.rounded)],
      [
        "disabledClass",
        "o-button--disabled",
        null,
        computed(() => props.disabled)
      ]
    );
    const wrapperClasses = defineClasses(["wrapperClass", "o-button__wrapper"]);
    const labelClasses = defineClasses(["labelClass", "o-button__label"]);
    const iconClasses = defineClasses(["iconClass", "o-button__icon"]);
    const iconLeftClasses = defineClasses(["iconLeftClass", "o-button__icon-left"]);
    const iconRightClasses = defineClasses([
      "iconRightClass",
      "o-button__icon-right"
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(computedTag.value), {
        "data-oruga": "button",
        type: computedNativeType.value,
        role: "button",
        tabindex: "0",
        class: normalizeClass(unref(rootClasses)),
        disabled: _ctx.disabled ? true : null,
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event)),
        onKeydown: [
          _cache[1] || (_cache[1] = withKeys(($event) => _ctx.$emit("click", $event), ["enter"])),
          _cache[2] || (_cache[2] = withKeys(($event) => _ctx.$emit("click", $event), ["space"]))
        ]
      }, {
        default: withCtx(() => [
          createElementVNode("span", {
            class: normalizeClass(unref(wrapperClasses))
          }, [
            _ctx.iconLeft ? (openBlock(), createBlock(_sfc_main$1, {
              key: 0,
              pack: _ctx.iconPack,
              icon: _ctx.iconLeft,
              size: _ctx.size,
              both: _ctx.iconBoth,
              class: normalizeClass([...unref(iconClasses), ...unref(iconLeftClasses)])
            }, null, 8, ["pack", "icon", "size", "both", "class"])) : createCommentVNode("", true),
            _ctx.label || _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
              key: 1,
              class: normalizeClass(unref(labelClasses))
            }, [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString(_ctx.label), 1)
              ])
            ], 2)) : createCommentVNode("", true),
            _ctx.iconRight ? (openBlock(), createBlock(_sfc_main$1, {
              key: 2,
              pack: _ctx.iconPack,
              icon: _ctx.iconRight,
              size: _ctx.size,
              both: _ctx.iconBoth,
              class: normalizeClass([...unref(iconClasses), ...unref(iconRightClasses)])
            }, null, 8, ["pack", "icon", "size", "both", "class"])) : createCommentVNode("", true)
          ], 2)
        ]),
        _: 3
      }, 40, ["type", "class", "disabled"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Button.vue_vue_type_script_setup_true_lang-DpmQl4e3.mjs.map
