/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
import { defineComponent, computed, createElementBlock, openBlock, normalizeStyle, normalizeClass, unref, createBlock, resolveDynamicComponent } from "vue";
import { c as getOption, g as getDefault } from "./config-B-gWlaT6.mjs";
import { merge } from "./helpers.mjs";
import { d as defineClasses } from "./defineClasses-BApkclKh.mjs";
const mdiIcons = {
  sizes: {
    default: "mdi-24px",
    small: "",
    medium: "mdi-36px",
    large: "mdi-48px"
  },
  iconPrefix: "mdi-"
};
const faIcons = () => {
  const iconComponent = getOption("iconComponent");
  const faIconPrefix = iconComponent ? "" : "fa-";
  return {
    sizes: {
      default: "",
      small: "sm",
      medium: "lg",
      large: "xl"
    },
    iconPrefix: faIconPrefix,
    internalIcons: {
      check: "check",
      information: "info-circle",
      alert: "exclamation-triangle",
      "alert-circle": "exclamation-circle",
      "arrow-up": "arrow-up",
      "chevron-right": "angle-right",
      "chevron-left": "angle-left",
      "chevron-down": "angle-down",
      "chevron-up": "angle-up",
      eye: "eye",
      "eye-off": "eye-slash",
      "caret-down": "caret-down",
      "caret-up": "caret-up",
      "close-circle": "times-circle",
      close: "times",
      loading: "circle-notch",
      "emoticon-sad": "frown"
    }
  };
};
const getIcons = () => {
  let icons = {
    mdi: mdiIcons,
    fa: faIcons(),
    fas: faIcons(),
    far: faIcons(),
    fad: faIcons(),
    fab: faIcons(),
    fal: faIcons()
  };
  const customIconPacks = getOption("customIconPacks");
  if (customIconPacks) icons = merge(icons, customIconPacks, true);
  return icons;
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    isOruga: true,
    name: "OIcon",
    configField: "icon"
  },
  __name: "Icon",
  props: {
    override: { type: Boolean, default: void 0 },
    icon: { default: void 0 },
    component: { default: () => getDefault("iconComponent") },
    pack: { default: () => getDefault("iconPack", "mdi") },
    variant: { default: () => getDefault("icon.variant") },
    size: { default: () => getDefault("icon.size") },
    customSize: { default: void 0 },
    customClass: { default: void 0 },
    clickable: { type: Boolean, default: false },
    spin: { type: Boolean, default: false },
    rotation: { default: void 0 },
    both: { type: Boolean, default: false },
    rootClass: {},
    sizeClass: {},
    variantClass: {},
    clickableClass: {},
    spinClass: {}
  },
  setup(__props) {
    const props = __props;
    const rootStyle = computed(() => {
      const style = {};
      if (props.rotation) {
        style["transform"] = `rotate(${props.rotation}deg)`;
      }
      return style;
    });
    const iconConfig = computed(() => getIcons()[props.pack]);
    const iconPrefix = computed(
      () => {
        var _a;
        return ((_a = iconConfig.value) == null ? void 0 : _a.iconPrefix) ? iconConfig.value.iconPrefix : "";
      }
    );
    const customSizeByPack = computed(() => {
      var _a;
      if ((_a = iconConfig.value) == null ? void 0 : _a.sizes) {
        if (props.size && iconConfig.value.sizes[props.size] !== void 0) {
          return iconConfig.value.sizes[props.size];
        } else if (iconConfig.value.sizes.default) {
          return iconConfig.value.sizes.default;
        }
      }
      return null;
    });
    const computedIcon = computed(
      () => `${iconPrefix.value}${getEquivalentIconOf(props.icon)}`
    );
    const computedSize = computed(() => props.customSize || customSizeByPack.value);
    const computedVariant = computed(() => {
      if (!props.variant) return;
      let newVariant = "";
      if (typeof props.variant === "string") {
        newVariant = props.variant;
      } else {
        newVariant = Object.keys(props.variant).filter(
          (key) => props.variant[key]
        )[0];
      }
      return newVariant;
    });
    function getEquivalentIconOf(value) {
      var _a, _b;
      if (!props.both) return value;
      if (((_a = iconConfig.value) == null ? void 0 : _a.internalIcons) && ((_b = iconConfig.value) == null ? void 0 : _b.internalIcons[value]))
        return iconConfig.value.internalIcons[value];
      return value;
    }
    const rootClasses = defineClasses(
      ["rootClass", "o-icon"],
      [
        "clickableClass",
        "o-icon--clickable",
        null,
        computed(() => props.clickable)
      ],
      ["spinClass", "o-icon--spin", null, computed(() => props.spin)],
      [
        "sizeClass",
        "o-icon--",
        computed(() => props.size),
        computed(() => !!props.size)
      ],
      [
        "variantClass",
        "o-icon--",
        computedVariant,
        computed(() => !!computedVariant.value)
      ]
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        "data-oruga": "icon",
        class: normalizeClass(unref(rootClasses)),
        style: normalizeStyle(rootStyle.value)
      }, [
        _ctx.component ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.component), {
          key: 0,
          icon: [_ctx.pack, computedIcon.value],
          size: computedSize.value,
          class: normalizeClass([_ctx.customClass])
        }, null, 8, ["icon", "size", "class"])) : (openBlock(), createElementBlock("i", {
          key: 1,
          class: normalizeClass([_ctx.pack, computedIcon.value, computedSize.value, _ctx.customClass])
        }, null, 2))
      ], 6);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Icon.vue_vue_type_script_setup_true_lang-v4MwBFqk.mjs.map
