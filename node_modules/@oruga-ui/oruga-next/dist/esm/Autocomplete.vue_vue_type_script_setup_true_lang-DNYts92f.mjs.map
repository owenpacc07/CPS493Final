{"version":3,"file":"Autocomplete.vue_vue_type_script_setup_true_lang-DNYts92f.mjs","sources":["../../src/components/autocomplete/Autocomplete.vue"],"sourcesContent":["<script setup lang=\"ts\" generic=\"T\">\nimport {\n    computed,\n    ref,\n    watch,\n    useAttrs,\n    useSlots,\n    useId,\n    triggerRef,\n    watchEffect,\n    useTemplateRef,\n    toValue,\n    type Component,\n    type MaybeRefOrGetter,\n} from \"vue\";\n\nimport OInput from \"../input/Input.vue\";\nimport ODropdown from \"../dropdown/Dropdown.vue\";\nimport ODropdownItem from \"../dropdown/DropdownItem.vue\";\n\nimport { getDefault } from \"@/utils/config\";\nimport {\n    defineClasses,\n    normalizeOptions,\n    toOptionsGroup,\n    toOptionsList,\n    findOption,\n    checkOptionsEmpty,\n    filterOptionsItems,\n    useInputHandler,\n    useSequentialId,\n} from \"@/composables\";\n\nimport { injectField } from \"../field/fieldInjection\";\n\nimport type { OptionsItem, OptionsGroupItem } from \"@/types\";\nimport type { AutocompleteProps } from \"./props\";\n\nenum SpecialOption {\n    Header,\n    Footer,\n}\n\n/**\n * Extended input that provide suggestions while the user types.\n * @displayName Autocomplete\n * @style _autocomplete.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OAutocomplete\",\n    configField: \"autocomplete\",\n    inheritAttrs: false,\n});\n\ntype ModelValue = AutocompleteProps<T>[\"modelValue\"];\n\nconst props = withDefaults(defineProps<AutocompleteProps<T>>(), {\n    override: undefined,\n    modelValue: undefined,\n    input: \"\",\n    active: false,\n    options: undefined,\n    filter: undefined,\n    backendFiltering: () => getDefault(\"autocomplete.backendFiltering\", false),\n    type: \"text\",\n    menuTag: () => getDefault(\"autocomplete.menuTag\", \"div\"),\n    itemTag: () => getDefault(\"autocomplete.itemTag\", \"div\"),\n    size: () => getDefault(\"autocomplete.size\"),\n    position: () => getDefault(\"autocomplete.position\", \"auto\"),\n    placeholder: undefined,\n    expanded: false,\n    rounded: false,\n    disabled: false,\n    maxlength: undefined,\n    checkScroll: () => getDefault(\"autocomplete.checkScroll\", false),\n    debounce: () => getDefault(\"autocomplete.debounce\", 400),\n    keepFirst: () => getDefault(\"autocomplete.keepFirst\", false),\n    clearOnSelect: () => getDefault(\"autocomplete.clearOnSelect\", false),\n    openOnFocus: () => getDefault(\"autocomplete.openOnFocus\", false),\n    keepOpen: () => getDefault(\"autocomplete.keepOpen\", false),\n    maxHeight: () => getDefault(\"autocomplete.maxHeight\"),\n    selectOnClose: false,\n    selectableHeader: false,\n    selectableFooter: false,\n    iconPack: () => getDefault(\"autocomplete.iconPack\"),\n    icon: () => getDefault(\"autocomplete.icon\"),\n    iconClickable: false,\n    iconRight: () => getDefault(\"autocomplete.iconRight\"),\n    iconRightClickable: false,\n    iconRightVariant: undefined,\n    clearable: () => getDefault(\"autocomplete.clearable\", false),\n    clearIcon: () => getDefault(\"autocomplete.clearIcon\", \"close-circle\"),\n    statusIcon: () => getDefault(\"statusIcon\", true),\n    desktopModal: () => getDefault(\"dropdown.desktopModal\", false),\n    mobileModal: () => getDefault(\"autocomplete.mobileModal\", false),\n    animation: () => getDefault(\"autocomplete.animation\", \"fade\"),\n    autocomplete: () => getDefault(\"autocomplete.autocomplete\", \"off\"),\n    useHtml5Validation: () => getDefault(\"useHtml5Validation\", true),\n    customValidity: undefined,\n    teleport: () => getDefault(\"autocomplete.teleport\", false),\n    inputClasses: () => getDefault(\"autocomplete.inputClasses\", {}),\n});\n\nconst emits = defineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {T} updated modelValue prop\n     */\n    \"update:model-value\": [value: ModelValue];\n    /**\n     * input prop two-way binding\n     * @param value {string} updated input prop\n     */\n    \"update:input\": [value: string];\n    /**\n     * active prop two-way binding\n     * @param value {boolean} updated active prop\n     */\n    \"update:active\": [value: boolean];\n    /**\n     * on input change event\n     * @param value {string} input value\n     * @param event {Event} native event\n     */\n    input: [value: string, event: Event];\n    /**\n     * selected element changed event\n     * @param value {T} selected value\n     */\n    select: [value: ModelValue];\n    /**\n     * header is selected\n     */\n    \"select-header\": [];\n    /**\n     * footer is selected\n     */\n    \"select-footer\": [];\n    /**\n     * on input focus event\n     * @param event {Event} native event\n     */\n    focus: [event: Event];\n    /**\n     * on input blur event\n     * @param event {Event} native event\n     */\n    blur: [event: Event];\n    /**\n     * on input invalid event\n     * @param event {Event} native event\n     */\n    invalid: [event: Event];\n    /**\n     * on icon click event\n     * @param event {Event} native event\n     */\n    \"icon-click\": [event: Event];\n    /**\n     * on icon right click event\n     * @param event {Event} native event\n     */\n    \"icon-right-click\": [event: Event];\n    /** the list inside the dropdown reached the start */\n    \"scroll-start\": [];\n    /** the list inside the dropdown reached it's end */\n    \"scroll-end\": [];\n}>();\n\nconst slots = useSlots();\n\n// define as Component to prevent docs memmory overload\nconst inputRef = useTemplateRef<Component>(\"inputComponent\");\n\n// use form input functionalities\nconst { checkHtml5Validity, onInvalid, onFocus, onBlur, isFocused, setFocus } =\n    useInputHandler(inputRef, emits, props);\n\n// inject parent field component if used inside one\nconst { parentField } = injectField();\n\n// the active state of the dropdown, use v-model:active to make it two-way binding\nconst isActive = defineModel<boolean>(\"active\", { default: false });\n\n// the selected value, use v-model to make it two-way binding\nconst selectedValue = defineModel<ModelValue>({ default: undefined });\n\n// the value of the inner input, use v-model:input to make it two-way binding\nconst inputValue = defineModel<string>(\"input\", { default: \"\" });\n\n/** create a unique id for the menu */\nconst menuId = useId();\n\n// create a unique id sequence\nconst { nextSequence } = useSequentialId();\n\n/** normalized programamtic options */\nconst groupedOptions = computed<OptionsGroupItem<T>[]>(() => {\n    const normalizedOptions = normalizeOptions<T>(props.options, nextSequence);\n    const groupedOptions = toOptionsGroup<T>(normalizedOptions, nextSequence());\n    return groupedOptions;\n});\n\n// if not backend filtered\nif (!props.backendFiltering)\n    /**\n     * Applies an reactive filter for the options based on the input value.\n     * Options are filtered by setting the hidden attribute.\n     */\n    watchEffect(() => {\n        // filter options by input value\n        filterOptionsItems<T>(groupedOptions, (o) =>\n            filterItems(o, inputValue),\n        );\n        // trigger reactive update of groupedOptions\n        triggerRef(groupedOptions);\n    });\n\nfunction filterItems(\n    option: OptionsItem<T>,\n    value: MaybeRefOrGetter<string>,\n): boolean {\n    if (typeof props.filter === \"function\")\n        return props.filter(option.value, toValue(value));\n    else\n        return !String(option.label)\n            .toLowerCase()\n            .includes(toValue(value)?.toLowerCase());\n}\n\n/** is no option visible */\nconst isEmpty = computed(() => checkOptionsEmpty(groupedOptions));\n\nwatch(isEmpty, (empty) => {\n    if (isFocused.value) isActive.value = !empty || !!slots.empty;\n});\n\n// --- Select Feature ---\n\nconst dropdownValue = ref();\n\n/**\n * When updating input's value:\n * 1. If value isn't the same as selected, set undefined\n * 2. Close dropdown if value is clear or else open it\n */\nwatch(\n    inputValue,\n    (value) => {\n        // find the option for the current selected value\n        const currentOption = findOption(groupedOptions, selectedValue);\n        // clear selected if option label does not match the selected value\n        if (currentOption && currentOption.label !== value) {\n            // clear selected value\n            selectedValue.value = undefined;\n            dropdownValue.value = undefined;\n        }\n\n        // Close dropdown if data is empty\n        if (isEmpty.value && !slots.empty) {\n            isActive.value = false;\n        }\n    },\n    { flush: \"post\" },\n);\n\n/**\n * When updating selected value:\n * 1. Set selected option label as input value\n * 2. Set the selected option value as dropdown value\n */\nwatch(\n    selectedValue,\n    (value) => {\n        if (!value) return;\n        const option = findOption(groupedOptions, value);\n        if (!option) return;\n\n        // set selected option label as input value\n        inputValue.value = props.clearOnSelect ? \"\" : option.label;\n        checkHtml5Validity();\n\n        // set the selected option value as dropdown value\n        dropdownValue.value = option.value;\n    },\n    // set initial values if selected is given\n    { immediate: true },\n);\n\nfunction setSelected(item: T | SpecialOption | undefined): void {\n    let option: OptionsItem<T> | undefined = undefined;\n\n    /** Check if header or footer was selected. */\n    if (item === SpecialOption.Header) {\n        emits(\"select-header\");\n    } else if (item === SpecialOption.Footer) {\n        emits(\"select-footer\");\n    } else if (item) {\n        // convert grouped options to simple list\n        const options: OptionsItem<T>[] = toOptionsList(groupedOptions);\n\n        // get option or undefined for header, footer or group\n        option = options.find((o) => o.value === item);\n    }\n\n    // set which option is currently selected, update v-model,\n    selectedValue.value = option?.value;\n    emits(\"select\", option?.value);\n\n    if (props.keepOpen) setFocus();\n    else isActive.value = false;\n}\n\n// --- Event Handler ---\n\n/** emit input change event */\nfunction onInput(value: string, event: Event): void {\n    if (isFocused.value) {\n        if (!isActive.value && value && (!isEmpty.value || slots.empty)) {\n            // open dropdown if input has value and options are available\n            isActive.value = true;\n        } else if (isActive.value && !value && !props.keepOpen) {\n            // close dropdown if input has not value and is not keep open\n            isActive.value = false;\n        }\n    }\n    emits(\"input\", value, event);\n    checkHtml5Validity();\n}\n\n/**\n * Focus listener.\n * If value is the same as selected, select all text.\n */\nfunction handleFocus(event: Event): void {\n    // open dropdown if `openOnFocus` and has options\n    if (\n        props.openOnFocus &&\n        (!!props.options?.length || !!slots.header || !!slots.footer)\n    )\n        isActive.value = true;\n    onFocus(event);\n}\n\n/**\n * Blur listener.\n * Close on blur.\n */\nfunction handleBlur(event: Event): void {\n    onBlur(event);\n}\n\n// #endregion --- Event Handler ---\n\n// #region --- Icon Feature ---\n\nconst computedIconRight = computed(() =>\n    props.clearable && inputValue.value && props.clearIcon\n        ? props.clearIcon\n        : props.iconRight,\n);\n\nconst computedIconRightClickable = computed(() =>\n    props.clearable ? true : props.iconRightClickable,\n);\n\nfunction rightIconClick(event: Event): void {\n    if (props.clearable) {\n        inputValue.value = \"\";\n    } else emits(\"icon-right-click\", event);\n}\n\n// #endregion --- Icon Feature ---\n\n// #region --- Computed Component Classes ---\n\nconst attrs = useAttrs();\n\nconst inputBind = computed(() => ({\n    ...parentField?.value?.inputAttrs,\n    ...attrs,\n    ...props.inputClasses,\n}));\n\nconst rootClasses = defineClasses([\"rootClass\", \"o-autocomplete\"]);\n\nconst itemClasses = defineClasses([\"itemClass\", \"o-autocomplete__item\"]);\n\nconst itemEmptyClasses = defineClasses([\n    \"itemEmptyClass\",\n    \"o-autocomplete__item--empty\",\n]);\n\nconst itemGroupClasses = defineClasses([\n    \"itemGroupTitleClass\",\n    \"o-autocomplete__item-group-title\",\n]);\n\nconst itemHeaderClasses = defineClasses([\n    \"itemHeaderClass\",\n    \"o-autocomplete__item-header\",\n]);\n\nconst itemFooterClasses = defineClasses([\n    \"itemFooterClass\",\n    \"o-autocomplete__item-footer\",\n]);\n\n// #endregion --- Computed Component Classes ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ focus: setFocus, value: inputValue });\n</script>\n\n<template>\n    <o-dropdown\n        v-model=\"dropdownValue\"\n        v-model:active=\"isActive\"\n        data-oruga=\"autocomplete\"\n        :class=\"rootClasses\"\n        :menu-id=\"menuId\"\n        :menu-tag=\"menuTag\"\n        :triggers=\"[]\"\n        scrollable\n        selectable\n        :keep-open=\"keepOpen\"\n        :keep-first=\"keepFirst\"\n        :check-scroll=\"checkScroll\"\n        :select-on-close=\"selectOnClose\"\n        :disabled=\"disabled\"\n        :desktop-modal=\"desktopModal\"\n        :mobile-modal=\"mobileModal\"\n        :max-height=\"maxHeight\"\n        :animation=\"animation\"\n        :position=\"position\"\n        :teleport=\"teleport\"\n        :expanded=\"expanded\"\n        @select=\"setSelected\"\n        @scroll-start=\"emits('scroll-start')\"\n        @scroll-end=\"emits('scroll-end')\">\n        <template #trigger>\n            <o-input\n                ref=\"inputComponent\"\n                v-bind=\"inputBind\"\n                v-model=\"inputValue\"\n                :type=\"type\"\n                :size=\"size\"\n                :rounded=\"rounded\"\n                :icon=\"icon\"\n                :icon-right=\"computedIconRight\"\n                :icon-right-clickable=\"computedIconRightClickable\"\n                :icon-pack=\"iconPack\"\n                :placeholder=\"placeholder\"\n                :maxlength=\"maxlength\"\n                :autocomplete=\"autocomplete\"\n                :expanded=\"expanded\"\n                :disabled=\"disabled\"\n                :status-icon=\"statusIcon\"\n                :debounce=\"debounce\"\n                :aria-autocomplete=\"keepFirst ? 'both' : 'list'\"\n                :aria-controls=\"menuId\"\n                enterkeyhint=\"enter\"\n                :use-html5-validation=\"false\"\n                @input=\"onInput\"\n                @focus=\"handleFocus\"\n                @blur=\"handleBlur\"\n                @invalid=\"onInvalid\"\n                @icon-click=\"emits('icon-click', $event)\"\n                @icon-right-click=\"rightIconClick\" />\n        </template>\n\n        <o-dropdown-item\n            v-if=\"$slots.header\"\n            :tag=\"itemTag\"\n            :value=\"SpecialOption.Header\"\n            :clickable=\"selectableHeader\"\n            :class=\"[...itemClasses, ...itemHeaderClasses]\">\n            <!--\n                @slot Define an additional header\n            -->\n            <slot name=\"header\" />\n        </o-dropdown-item>\n\n        <template v-for=\"(group, groupIndex) in groupedOptions\">\n            <o-dropdown-item\n                v-if=\"group.label\"\n                v-show=\"!group.hidden\"\n                :key=\"group.key\"\n                v-bind=\"group.attrs\"\n                :hidden=\"group.hidden\"\n                :value=\"group.value\"\n                :tag=\"itemTag\"\n                role=\"presentation\"\n                :clickable=\"false\"\n                :class=\"[...itemClasses, ...itemGroupClasses]\">\n                <!--\n                    @slot Override the option group\n                    @binding {object} group - options group\n                    @binding {number} index - option index\n                -->\n                <slot\n                    v-if=\"$slots.group\"\n                    name=\"group\"\n                    :group=\"group.label\"\n                    :index=\"groupIndex\" />\n                <span v-else>\n                    {{ group.label }}\n                </span>\n            </o-dropdown-item>\n\n            <o-dropdown-item\n                v-for=\"(option, optionIndex) in group.options\"\n                v-show=\"!option.hidden\"\n                :key=\"option.key\"\n                v-bind=\"option.attrs\"\n                :value=\"option.value\"\n                :hidden=\"option.hidden\"\n                :tag=\"itemTag\"\n                :class=\"itemClasses\">\n                <!--\n                    @slot Override the select option\n                    @binding {object} option - option object\n                    @binding {number} index - option index\n                    @binding {unknown} value - option value\n                -->\n                <slot\n                    v-if=\"$slots.default\"\n                    :option=\"option\"\n                    :value=\"option.value\"\n                    :index=\"optionIndex\" />\n                <span v-else>\n                    {{ option.label }}\n                </span>\n            </o-dropdown-item>\n        </template>\n\n        <o-dropdown-item\n            v-if=\"isEmpty && $slots.empty\"\n            :tag=\"itemTag\"\n            :class=\"[...itemClasses, ...itemEmptyClasses]\">\n            <!--\n                @slot Define content for empty state\n            -->\n            <slot name=\"empty\" />\n        </o-dropdown-item>\n\n        <o-dropdown-item\n            v-if=\"$slots.footer\"\n            :tag=\"itemTag\"\n            :value=\"SpecialOption.Footer\"\n            :clickable=\"selectableFooter\"\n            :class=\"[...itemClasses, ...itemFooterClasses]\">\n            <!--\n                @slot Define an additional footer\n            -->\n            <slot name=\"footer\" />\n        </o-dropdown-item>\n    </o-dropdown>\n</template>\n"],"names":["_useModel","groupedOptions"],"mappings":"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"}