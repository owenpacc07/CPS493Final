/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
import { defineComponent, mergeModels, useTemplateRef, useSlots, useId, useModel, computed, useAttrs, createElementBlock, openBlock, normalizeClass, unref, withDirectives, createCommentVNode, createElementVNode, mergeProps, vModelCheckbox, renderSlot, createTextVNode, toDisplayString } from "vue";
import { g as getDefault } from "./config-B-gWlaT6.mjs";
import { d as defineClasses } from "./defineClasses-BApkclKh.mjs";
import { u as useInputHandler } from "./useInputHandler-B842u-_G.mjs";
import { i as injectField } from "./fieldInjection-Bs3TBpgZ.mjs";
const _hoisted_1 = ["id", "name", "value", "true-value", "false-value", "required", "indeterminate", "disabled", "autocomplete", "aria-checked", "aria-labelledby"];
const _hoisted_2 = ["id", "for"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    isOruga: true,
    name: "OCheckbox",
    configField: "checkbox",
    inheritAttrs: false
  },
  __name: "Checkbox",
  props: /* @__PURE__ */ mergeModels({
    override: { type: Boolean, default: void 0 },
    modelValue: { default: void 0 },
    variant: { default: () => getDefault("checkbox.variant") },
    size: { default: () => getDefault("checkbox.size") },
    label: { default: void 0 },
    indeterminate: { type: Boolean, default: false },
    nativeValue: { default: void 0 },
    disabled: { type: Boolean, default: false },
    required: { type: Boolean, default: false },
    name: { default: void 0 },
    trueValue: { default: void 0 },
    falseValue: { default: void 0 },
    autocomplete: { default: () => getDefault("checkbox.autocomplete", "off") },
    id: { default: () => useId() },
    useHtml5Validation: { type: Boolean, default: () => getDefault("useHtml5Validation", true) },
    customValidity: { type: [String, Function], default: "" },
    rootClass: {},
    sizeClass: {},
    variantClass: {},
    disabledClass: {},
    checkedClass: {},
    indeterminateClass: {},
    inputClass: {},
    labelClass: {}
  }, {
    "modelValue": { default: void 0 },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["update:model-value", "input", "focus", "blur", "invalid"], ["update:modelValue"]),
  setup(__props, { expose: __expose, emit: __emit }) {
    var _a, _b;
    const props = __props;
    const emits = __emit;
    const inputRef = useTemplateRef("inputElement");
    const { onBlur, onFocus, onInvalid, setFocus } = useInputHandler(
      inputRef,
      emits,
      props
    );
    const { parentField } = injectField();
    const labelId = !!parentField.value || !!props.label || !!useSlots().default ? ((_a = parentField.value) == null ? void 0 : _a.labelId) || useId() : void 0;
    if (!props.label && props.id) (_b = parentField.value) == null ? void 0 : _b.setInputId(props.id);
    const vmodel = useModel(__props, "modelValue");
    const isChecked = computed(
      () => vmodel.value === (props.trueValue ?? true) || Array.isArray(vmodel.value) && vmodel.value.includes(props.nativeValue)
    );
    function onInput(event) {
      emits("input", vmodel.value, event);
    }
    const attrs = useAttrs();
    const inputBind = computed(() => {
      var _a2;
      return {
        ...(_a2 = parentField.value) == null ? void 0 : _a2.inputAttrs,
        ...attrs
      };
    });
    const rootClasses = defineClasses(
      ["rootClass", "o-checkbox"],
      [
        "sizeClass",
        "o-checkbox--",
        computed(() => props.size),
        computed(() => !!props.size)
      ],
      [
        "variantClass",
        "o-checkbox--",
        computed(() => props.variant),
        computed(() => !!props.variant)
      ],
      [
        "disabledClass",
        "o-checkbox--disabled",
        null,
        computed(() => props.disabled)
      ],
      ["checkedClass", "o-checkbox--checked", null, isChecked],
      [
        "indeterminateClass",
        "o-checkbox--indeterminate",
        null,
        computed(() => props.indeterminate)
      ]
    );
    const inputClasses = defineClasses(["inputClass", "o-checkbox__input"]);
    const labelClasses = defineClasses(["labelClass", "o-checkbox__label"]);
    __expose({ focus: setFocus, value: vmodel });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        "data-oruga": "checkbox",
        class: normalizeClass(unref(rootClasses))
      }, [
        withDirectives(createElementVNode("input", mergeProps(inputBind.value, {
          id: _ctx.id,
          ref: "inputElement",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vmodel.value = $event),
          type: "checkbox",
          "data-oruga-input": "checkbox",
          class: unref(inputClasses),
          name: _ctx.name,
          value: _ctx.nativeValue,
          "true-value": _ctx.trueValue ?? true,
          "false-value": _ctx.falseValue ?? false,
          required: _ctx.required,
          indeterminate: _ctx.indeterminate,
          disabled: _ctx.disabled,
          autocomplete: _ctx.autocomplete,
          "aria-checked": _ctx.indeterminate ? "mixed" : isChecked.value,
          "aria-labelledby": unref(labelId),
          onBlur: _cache[1] || (_cache[1] = //@ts-ignore
          (...args) => unref(onBlur) && unref(onBlur)(...args)),
          onFocus: _cache[2] || (_cache[2] = //@ts-ignore
          (...args) => unref(onFocus) && unref(onFocus)(...args)),
          onInvalid: _cache[3] || (_cache[3] = //@ts-ignore
          (...args) => unref(onInvalid) && unref(onInvalid)(...args)),
          onChange: onInput
        }), null, 16, _hoisted_1), [
          [vModelCheckbox, vmodel.value]
        ]),
        _ctx.label || _ctx.$slots.default ? (openBlock(), createElementBlock("label", {
          key: 0,
          id: unref(labelId),
          for: _ctx.id,
          class: normalizeClass(unref(labelClasses))
        }, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(_ctx.label), 1)
          ])
        ], 10, _hoisted_2)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Checkbox.vue_vue_type_script_setup_true_lang-j0-KCyQm.mjs.map
