/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
import { defineComponent, mergeModels, useTemplateRef, useModel, watch, createBlock, openBlock, Transition, withCtx, createElementBlock, createCommentVNode, normalizeClass, unref, createElementVNode, renderSlot, createVNode, toDisplayString } from "vue";
import { _ as _sfc_main$1 } from "./Icon.vue_vue_type_script_setup_true_lang-v4MwBFqk.mjs";
import { i as isClient, g as getDefault } from "./config-B-gWlaT6.mjs";
import { d as defineClasses } from "./defineClasses-BApkclKh.mjs";
import { u as useEventListener } from "./useEventListener-DOZSd6dT.mjs";
import { u as usePreventScrolling } from "./usePreventScrolling-wKArjY8w.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    isOruga: true,
    name: "OLoading",
    configField: "loading",
    inheritAttrs: false
  },
  __name: "Loading",
  props: /* @__PURE__ */ mergeModels({
    override: { type: Boolean, default: void 0 },
    active: { type: Boolean, default: false },
    fullPage: { type: Boolean, default: true },
    label: { default: void 0 },
    animation: { default: () => getDefault("loading.animation", "fade") },
    cancelable: { type: Boolean, default: false },
    icon: { default: () => getDefault("loading.icon", "loading") },
    iconSpin: { type: Boolean, default: () => getDefault("loading.iconSpin", true) },
    iconSize: { default: () => getDefault("loading.iconSize", "medium") },
    clipScroll: { type: Boolean, default: () => getDefault("loading.clipScroll", false) },
    container: {},
    rootClass: {},
    fullPageClass: {},
    overlayClass: {},
    iconClass: {},
    labelClass: {},
    scrollClipClass: {},
    scrollKeepClass: {}
  }, {
    "fullPage": { type: Boolean, ...{ default: true } },
    "fullPageModifiers": {},
    "active": { type: Boolean, ...{ default: false } },
    "activeModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["update:active", "update:fullPage", "close"], ["update:fullPage", "update:active"]),
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const rootRef = useTemplateRef("rootElement");
    const isFullPage = useModel(__props, "fullPage");
    const isActive = useModel(__props, "active");
    const toggleScroll = usePreventScrolling(props.clipScroll);
    watch(isActive, (value) => {
      if (isFullPage.value) toggleScroll(value);
    });
    if (isClient) {
      useEventListener(rootRef, "keyup", onKeyPress, { trigger: isActive });
    }
    function onKeyPress(event) {
      if (!isActive.value) return;
      if (event.key === "Escape" || event.key === "Esc") cancel("escape");
    }
    function cancel(method) {
      if (!props.cancelable || Array.isArray(props.cancelable) && !props.cancelable.includes(method))
        return;
      close({ action: "cancel", method });
    }
    function close(...args) {
      isActive.value = false;
      emits("close", args);
    }
    const rootClasses = defineClasses(
      ["rootClass", "o-loading"],
      ["fullPageClass", "o-loading--fullpage", null, isFullPage]
    );
    const overlayClasses = defineClasses(["overlayClass", "o-loading__overlay"]);
    const iconClasses = defineClasses(["iconClass", "o-loading__icon"]);
    const labelClasses = defineClasses(["labelClass", "o-loading__label"]);
    __expose({ close });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, { name: _ctx.animation }, {
        default: withCtx(() => [
          isActive.value ? (openBlock(), createElementBlock("div", {
            key: 0,
            ref: "rootElement",
            "data-oruga": "loading",
            class: normalizeClass(unref(rootClasses)),
            role: "status",
            "aria-live": "polite"
          }, [
            createElementVNode("div", {
              class: normalizeClass(unref(overlayClasses)),
              tabindex: -1,
              onClick: _cache[0] || (_cache[0] = ($event) => cancel("outside"))
            }, null, 2),
            renderSlot(_ctx.$slots, "default", { close }, () => [
              createVNode(_sfc_main$1, {
                icon: _ctx.icon,
                spin: _ctx.iconSpin,
                size: _ctx.iconSize,
                class: normalizeClass(unref(iconClasses)),
                both: ""
              }, null, 8, ["icon", "spin", "size", "class"]),
              _ctx.label ? (openBlock(), createElementBlock("span", {
                key: 0,
                class: normalizeClass(unref(labelClasses))
              }, toDisplayString(_ctx.label), 3)) : createCommentVNode("", true)
            ])
          ], 2)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["name"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Loading.vue_vue_type_script_setup_true_lang-BIIRFJgR.mjs.map
