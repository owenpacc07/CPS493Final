/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
import { defineComponent, computed, createBlock, openBlock, resolveDynamicComponent, withKeys, withModifiers, normalizeClass, withCtx, renderSlot, createTextVNode, toDisplayString, mergeModels, useModel, watch, nextTick, createElementBlock, unref, normalizeProps, guardReactiveProps, createVNode, mergeProps, Fragment, createCommentVNode, createElementVNode, renderList } from "vue";
import { _ as _sfc_main$2 } from "./Icon.vue_vue_type_script_setup_true_lang-v4MwBFqk.mjs";
import { g as getDefault } from "./config-B-gWlaT6.mjs";
import { d as defineClasses } from "./defineClasses-BApkclKh.mjs";
import { u as useMatchMedia } from "./useMatchMedia-DbB9F3o7.mjs";
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  ...{
    isOruga: true,
    name: "OPaginationButton",
    configField: "pagination"
  },
  __name: "PaginationButton",
  props: {
    number: { type: Number, default: void 0 },
    isCurrent: { type: Boolean, default: false },
    ariaLabel: { type: String, default: void 0 },
    disabled: { type: Boolean, default: false },
    tag: {
      type: [String, Object, Function],
      default: "button"
    },
    rootClass: { type: Array, default: () => [] },
    buttonClass: {
      type: Array,
      required: true
    },
    buttonCurrentClass: {
      type: Array,
      required: true
    }
  },
  emits: ["click"],
  setup(__props) {
    const props = __props;
    const classes = computed(() => [
      ...props.rootClass,
      ...props.buttonClass,
      ...props.isCurrent ? props.buttonCurrentClass : []
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(__props.tag), {
        role: "button",
        tabindex: __props.disabled ? void 0 : 0,
        disabled: __props.disabled,
        class: normalizeClass(classes.value),
        "aria-label": __props.ariaLabel,
        "aria-current": __props.isCurrent,
        onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.$emit("click", $event), ["prevent"])),
        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers(($event) => _ctx.$emit("click", $event), ["prevent"]), ["enter"]))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(__props.number), 1)
          ])
        ]),
        _: 3
      }, 40, ["tabindex", "disabled", "class", "aria-label", "aria-current"]);
    };
  }
});
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    isOruga: true,
    name: "OPagination",
    configField: "pagination",
    inheritAttrs: false
  },
  __name: "Pagination",
  props: /* @__PURE__ */ mergeModels({
    override: { type: Boolean, default: void 0 },
    total: { default: void 0 },
    perPage: { default: () => getDefault("pagination.perPage", 20) },
    current: { default: 1 },
    rangeBefore: { default: 1 },
    rangeAfter: { default: 1 },
    size: { default: () => getDefault("pagination.size") },
    simple: { type: Boolean, default: () => getDefault("pagination.simple", false) },
    rounded: { type: Boolean, default: () => getDefault("pagination.rounded", false) },
    order: { default: () => getDefault("pagination.order", "right") },
    buttonTag: { default: () => getDefault("pagination.buttonTag", "button") },
    iconPack: { default: () => getDefault("pagination.iconPack") },
    iconPrev: { default: () => getDefault("pagination.iconPrev", "chevron-left") },
    iconNext: { default: () => getDefault("pagination.iconNext", "chevron-right") },
    mobileBreakpoint: { default: () => getDefault("pagination.mobileBreakpoint") },
    ariaNextLabel: { default: () => getDefault("pagination.ariaNextLabel", "Next page") },
    ariaPreviousLabel: { default: () => getDefault("pagination.ariaPreviousLabel", "Previous page") },
    ariaPageLabel: { default: () => getDefault("pagination.ariaPageLabel", "Page") },
    ariaCurrentLabel: { default: () => getDefault("pagination.ariaCurrentLabel", "Current page") },
    rootClass: {},
    mobileClass: {},
    orderClass: {},
    sizeClass: {},
    simpleClass: {},
    infoClass: {},
    listClass: {},
    listItemClass: {},
    ellipsisClass: {},
    buttonClass: {},
    roundedClass: {},
    buttonCurrentClass: {},
    buttonPrevClass: {},
    buttonNextClass: {},
    buttonDisabledClass: {}
  }, {
    "current": { default: 1 },
    "currentModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["update:current", "change"], ["update:current"]),
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const { isMobile } = useMatchMedia(props.mobileBreakpoint);
    const currentPage = useModel(__props, "current");
    const pageCount = computed(
      () => Math.ceil((props.total || 0) / Number(props.perPage))
    );
    watch(
      () => pageCount.value,
      (value) => {
        if (props.current > value) last(new Event("change"));
      }
    );
    const firstItem = computed(() => {
      const perPage = Number(props.perPage);
      const firstItem2 = props.current * perPage - perPage + 1;
      return firstItem2 >= 0 ? firstItem2 : 0;
    });
    const isFirst = computed(() => props.current <= 1);
    const hasFirst = computed(() => props.current >= props.rangeBefore + 2);
    const hasFirstEllipsis = computed(() => props.current >= props.rangeBefore + 4);
    const isLast = computed(() => props.current >= pageCount.value);
    const hasLast = computed(
      () => props.current <= pageCount.value - (1 + props.rangeAfter)
    );
    const hasLastEllipsis = computed(
      () => props.current < pageCount.value - (2 + props.rangeAfter)
    );
    const pagesInRange = computed(() => {
      if (props.simple) return [];
      let left = Math.max(1, props.current - props.rangeBefore);
      if (left - 1 === 2) {
        left--;
      }
      let right = Math.min(props.current + props.rangeAfter, pageCount.value);
      if (pageCount.value - right === 2) {
        right++;
      }
      const pages = [];
      for (let i = left; i <= right; i++) {
        pages.push(getPage(i));
      }
      return pages;
    });
    function getPage(num, ariaLabel) {
      return {
        number: num,
        isCurrent: props.current === num,
        onClick: (event) => changePage(num, event),
        ariaLabel: ariaLabel || getAriaPageLabel(num, props.current === num),
        tag: props.buttonTag
      };
    }
    function getAriaPageLabel(pageNumber, isCurrent) {
      if (props.ariaPageLabel && (!isCurrent || !props.ariaCurrentLabel))
        return props.ariaPageLabel + " " + pageNumber + ".";
      else if (props.ariaPageLabel && isCurrent && props.ariaCurrentLabel)
        return props.ariaCurrentLabel + ", " + props.ariaPageLabel + " " + pageNumber + ".";
      return "";
    }
    function prev(event) {
      changePage(props.current - 1, event);
    }
    function next(event) {
      changePage(props.current + 1, event);
    }
    function first(event) {
      changePage(1, event);
    }
    function last(event) {
      changePage(pageCount.value, event);
    }
    function changePage(page, event) {
      if (props.current === page || page < 1 || page > pageCount.value) return;
      emits("change", page);
      currentPage.value = page;
      if (event && event.target)
        nextTick(() => event.target.focus());
    }
    const rootClasses = defineClasses(
      ["rootClass", "o-pagination"],
      [
        "orderClass",
        "o-pagination--",
        computed(() => props.order),
        computed(() => !!props.order)
      ],
      [
        "sizeClass",
        "o-pagination--",
        computed(() => props.size),
        computed(() => !!props.size)
      ],
      ["simpleClass", "o-pagination--simple", null, computed(() => props.simple)],
      ["mobileClass", "o-pagination--mobile", null, isMobile]
    );
    const infoClasses = defineClasses(["infoClass", "o-pagination__info"]);
    const ellipsisClasses = defineClasses([
      "ellipsisClass",
      "o-pagination__ellipsis"
    ]);
    const listClasses = defineClasses(["listClass", "o-pagination__list"]);
    const listItemClasses = defineClasses(["listItemClass", "o-pagination__item"]);
    const buttonClasses = defineClasses(
      ["buttonClass", "o-pagination__button"],
      [
        "roundedClass",
        "o-pagination__button--rounded",
        null,
        computed(() => props.rounded)
      ]
    );
    const buttonCurrentClasses = defineClasses([
      "buttonCurrentClass",
      "o-pagination__button--current"
    ]);
    const buttonPrevClasses = defineClasses(
      ["buttonPrevClass", "o-pagination__button-previous"],
      ["buttonDisabledClass", "o-pagination__button--disabled", null, isFirst]
    );
    const buttonNextClasses = defineClasses(
      ["buttonNextClass", "o-pagination__button-next"],
      ["buttonDisabledClass", "o-pagination__button--disabled", null, isLast]
    );
    __expose({ last, first, prev, next });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("nav", {
        "data-oruga": "pagination",
        class: normalizeClass(unref(rootClasses))
      }, [
        renderSlot(_ctx.$slots, "previous", normalizeProps(guardReactiveProps(getPage(currentPage.value - 1, _ctx.ariaPreviousLabel))), () => [
          createVNode(_sfc_main$1, mergeProps(getPage(currentPage.value - 1, _ctx.ariaPreviousLabel), {
            disabled: isFirst.value,
            "root-class": unref(buttonPrevClasses),
            "button-class": unref(buttonClasses),
            "button-current-class": unref(buttonCurrentClasses)
          }), {
            default: withCtx(() => [
              createVNode(_sfc_main$2, {
                icon: _ctx.iconPrev,
                pack: _ctx.iconPack,
                both: "",
                "aria-hidden": "true"
              }, null, 8, ["icon", "pack"])
            ]),
            _: 1
          }, 16, ["disabled", "root-class", "button-class", "button-current-class"])
        ]),
        renderSlot(_ctx.$slots, "next", normalizeProps(guardReactiveProps(getPage(currentPage.value + 1, _ctx.ariaNextLabel))), () => [
          createVNode(_sfc_main$1, mergeProps(getPage(currentPage.value + 1, _ctx.ariaNextLabel), {
            disabled: isLast.value,
            "root-class": unref(buttonNextClasses),
            "button-class": unref(buttonClasses),
            "button-current-class": unref(buttonCurrentClasses)
          }), {
            default: withCtx(() => [
              createVNode(_sfc_main$2, {
                icon: _ctx.iconNext,
                pack: _ctx.iconPack,
                both: "",
                "aria-hidden": "true"
              }, null, 8, ["icon", "pack"])
            ]),
            _: 1
          }, 16, ["disabled", "root-class", "button-class", "button-current-class"])
        ]),
        _ctx.simple ? (openBlock(), createElementBlock("small", {
          key: 0,
          class: normalizeClass(unref(infoClasses))
        }, [
          _ctx.perPage == 1 ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createTextVNode(toDisplayString(firstItem.value) + " / " + toDisplayString(_ctx.total), 1)
          ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(firstItem.value) + "-" + toDisplayString(Math.min(currentPage.value * Number(_ctx.perPage), _ctx.total)) + " / " + toDisplayString(_ctx.total), 1)
          ], 64))
        ], 2)) : (openBlock(), createElementBlock("ul", {
          key: 1,
          class: normalizeClass(unref(listClasses))
        }, [
          hasFirst.value ? (openBlock(), createElementBlock("li", {
            key: 0,
            class: normalizeClass(unref(listItemClasses))
          }, [
            renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(getPage(1))), () => [
              createVNode(_sfc_main$1, mergeProps(getPage(1), {
                "button-class": unref(buttonClasses),
                "button-current-class": unref(buttonCurrentClasses)
              }), null, 16, ["button-class", "button-current-class"])
            ])
          ], 2)) : createCommentVNode("", true),
          hasFirstEllipsis.value ? (openBlock(), createElementBlock("li", {
            key: 1,
            class: normalizeClass(unref(listItemClasses))
          }, [
            createElementVNode("span", {
              class: normalizeClass(unref(ellipsisClasses))
            }, "…", 2)
          ], 2)) : createCommentVNode("", true),
          (openBlock(true), createElementBlock(Fragment, null, renderList(pagesInRange.value, (page) => {
            return openBlock(), createElementBlock("li", {
              key: page.number,
              class: normalizeClass(unref(listItemClasses))
            }, [
              renderSlot(_ctx.$slots, "default", mergeProps({ ref_for: true }, page), () => [
                createVNode(_sfc_main$1, mergeProps({ ref_for: true }, page, {
                  "button-class": unref(buttonClasses),
                  "button-current-class": unref(buttonCurrentClasses)
                }), null, 16, ["button-class", "button-current-class"])
              ])
            ], 2);
          }), 128)),
          hasLastEllipsis.value ? (openBlock(), createElementBlock("li", {
            key: 2,
            class: normalizeClass(unref(listItemClasses))
          }, [
            createElementVNode("span", {
              class: normalizeClass(unref(ellipsisClasses))
            }, "…", 2)
          ], 2)) : createCommentVNode("", true),
          hasLast.value ? (openBlock(), createElementBlock("li", {
            key: 3,
            class: normalizeClass(unref(listItemClasses))
          }, [
            renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(getPage(pageCount.value))), () => [
              createVNode(_sfc_main$1, mergeProps(getPage(pageCount.value), {
                "button-class": unref(buttonClasses),
                "button-current-class": unref(buttonCurrentClasses)
              }), null, 16, ["button-class", "button-current-class"])
            ])
          ], 2)) : createCommentVNode("", true)
        ], 2))
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Pagination.vue_vue_type_script_setup_true_lang-CeVGj6IM.mjs.map
