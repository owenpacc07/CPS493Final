{"version":3,"file":"Pagination.vue_vue_type_script_setup_true_lang-DNBMYjVe.cjs","sources":["../../src/components/pagination/PaginationButton.vue","../../src/components/pagination/Pagination.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, type PropType } from \"vue\";\n\nimport type { ClassBind, DynamicComponent } from \"@/types\";\n\ndefineOptions({\n    isOruga: true,\n    name: \"OPaginationButton\",\n    configField: \"pagination\",\n});\n\nconst props = defineProps({\n    number: { type: Number, default: undefined },\n    isCurrent: { type: Boolean, default: false },\n    ariaLabel: { type: String, default: undefined },\n    disabled: { type: Boolean, default: false },\n    tag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: \"button\" as DynamicComponent,\n    },\n    rootClass: { type: Array as PropType<ClassBind[]>, default: () => [] },\n    buttonClass: {\n        type: Array as PropType<ClassBind[]>,\n        required: true,\n    },\n    buttonCurrentClass: {\n        type: Array as PropType<ClassBind[]>,\n        required: true,\n    },\n});\n\ndefineEmits<{\n    click: [event: Event];\n}>();\n\n// --- Computed Component Classes ---\n\nconst classes = computed(() => [\n    ...props.rootClass,\n    ...props.buttonClass,\n    ...(props.isCurrent ? props.buttonCurrentClass : []),\n]);\n</script>\n\n<template>\n    <component\n        :is=\"tag\"\n        role=\"button\"\n        :tabindex=\"disabled ? undefined : 0\"\n        :disabled=\"disabled\"\n        :class=\"classes\"\n        :aria-label=\"ariaLabel\"\n        :aria-current=\"isCurrent\"\n        @click.prevent=\"$emit('click', $event)\"\n        @keydown.enter.prevent=\"$emit('click', $event)\">\n        <slot>{{ number }}</slot>\n    </component>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, watch, nextTick } from \"vue\";\n\nimport OPaginationButton from \"./PaginationButton.vue\";\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getDefault } from \"@/utils/config\";\nimport { defineClasses, useMatchMedia } from \"@/composables\";\n\nimport type { PaginationProps } from \"./props\";\nimport type { DynamicComponent } from \"@/types\";\n\n/**\n * A responsive and flexible pagination.\n * @displayName Pagination\n * @style _pagination.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OPagination\",\n    configField: \"pagination\",\n    inheritAttrs: false,\n});\n\nconst props = withDefaults(defineProps<PaginationProps>(), {\n    override: undefined,\n    total: undefined,\n    perPage: () => getDefault(\"pagination.perPage\", 20),\n    current: 1,\n    rangeBefore: 1,\n    rangeAfter: 1,\n    size: () => getDefault(\"pagination.size\"),\n    simple: () => getDefault(\"pagination.simple\", false),\n    rounded: () => getDefault(\"pagination.rounded\", false),\n    order: () => getDefault(\"pagination.order\", \"right\"),\n    buttonTag: () => getDefault(\"pagination.buttonTag\", \"button\"),\n    iconPack: () => getDefault(\"pagination.iconPack\"),\n    iconPrev: () => getDefault(\"pagination.iconPrev\", \"chevron-left\"),\n    iconNext: () => getDefault(\"pagination.iconNext\", \"chevron-right\"),\n    mobileBreakpoint: () => getDefault(\"pagination.mobileBreakpoint\"),\n    ariaNextLabel: () => getDefault(\"pagination.ariaNextLabel\", \"Next page\"),\n    ariaPreviousLabel: () =>\n        getDefault(\"pagination.ariaPreviousLabel\", \"Previous page\"),\n    ariaPageLabel: () => getDefault(\"pagination.ariaPageLabel\", \"Page\"),\n    ariaCurrentLabel: () =>\n        getDefault(\"pagination.ariaCurrentLabel\", \"Current page\"),\n});\n\nconst emits = defineEmits<{\n    /**\n     * current prop two-way binding\n     * @param value {number} updated current prop\n     */\n    \"update:current\": [value: number];\n    /**\n     * on current change event\n     * @param value {number} current value\n     */\n    change: [event: number];\n}>();\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst currentPage = defineModel<number>(\"current\", { default: 1 });\n\n/** Total page size (count). */\nconst pageCount = computed(() =>\n    Math.ceil((props.total || 0) / Number(props.perPage)),\n);\n\n/** If current page is trying to be greater than page count, set to last. */\nwatch(\n    () => pageCount.value,\n    (value) => {\n        if (props.current > value) last(new Event(\"change\"));\n    },\n);\n\n/** First item of the page (count). */\nconst firstItem = computed(() => {\n    const perPage = Number(props.perPage);\n    const firstItem = props.current * perPage - perPage + 1;\n    return firstItem >= 0 ? firstItem : 0;\n});\n\n/** Check if this is the first page. */\nconst isFirst = computed(() => props.current <= 1);\n\n/** Check if first page button should be visible. */\nconst hasFirst = computed(() => props.current >= props.rangeBefore + 2);\n\n/** Check if first ellipsis should be visible. */\nconst hasFirstEllipsis = computed(() => props.current >= props.rangeBefore + 4);\n\n/** Check if this is the last page. */\nconst isLast = computed(() => props.current >= pageCount.value);\n\n/** Check if last page button should be visible. */\nconst hasLast = computed(\n    () => props.current <= pageCount.value - (1 + props.rangeAfter),\n);\n\n/** Check if last ellipsis should be visible. */\nconst hasLastEllipsis = computed(\n    () => props.current < pageCount.value - (2 + props.rangeAfter),\n);\n\n/**\n * Get near pages, 1 before and 1 after the current.\n * Also add the click event to the array.\n */\nconst pagesInRange = computed<ReturnType<typeof getPage>[]>(() => {\n    if (props.simple) return [];\n\n    let left = Math.max(1, props.current - props.rangeBefore);\n    if (left - 1 === 2) {\n        left--; // Do not show the ellipsis if there is only one to hide\n    }\n    let right = Math.min(props.current + props.rangeAfter, pageCount.value);\n    if (pageCount.value - right === 2) {\n        right++; // Do not show the ellipsis if there is only one to hide\n    }\n\n    const pages: ReturnType<typeof getPage>[] = [];\n    for (let i = left; i <= right; i++) {\n        pages.push(getPage(i));\n    }\n    return pages;\n});\n\n/** Get properties for a page */\nfunction getPage(\n    num: number,\n    ariaLabel?: string,\n): {\n    number: number;\n    isCurrent: boolean;\n    onClick: (event: Event) => void;\n    ariaLabel: string;\n    tag: DynamicComponent;\n} {\n    return {\n        number: num,\n        isCurrent: props.current === num,\n        onClick: (event: Event): void => changePage(num, event),\n        ariaLabel: ariaLabel || getAriaPageLabel(num, props.current === num),\n        tag: props.buttonTag,\n    };\n}\n\n/** Get text for aria-label according to page number. */\nfunction getAriaPageLabel(pageNumber: number, isCurrent: boolean): string {\n    if (props.ariaPageLabel && (!isCurrent || !props.ariaCurrentLabel))\n        return props.ariaPageLabel + \" \" + pageNumber + \".\";\n    else if (props.ariaPageLabel && isCurrent && props.ariaCurrentLabel)\n        return (\n            props.ariaCurrentLabel +\n            \", \" +\n            props.ariaPageLabel +\n            \" \" +\n            pageNumber +\n            \".\"\n        );\n    return \"\";\n}\n\n/** Previous button click listener. */\nfunction prev(event: Event): void {\n    changePage(props.current - 1, event);\n}\n\n/** Next button click listener. */\nfunction next(event: Event): void {\n    changePage(props.current + 1, event);\n}\n\n/** First button click listener. */\nfunction first(event: Event): void {\n    changePage(1, event);\n}\n\n/** Last button click listener. */\nfunction last(event: Event): void {\n    changePage(pageCount.value, event);\n}\n\nfunction changePage(page: number, event: Event): void {\n    if (props.current === page || page < 1 || page > pageCount.value) return;\n    emits(\"change\", page);\n    currentPage.value = page;\n\n    // Set focus on element to keep tab order\n    if (event && event.target)\n        nextTick(() => (event.target as HTMLElement).focus());\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-pagination\"],\n    [\n        \"orderClass\",\n        \"o-pagination--\",\n        computed(() => props.order),\n        computed(() => !!props.order),\n    ],\n    [\n        \"sizeClass\",\n        \"o-pagination--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n    [\"simpleClass\", \"o-pagination--simple\", null, computed(() => props.simple)],\n    [\"mobileClass\", \"o-pagination--mobile\", null, isMobile],\n);\n\nconst infoClasses = defineClasses([\"infoClass\", \"o-pagination__info\"]);\n\nconst ellipsisClasses = defineClasses([\n    \"ellipsisClass\",\n    \"o-pagination__ellipsis\",\n]);\n\nconst listClasses = defineClasses([\"listClass\", \"o-pagination__list\"]);\n\nconst listItemClasses = defineClasses([\"listItemClass\", \"o-pagination__item\"]);\n\nconst buttonClasses = defineClasses(\n    [\"buttonClass\", \"o-pagination__button\"],\n    [\n        \"roundedClass\",\n        \"o-pagination__button--rounded\",\n        null,\n        computed(() => props.rounded),\n    ],\n);\n\nconst buttonCurrentClasses = defineClasses([\n    \"buttonCurrentClass\",\n    \"o-pagination__button--current\",\n]);\n\nconst buttonPrevClasses = defineClasses(\n    [\"buttonPrevClass\", \"o-pagination__button-previous\"],\n    [\"buttonDisabledClass\", \"o-pagination__button--disabled\", null, isFirst],\n);\n\nconst buttonNextClasses = defineClasses(\n    [\"buttonNextClass\", \"o-pagination__button-next\"],\n    [\"buttonDisabledClass\", \"o-pagination__button--disabled\", null, isLast],\n);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ last, first, prev, next });\n</script>\n\n<template>\n    <nav data-oruga=\"pagination\" :class=\"rootClasses\">\n        <!-- \n            @slot Previous button slot\n            @binding {number} number - page number \n            @binding {boolean} isCurrent - if page is current\n            @binding {(event:Event): void} onClick - click handler\n            @binding {string} ariaLabel - aria-label attribute\n        -->\n        <slot\n            name=\"previous\"\n            v-bind=\"getPage(currentPage - 1, ariaPreviousLabel)\">\n            <o-pagination-button\n                v-bind=\"getPage(currentPage - 1, ariaPreviousLabel)\"\n                :disabled=\"isFirst\"\n                :root-class=\"buttonPrevClasses\"\n                :button-class=\"buttonClasses\"\n                :button-current-class=\"buttonCurrentClasses\">\n                <o-icon\n                    :icon=\"iconPrev\"\n                    :pack=\"iconPack\"\n                    both\n                    aria-hidden=\"true\" />\n            </o-pagination-button>\n        </slot>\n\n        <!-- \n            @slot Next button slot\n            @binding {number} number - page number \n            @binding {boolean} isCurrent - if page is current\n            @binding {(event:Event): void} onClick - click handler\n            @binding {string} ariaLabel - aria-label attribute\n        -->\n        <slot name=\"next\" v-bind=\"getPage(currentPage + 1, ariaNextLabel)\">\n            <o-pagination-button\n                v-bind=\"getPage(currentPage + 1, ariaNextLabel)\"\n                :disabled=\"isLast\"\n                :root-class=\"buttonNextClasses\"\n                :button-class=\"buttonClasses\"\n                :button-current-class=\"buttonCurrentClasses\">\n                <o-icon\n                    :icon=\"iconNext\"\n                    :pack=\"iconPack\"\n                    both\n                    aria-hidden=\"true\" />\n            </o-pagination-button>\n        </slot>\n\n        <small v-if=\"simple\" :class=\"infoClasses\">\n            <template v-if=\"perPage == 1\">\n                {{ firstItem }} / {{ total }}\n            </template>\n            <template v-else>\n                {{ firstItem }}-{{\n                    Math.min(currentPage * Number(perPage), total)\n                }}\n                /\n                {{ total }}\n            </template>\n        </small>\n\n        <ul v-else :class=\"listClasses\">\n            <!--First-->\n            <li v-if=\"hasFirst\" :class=\"listItemClasses\">\n                <slot v-bind=\"getPage(1)\">\n                    <o-pagination-button\n                        v-bind=\"getPage(1)\"\n                        :button-class=\"buttonClasses\"\n                        :button-current-class=\"buttonCurrentClasses\" />\n                </slot>\n            </li>\n\n            <li v-if=\"hasFirstEllipsis\" :class=\"listItemClasses\">\n                <span :class=\"ellipsisClasses\">&hellip;</span>\n            </li>\n\n            <!--Pages-->\n            <li\n                v-for=\"page in pagesInRange\"\n                :key=\"page.number\"\n                :class=\"listItemClasses\">\n                <slot v-bind=\"page\">\n                    <o-pagination-button\n                        v-bind=\"page\"\n                        :button-class=\"buttonClasses\"\n                        :button-current-class=\"buttonCurrentClasses\" />\n                </slot>\n            </li>\n\n            <!--Last-->\n            <li v-if=\"hasLastEllipsis\" :class=\"listItemClasses\">\n                <span :class=\"ellipsisClasses\">&hellip;</span>\n            </li>\n\n            <li v-if=\"hasLast\" :class=\"listItemClasses\">\n                <!-- \n                    @slot Pagination button slot\n                    @binding {number} number - page number \n                    @binding {boolean} isCurrent - if page is current\n                    @binding {(event:Event): void} onClick - click handler\n                    @binding {string} ariaLabel - aria-label attribute\n                -->\n                <slot v-bind=\"getPage(pageCount)\">\n                    <o-pagination-button\n                        v-bind=\"getPage(pageCount)\"\n                        :button-class=\"buttonClasses\"\n                        :button-current-class=\"buttonCurrentClasses\" />\n                </slot>\n            </li>\n        </ul>\n    </nav>\n</template>\n"],"names":["computed","useMatchMedia","_useModel","watch","firstItem","nextTick","defineClasses"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,UAAM,QAAQ;AA0BR,UAAA,UAAUA,IAAAA,SAAS,MAAM;AAAA,MAC3B,GAAG,MAAM;AAAA,MACT,GAAG,MAAM;AAAA,MACT,GAAI,MAAM,YAAY,MAAM,qBAAqB,CAAA;AAAA,IAAC,CACrD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBD,UAAM,QAAQ;AAwBd,UAAM,QAAQ;AAad,UAAM,EAAE,SAAa,IAAAC,4BAAc,MAAM,gBAAgB;AAEnD,UAAA,cAAcC,IAAAA,SAAmB,SAAC,SAAyB;AAGjE,UAAM,YAAYF,IAAA;AAAA,MAAS,MACvB,KAAK,MAAM,MAAM,SAAS,KAAK,OAAO,MAAM,OAAO,CAAC;AAAA,IACxD;AAGAG,QAAA;AAAA,MACI,MAAM,UAAU;AAAA,MAChB,CAAC,UAAU;AACP,YAAI,MAAM,UAAU,YAAY,IAAI,MAAM,QAAQ,CAAC;AAAA,MAAA;AAAA,IAE3D;AAGM,UAAA,YAAYH,IAAAA,SAAS,MAAM;AACvB,YAAA,UAAU,OAAO,MAAM,OAAO;AACpC,YAAMI,aAAY,MAAM,UAAU,UAAU,UAAU;AAC/CA,aAAAA,cAAa,IAAIA,aAAY;AAAA,IAAA,CACvC;AAGD,UAAM,UAAUJ,IAAA,SAAS,MAAM,MAAM,WAAW,CAAC;AAGjD,UAAM,WAAWA,IAAAA,SAAS,MAAM,MAAM,WAAW,MAAM,cAAc,CAAC;AAGtE,UAAM,mBAAmBA,IAAAA,SAAS,MAAM,MAAM,WAAW,MAAM,cAAc,CAAC;AAG9E,UAAM,SAASA,IAAAA,SAAS,MAAM,MAAM,WAAW,UAAU,KAAK;AAG9D,UAAM,UAAUA,IAAA;AAAA,MACZ,MAAM,MAAM,WAAW,UAAU,SAAS,IAAI,MAAM;AAAA,IACxD;AAGA,UAAM,kBAAkBA,IAAA;AAAA,MACpB,MAAM,MAAM,UAAU,UAAU,SAAS,IAAI,MAAM;AAAA,IACvD;AAMM,UAAA,eAAeA,IAAAA,SAAuC,MAAM;AAC1D,UAAA,MAAM,OAAQ,QAAO,CAAC;AAE1B,UAAI,OAAO,KAAK,IAAI,GAAG,MAAM,UAAU,MAAM,WAAW;AACpD,UAAA,OAAO,MAAM,GAAG;AAChB;AAAA,MAAA;AAEA,UAAA,QAAQ,KAAK,IAAI,MAAM,UAAU,MAAM,YAAY,UAAU,KAAK;AAClE,UAAA,UAAU,QAAQ,UAAU,GAAG;AAC/B;AAAA,MAAA;AAGJ,YAAM,QAAsC,CAAC;AAC7C,eAAS,IAAI,MAAM,KAAK,OAAO,KAAK;AAC1B,cAAA,KAAK,QAAQ,CAAC,CAAC;AAAA,MAAA;AAElB,aAAA;AAAA,IAAA,CACV;AAGQ,aAAA,QACL,KACA,WAOF;AACS,aAAA;AAAA,QACH,QAAQ;AAAA,QACR,WAAW,MAAM,YAAY;AAAA,QAC7B,SAAS,CAAC,UAAuB,WAAW,KAAK,KAAK;AAAA,QACtD,WAAW,aAAa,iBAAiB,KAAK,MAAM,YAAY,GAAG;AAAA,QACnE,KAAK,MAAM;AAAA,MACf;AAAA,IAAA;AAIK,aAAA,iBAAiB,YAAoB,WAA4B;AACtE,UAAI,MAAM,kBAAkB,CAAC,aAAa,CAAC,MAAM;AACtC,eAAA,MAAM,gBAAgB,MAAM,aAAa;AAAA,eAC3C,MAAM,iBAAiB,aAAa,MAAM;AAC/C,eACI,MAAM,mBACN,OACA,MAAM,gBACN,MACA,aACA;AAED,aAAA;AAAA,IAAA;AAIX,aAAS,KAAK,OAAoB;AACnB,iBAAA,MAAM,UAAU,GAAG,KAAK;AAAA,IAAA;AAIvC,aAAS,KAAK,OAAoB;AACnB,iBAAA,MAAM,UAAU,GAAG,KAAK;AAAA,IAAA;AAIvC,aAAS,MAAM,OAAoB;AAC/B,iBAAW,GAAG,KAAK;AAAA,IAAA;AAIvB,aAAS,KAAK,OAAoB;AACnB,iBAAA,UAAU,OAAO,KAAK;AAAA,IAAA;AAG5B,aAAA,WAAW,MAAc,OAAoB;AAClD,UAAI,MAAM,YAAY,QAAQ,OAAO,KAAK,OAAO,UAAU,MAAO;AAClE,YAAM,UAAU,IAAI;AACpB,kBAAY,QAAQ;AAGpB,UAAI,SAAS,MAAM;AACfK,YAAAA,SAAS,MAAO,MAAM,OAAuB,MAAA,CAAO;AAAA,IAAA;AAK5D,UAAM,cAAcC,cAAA;AAAA,MAChB,CAAC,aAAa,cAAc;AAAA,MAC5B;AAAA,QACI;AAAA,QACA;AAAA,QACAN,aAAS,MAAM,MAAM,KAAK;AAAA,QAC1BA,aAAS,MAAM,CAAC,CAAC,MAAM,KAAK;AAAA,MAChC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACAA,aAAS,MAAM,MAAM,IAAI;AAAA,QACzBA,aAAS,MAAM,CAAC,CAAC,MAAM,IAAI;AAAA,MAC/B;AAAA,MACA,CAAC,eAAe,wBAAwB,MAAMA,aAAS,MAAM,MAAM,MAAM,CAAC;AAAA,MAC1E,CAAC,eAAe,wBAAwB,MAAM,QAAQ;AAAA,IAC1D;AAEA,UAAM,cAAcM,cAAA,cAAc,CAAC,aAAa,oBAAoB,CAAC;AAErE,UAAM,kBAAkBA,cAAAA,cAAc;AAAA,MAClC;AAAA,MACA;AAAA,IAAA,CACH;AAED,UAAM,cAAcA,cAAA,cAAc,CAAC,aAAa,oBAAoB,CAAC;AAErE,UAAM,kBAAkBA,cAAA,cAAc,CAAC,iBAAiB,oBAAoB,CAAC;AAE7E,UAAM,gBAAgBA,cAAA;AAAA,MAClB,CAAC,eAAe,sBAAsB;AAAA,MACtC;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACAN,IAAA,SAAS,MAAM,MAAM,OAAO;AAAA,MAAA;AAAA,IAEpC;AAEA,UAAM,uBAAuBM,cAAAA,cAAc;AAAA,MACvC;AAAA,MACA;AAAA,IAAA,CACH;AAED,UAAM,oBAAoBA,cAAA;AAAA,MACtB,CAAC,mBAAmB,+BAA+B;AAAA,MACnD,CAAC,uBAAuB,kCAAkC,MAAM,OAAO;AAAA,IAC3E;AAEA,UAAM,oBAAoBA,cAAA;AAAA,MACtB,CAAC,mBAAmB,2BAA2B;AAAA,MAC/C,CAAC,uBAAuB,kCAAkC,MAAM,MAAM;AAAA,IAC1E;AAKA,aAAa,EAAE,MAAM,OAAO,MAAM,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}