"use strict";
/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
const vue = require("vue");
const Icon_vue_vue_type_script_setup_true_lang = require("./Icon.vue_vue_type_script_setup_true_lang-iqIFDXno.cjs");
const config = require("./config-DQse3iF9.cjs");
const helpers = require("./helpers.cjs");
const defineClasses = require("./defineClasses-HOBoThd5.cjs");
const useInputHandler = require("./useInputHandler-DOYzVgrk.cjs");
const useOptions = require("./useOptions-011ZwErH.cjs");
const useSequentialId = require("./useSequentialId-BSuTima6.cjs");
const fieldInjection = require("./fieldInjection-CvE2Bm-L.cjs");
const _hoisted_1 = ["id", "autocomplete", "multiple", "size", "disabled", "required"];
const _hoisted_2 = {
  key: 0,
  value: "",
  disabled: "",
  hidden: ""
};
const _hoisted_3 = ["label", "value"];
const _hoisted_4 = ["value", "selected"];
const _hoisted_5 = ["value", "selected"];
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    isOruga: true,
    name: "OSelect",
    configField: "select",
    inheritAttrs: false
  },
  __name: "Select",
  props: /* @__PURE__ */ vue.mergeModels({
    override: { type: Boolean, default: void 0 },
    modelValue: { default: void 0 },
    multiple: {},
    options: { default: void 0 },
    size: { default: () => config.getDefault("select.size") },
    variant: { default: () => config.getDefault("select.variant") },
    placeholder: { default: void 0 },
    disabled: { type: Boolean, default: false },
    required: { type: Boolean, default: false },
    expanded: { type: Boolean, default: false },
    rounded: { type: Boolean, default: false },
    nativeSize: { default: void 0 },
    iconPack: { default: () => config.getDefault("select.iconPack") },
    icon: { default: () => config.getDefault("select.icon") },
    iconClickable: { type: Boolean, default: false },
    iconRight: { default: () => config.getDefault("select.iconRight") },
    iconRightClickable: { type: Boolean, default: false },
    iconRightVariant: { default: void 0 },
    id: { default: () => vue.useId() },
    autocomplete: { default: () => config.getDefault("select.autocomplete", "off") },
    statusIcon: { type: Boolean, default: () => config.getDefault("statusIcon", true) },
    useHtml5Validation: { type: Boolean, default: () => config.getDefault("useHtml5Validation", true) },
    customValidity: {},
    rootClass: {},
    sizeClass: {},
    variantClass: {},
    expandedClass: {},
    disabledClass: {},
    roundedClass: {},
    hasIconRightClass: {},
    multipleClass: {},
    selectClass: {},
    placeholderClass: {},
    arrowedClass: {},
    iconLeftSpaceClass: {},
    iconRightSpaceClass: {},
    iconLeftClass: {},
    iconRightClass: {}
  }, {
    "modelValue": {
      default: void 0
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ vue.mergeModels(["update:model-value", "focus", "blur", "invalid", "icon-click", "icon-right-click"], ["update:modelValue"]),
  setup(__props, { expose: __expose, emit: __emit }) {
    var _a;
    const props = __props;
    const emits = __emit;
    const selectRef = vue.useTemplateRef("selectElement");
    const { checkHtml5Validity, onBlur, onFocus, onInvalid, setFocus, isValid } = useInputHandler.useInputHandler(selectRef, emits, props);
    const { parentField, statusVariant, statusVariantIcon } = fieldInjection.injectField();
    if (props.id) (_a = parentField == null ? void 0 : parentField.value) == null ? void 0 : _a.setInputId(props.id);
    const vmodel = vue.useModel(__props, "modelValue", {
      get: (value) => typeof value !== "undefined" ? value : props.multiple ? [] : "",
      set: (value) => typeof value !== "undefined" ? value : props.multiple ? [] : void 0
    });
    vue.watch(
      vmodel,
      (value) => {
        if (parentField == null ? void 0 : parentField.value) parentField.value.setFilled(!!value);
        if (!isValid.value) checkHtml5Validity();
      },
      { immediate: true, flush: "post" }
    );
    const { nextSequence } = useSequentialId.useSequentialId();
    const normalizedOptions = vue.computed(
      () => useOptions.normalizeOptions(props.options, nextSequence)
    );
    const placeholderVisible = vue.computed(
      () => !helpers.isTrueish(props.multiple) && (!helpers.isDefined(vmodel.value) || vmodel.value === "")
    );
    const hasIconRight = vue.computed(
      () => !!props.iconRight && !helpers.isTrueish(props.multiple) || props.statusIcon && !!statusVariantIcon.value
    );
    const rightIcon = vue.computed(
      () => props.iconRight ? props.iconRight : statusVariantIcon.value
    );
    const rightIconVariant = vue.computed(
      () => props.iconRight ? props.iconRightVariant || props.variant : statusVariant.value
    );
    function iconClick(emit, event) {
      emits(emit, event);
      vue.nextTick(() => setFocus());
    }
    function leftIconClick(event) {
      if (props.iconClickable) iconClick("icon-click", event);
    }
    function rightIconClick(event) {
      if (props.iconRightClickable) iconClick("icon-right-click", event);
    }
    const attrs = vue.useAttrs();
    const inputBind = vue.computed(() => {
      var _a2;
      return {
        ...(_a2 = parentField == null ? void 0 : parentField.value) == null ? void 0 : _a2.inputAttrs,
        ...attrs
      };
    });
    const rootClasses = defineClasses.defineClasses(
      ["rootClass", "o-select"],
      [
        "sizeClass",
        "o-select--",
        vue.computed(() => props.size),
        vue.computed(() => !!props.size)
      ],
      [
        "variantClass",
        "o-select--",
        vue.computed(() => statusVariant.value || props.variant),
        vue.computed(() => !!statusVariant.value || !!props.variant)
      ],
      [
        "expandedClass",
        "o-select--expanded",
        null,
        vue.computed(() => props.expanded)
      ],
      [
        "disabledClass",
        "o-select--disabled",
        null,
        vue.computed(() => helpers.isTrueish(props.disabled))
      ],
      [
        "roundedClass",
        "o-select--rounded",
        null,
        vue.computed(() => helpers.isTrueish(props.rounded))
      ],
      ["hasIconRightClass", "o-select--icon-right", null, hasIconRight],
      [
        "multipleClass",
        "o-select--multiple",
        null,
        vue.computed(() => helpers.isTrueish(props.multiple))
      ]
    );
    const selectClasses = defineClasses.defineClasses(
      ["selectClass", "o-select__input"],
      [
        "iconLeftSpaceClass",
        "o-select__input--iconspace-left",
        null,
        vue.computed(() => !!props.icon)
      ],
      [
        "iconRightSpaceClass",
        "o-select__input--iconspace-right",
        null,
        hasIconRight
      ],
      [
        "placeholderClass",
        "o-select__input--placeholder",
        null,
        placeholderVisible
      ],
      [
        "arrowedClass",
        "o-select__input--arrowed",
        null,
        vue.computed(() => !hasIconRight.value && !helpers.isTrueish(props.multiple))
      ]
    );
    const iconLeftClasses = defineClasses.defineClasses(["iconLeftClass", "o-select__icon-left"]);
    const iconRightClasses = defineClasses.defineClasses([
      "iconRightClass",
      "o-select__icon-right"
    ]);
    __expose({ focus: setFocus, value: vmodel });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("div", {
        "data-oruga": "select",
        class: vue.normalizeClass(vue.unref(rootClasses))
      }, [
        _ctx.icon ? (vue.openBlock(), vue.createBlock(Icon_vue_vue_type_script_setup_true_lang._sfc_main, {
          key: 0,
          class: vue.normalizeClass(vue.unref(iconLeftClasses)),
          clickable: _ctx.iconClickable,
          icon: _ctx.icon,
          pack: _ctx.iconPack,
          size: _ctx.size,
          onClick: _cache[0] || (_cache[0] = ($event) => leftIconClick($event))
        }, null, 8, ["class", "clickable", "icon", "pack", "size"])) : vue.createCommentVNode("", true),
        vue.withDirectives(vue.createElementVNode("select", vue.mergeProps(inputBind.value, {
          id: _ctx.id,
          ref: "selectElement",
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => vmodel.value = $event),
          "data-oruga-input": "select",
          class: vue.unref(selectClasses),
          autocomplete: _ctx.autocomplete,
          multiple: props.multiple,
          size: _ctx.nativeSize,
          disabled: _ctx.disabled,
          required: _ctx.required,
          onBlur: _cache[2] || (_cache[2] = //@ts-ignore
          (...args) => vue.unref(onBlur) && vue.unref(onBlur)(...args)),
          onFocus: _cache[3] || (_cache[3] = //@ts-ignore
          (...args) => vue.unref(onFocus) && vue.unref(onFocus)(...args)),
          onInvalid: _cache[4] || (_cache[4] = //@ts-ignore
          (...args) => vue.unref(onInvalid) && vue.unref(onInvalid)(...args))
        }), [
          _ctx.placeholder || _ctx.$slots.placeholder ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
            placeholderVisible.value ? (vue.openBlock(), vue.createElementBlock("option", _hoisted_2, [
              vue.renderSlot(_ctx.$slots, "placeholder", {}, () => [
                vue.createTextVNode(vue.toDisplayString(_ctx.placeholder), 1)
              ])
            ])) : vue.createCommentVNode("", true)
          ], 64)) : vue.createCommentVNode("", true),
          vue.renderSlot(_ctx.$slots, "default", {}, () => [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(normalizedOptions.value, (option) => {
              return vue.openBlock(), vue.createElementBlock(vue.Fragment, {
                key: option.key
              }, [
                vue.unref(useOptions.isGroupOption)(option) ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("optgroup", vue.mergeProps({
                  key: 0,
                  ref_for: true
                }, option.attrs, {
                  label: option.label,
                  value: option.value
                }), [
                  (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(option.options, (_option) => {
                    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("option", vue.mergeProps({ ref_for: true }, _option.attrs, {
                      key: _option.key,
                      value: _option.value,
                      selected: option.value === vmodel.value
                    }), vue.toDisplayString(_option.label), 17, _hoisted_4)), [
                      [vue.vShow, !_option.hidden]
                    ]);
                  }), 128))
                ], 16, _hoisted_3)), [
                  [vue.vShow, !option.hidden]
                ]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock("option", vue.mergeProps({
                  key: 1,
                  ref_for: true
                }, option.attrs, {
                  value: option.value,
                  selected: option.value === vmodel.value
                }), vue.toDisplayString(option.label), 17, _hoisted_5)), [
                  [vue.vShow, !option.hidden]
                ])
              ], 64);
            }), 128))
          ])
        ], 16, _hoisted_1), [
          [vue.vModelSelect, vmodel.value]
        ]),
        hasIconRight.value ? (vue.openBlock(), vue.createBlock(Icon_vue_vue_type_script_setup_true_lang._sfc_main, {
          key: 1,
          class: vue.normalizeClass(vue.unref(iconRightClasses)),
          clickable: _ctx.iconRightClickable,
          icon: rightIcon.value,
          pack: _ctx.iconPack,
          size: _ctx.size,
          variant: rightIconVariant.value,
          both: "",
          onClick: rightIconClick
        }, null, 8, ["class", "clickable", "icon", "pack", "size", "variant"])) : vue.createCommentVNode("", true)
      ], 2);
    };
  }
});
exports._sfc_main = _sfc_main;
//# sourceMappingURL=Select.vue_vue_type_script_setup_true_lang-CgbH85R0.cjs.map
