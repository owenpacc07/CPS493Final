"use strict";
/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
const vue = require("vue");
const helpers = require("./helpers.cjs");
const unrefElement = require("./unrefElement-BtPFHjfc.cjs");
function useEventListener(element, event, handler, options) {
  let cleanup;
  const register = () => {
    if (!element) return;
    const target = unrefElement.unrefElement(element);
    const optionsClone = helpers.isObject(options) ? { ...options } : options;
    setTimeout(() => {
      target.addEventListener(event, handler, optionsClone);
      cleanup = () => {
        target.removeEventListener(event, handler, optionsClone);
      };
    });
  };
  let stopWatch;
  if (typeof (options == null ? void 0 : options.trigger) !== "undefined") {
    stopWatch = vue.watch(
      options.trigger,
      (value) => {
        if (value) register();
        else if (typeof cleanup === "function") cleanup();
      },
      { flush: "post" }
    );
  }
  if (options == null ? void 0 : options.immediate) register();
  else if (vue.getCurrentScope()) {
    vue.onMounted(() => {
      if (typeof (options == null ? void 0 : options.trigger) === "undefined" || options.trigger.value)
        register();
    });
  }
  const stop = () => {
    if (typeof stopWatch === "function") stopWatch();
    if (typeof cleanup === "function") cleanup();
  };
  if (vue.getCurrentScope()) vue.onScopeDispose(stop);
  return stop;
}
exports.useEventListener = useEventListener;
//# sourceMappingURL=useEventListener-Cew5Aed0.cjs.map
