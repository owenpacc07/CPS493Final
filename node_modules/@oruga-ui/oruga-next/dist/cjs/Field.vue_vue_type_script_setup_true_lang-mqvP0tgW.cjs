"use strict";
/*! Oruga v0.10.5 | MIT License | github.com/oruga-ui/oruga */
const vue = require("vue");
const config = require("./config-DQse3iF9.cjs");
const helpers = require("./helpers.cjs");
const defineClasses = require("./defineClasses-HOBoThd5.cjs");
const useMatchMedia = require("./useMatchMedia-CERtemgT.cjs");
const fieldInjection = require("./fieldInjection-CvE2Bm-L.cjs");
const _hoisted_1 = ["id", "for"];
const _hoisted_2 = ["id", "for"];
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    isOruga: true,
    name: "OField",
    configField: "field"
  },
  __name: "Field",
  props: {
    override: { type: Boolean, default: void 0 },
    variant: { default: void 0 },
    label: { default: void 0 },
    labelSize: { default: () => config.getDefault("field.labelsize") },
    labelFor: { default: void 0 },
    labelId: { default: () => vue.useId() },
    message: { default: void 0 },
    messageTag: { default: () => config.getDefault("field.messageTag", "p") },
    messageId: { default: () => vue.useId() },
    grouped: { type: Boolean, default: false },
    addons: { type: Boolean, default: false },
    multiline: { type: Boolean, default: false },
    horizontal: { type: Boolean, default: false },
    mobileBreakpoint: { default: () => config.getDefault("field.mobileBreakpoint") },
    rootClass: {},
    mobileClass: {},
    focusedClass: {},
    filledClass: {},
    bodyClass: {},
    groupedClass: {},
    addonsClass: {},
    multilineClass: {},
    horizontalClass: {},
    horizontalLabelClass: {},
    horizontalBodyClass: {},
    labelClass: {},
    labelSizeClass: {},
    labelVariantClass: {},
    messageClass: {},
    messageVariantClass: {}
  },
  setup(__props) {
    const props = __props;
    const { isMobile } = useMatchMedia.useMatchMedia(props.mobileBreakpoint);
    const inputId = vue.ref(props.labelFor);
    vue.watch(
      () => props.labelFor,
      (v) => inputId.value = v
    );
    const fieldVariant = vue.ref(props.variant);
    vue.watch(
      () => props.variant,
      (v) => fieldVariant.value = v
    );
    const fieldMessage = vue.ref(props.message);
    vue.watch(
      () => props.message,
      (v) => fieldMessage.value = v
    );
    vue.watch(fieldMessage, (value) => {
      if (parentField.value && parentField.value.hasInnerField) {
        if (!parentField.value.variant)
          parentField.value.setVariant(fieldVariant.value);
        if (!parentField.value.message) parentField.value.setMessage(value);
      }
    });
    const isFocused = vue.ref(false);
    const isFilled = vue.ref(false);
    const hasInnerField = vue.ref(false);
    const { parentField } = fieldInjection.injectField();
    if (parentField.value) parentField.value.addInnerField();
    const slots = vue.useSlots();
    const hasLabel = vue.computed(() => props.label || !!slots.label);
    const hasMessage = vue.computed(() => !!fieldMessage.value || !!slots.message);
    const hasBody = vue.computed(
      () => props.grouped || props.multiline || hasInnerField.value || hasAddons.value
    );
    const hasAddons = vue.computed(
      () => props.addons && !props.horizontal && !!slots.default
    );
    function getInnerContent(vnode) {
      const slot = vnode();
      return slot.length === 1 && Array.isArray(slot[0].children) ? slot[0].children : slot;
    }
    const rootRef = vue.useTemplateRef("rootElement");
    function addInnerField() {
      hasInnerField.value = true;
    }
    function setFocus(value) {
      isFocused.value = value;
    }
    function setFilled(value) {
      isFilled.value = value;
    }
    function setVariant(value) {
      fieldVariant.value = value;
    }
    function setMessage(value) {
      fieldMessage.value = value;
    }
    function setInputId(value) {
      inputId.value = value;
    }
    const inputAttrs = vue.computed(() => ({
      "aria-labelledby": props.labelId,
      ...fieldVariant.value === "error" ? { "aria-errormessage": props.messageId } : { "aria-describedby": props.messageId }
    }));
    const provideData = vue.computed(() => ({
      $el: rootRef.value,
      props,
      hasInnerField: hasInnerField.value,
      variant: fieldVariant.value,
      message: fieldMessage.value,
      labelId: props.labelId,
      inputAttrs: inputAttrs.value,
      addInnerField,
      setInputId,
      setFocus,
      setFilled,
      setVariant,
      setMessage
    }));
    fieldInjection.provideField(provideData);
    const rootClasses = defineClasses.defineClasses(
      ["rootClass", "o-field"],
      [
        "horizontalClass",
        "o-field--horizontal",
        null,
        vue.computed(() => !!props.horizontal)
      ],
      ["mobileClass", "o-field--mobile", null, isMobile],
      ["focusedClass", "o-field--focused", null, isFocused],
      ["filledClass", "o-field--filled", null, isFilled]
    );
    const labelClasses = defineClasses.defineClasses(
      ["labelClass", "o-field__label"],
      [
        "labelSizeClass",
        "o-field__label-",
        vue.computed(() => props.labelSize),
        vue.computed(() => !!props.labelSize)
      ],
      [
        "labelVariantClass",
        "o-field__label-",
        fieldVariant,
        vue.computed(() => !!fieldVariant.value)
      ]
    );
    const horizontalLabelClasses = defineClasses.defineClasses([
      "horizontalLabelClass",
      "o-field__horizontal-label"
    ]);
    const horizontalBodyClasses = defineClasses.defineClasses([
      "horizontalBodyClass",
      "o-field__horizontal-body"
    ]);
    const bodyClasses = defineClasses.defineClasses(["bodyClass", "o-field__body"]);
    const innerBodyClasses = defineClasses.defineClasses(
      ["rootClass", "o-field"],
      ["groupedClass", "o-field--grouped", null, vue.computed(() => props.grouped)],
      [
        "addonsClass",
        "o-field--addons",
        null,
        vue.computed(() => !props.grouped && hasAddons.value)
      ],
      [
        "multilineClass",
        "o-field--multiline",
        null,
        vue.computed(() => props.multiline)
      ]
    );
    const messageClasses = defineClasses.defineClasses(
      ["messageClass", "o-field__message"],
      [
        "messageVariantClass",
        "o-field__message-",
        fieldVariant,
        vue.computed(() => !!fieldVariant.value)
      ]
    );
    return (_ctx, _cache) => {
      const _component_OField = vue.resolveComponent("OField");
      return vue.openBlock(), vue.createElementBlock("div", {
        ref: "rootElement",
        "data-oruga": "field",
        class: vue.normalizeClass(vue.unref(rootClasses))
      }, [
        _ctx.horizontal ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(vue.unref(horizontalLabelClasses))
        }, [
          hasLabel.value ? (vue.openBlock(), vue.createElementBlock("label", {
            key: 0,
            id: _ctx.labelId,
            for: inputId.value,
            class: vue.normalizeClass(vue.unref(labelClasses))
          }, [
            vue.renderSlot(_ctx.$slots, "label", { label: _ctx.label }, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
            ])
          ], 10, _hoisted_1)) : vue.createCommentVNode("", true)
        ], 2)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
          hasLabel.value ? (vue.openBlock(), vue.createElementBlock("label", {
            key: 0,
            id: _ctx.labelId,
            for: inputId.value,
            class: vue.normalizeClass(vue.unref(labelClasses))
          }, [
            vue.renderSlot(_ctx.$slots, "label", { label: _ctx.label }, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
            ])
          ], 10, _hoisted_2)) : vue.createCommentVNode("", true)
        ], 64)),
        _ctx.horizontal ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 2,
          class: vue.normalizeClass(vue.unref(horizontalBodyClasses))
        }, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(getInnerContent(_ctx.$slots.default), (element, index) => {
            return vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
              vue.unref(helpers.isVNodeEmpty)(element) ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(element), { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_OField, {
                key: 1,
                variant: fieldVariant.value,
                addons: false,
                "label-id": _ctx.labelId,
                "message-id": _ctx.messageId,
                "message-tag": _ctx.messageTag,
                "message-class": _ctx.messageClass
              }, vue.createSlots({
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(element)))
                ]),
                _: 2
              }, [
                index === 0 ? {
                  name: "message",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "message", { message: fieldMessage.value }, () => [
                      vue.createTextVNode(vue.toDisplayString(fieldMessage.value), 1)
                    ])
                  ]),
                  key: "0"
                } : void 0
              ]), 1032, ["variant", "label-id", "message-id", "message-tag", "message-class"]))
            ], 64);
          }), 128))
        ], 2)) : hasBody.value ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 3,
          class: vue.normalizeClass(vue.unref(bodyClasses))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(innerBodyClasses))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)
        ], 2)) : vue.renderSlot(_ctx.$slots, "default", { key: 4 }),
        hasMessage.value && !_ctx.horizontal ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.messageTag), {
          key: 5,
          id: _ctx.messageId,
          class: vue.normalizeClass(vue.unref(messageClasses))
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "message", { message: fieldMessage.value }, () => [
              vue.createTextVNode(vue.toDisplayString(fieldMessage.value), 1)
            ])
          ]),
          _: 3
        }, 8, ["id", "class"])) : vue.createCommentVNode("", true)
      ], 2);
    };
  }
});
exports._sfc_main = _sfc_main;
//# sourceMappingURL=Field.vue_vue_type_script_setup_true_lang-mqvP0tgW.cjs.map
