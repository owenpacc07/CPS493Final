{"version":3,"file":"Loading.vue_vue_type_script_setup_true_lang-BcJqAqw8.cjs","sources":["../../src/components/loading/Loading.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { useTemplateRef, watch } from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getDefault } from \"@/utils/config\";\nimport { isClient } from \"@/utils/ssr\";\nimport {\n    defineClasses,\n    useEventListener,\n    usePreventScrolling,\n} from \"@/composables\";\n\nimport type { LoadingProps } from \"./props\";\n\n/**\n * A simple loading overlay.\n * @displayName Loading\n * @style _loading.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OLoading\",\n    configField: \"loading\",\n    inheritAttrs: false,\n});\n\nconst props = withDefaults(defineProps<LoadingProps>(), {\n    override: undefined,\n    active: false,\n    fullPage: true,\n    label: undefined,\n    animation: () => getDefault(\"loading.animation\", \"fade\"),\n    cancelable: false,\n    icon: () => getDefault(\"loading.icon\", \"loading\"),\n    iconSpin: () => getDefault(\"loading.iconSpin\", true),\n    iconSize: () => getDefault(\"loading.iconSize\", \"medium\"),\n    clipScroll: () => getDefault(\"loading.clipScroll\", false),\n});\n\nconst emits = defineEmits<{\n    /**\n     * active prop two-way binding\n     * @param value {boolean} - updated active prop\n     */\n    \"update:active\": [value: boolean];\n    /**\n     * fullPage prop two-way binding\n     * @param value {boolean} - updated fullPage prop\n     */\n    \"update:fullPage\": [value: boolean];\n    /**\n     * on component close event\n     * @param value {unknown} - close event data\n     */\n    close: [...args: unknown[]];\n}>();\n\nconst rootRef = useTemplateRef(\"rootElement\");\n\nconst isFullPage = defineModel<boolean>(\"fullPage\", { default: true });\n\nconst isActive = defineModel<boolean>(\"active\", { default: false });\n\nconst toggleScroll = usePreventScrolling(props.clipScroll);\n\nwatch(isActive, (value) => {\n    if (isFullPage.value) toggleScroll(value);\n});\n\n// --- Events Feature ---\n\nif (isClient) {\n    // register onKeyPress event when is active\n    useEventListener(rootRef, \"keyup\", onKeyPress, { trigger: isActive });\n}\n\n/** Keypress event that is bound to the document. */\nfunction onKeyPress(event: KeyboardEvent): void {\n    if (!isActive.value) return;\n    if (event.key === \"Escape\" || event.key === \"Esc\") cancel(\"escape\");\n}\n\n/**\n * Check if method is cancelable.\n * Call close() with action `cancel`.\n * @param method Cancel method\n */\nfunction cancel(method: string): void {\n    // check if method is cancelable\n    if (\n        !props.cancelable ||\n        (Array.isArray(props.cancelable) && !props.cancelable.includes(method))\n    )\n        return;\n    close({ action: \"cancel\", method });\n}\n\n/** set active to false and emit close event */\nfunction close(...args: unknown[]): void {\n    isActive.value = false;\n    emits(\"close\", args);\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-loading\"],\n    [\"fullPageClass\", \"o-loading--fullpage\", null, isFullPage],\n);\n\nconst overlayClasses = defineClasses([\"overlayClass\", \"o-loading__overlay\"]);\n\nconst iconClasses = defineClasses([\"iconClass\", \"o-loading__icon\"]);\n\nconst labelClasses = defineClasses([\"labelClass\", \"o-loading__label\"]);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ close });\n</script>\n\n<template>\n    <transition :name=\"animation\">\n        <div\n            v-if=\"isActive\"\n            ref=\"rootElement\"\n            data-oruga=\"loading\"\n            :class=\"rootClasses\"\n            role=\"status\"\n            aria-live=\"polite\">\n            <div\n                :class=\"overlayClasses\"\n                :tabindex=\"-1\"\n                @click=\"cancel('outside')\" />\n            <!-- \n                @slot Override icon and label\n                @binding {close} close - function to close the component\n            -->\n            <slot :close=\"close\">\n                <o-icon\n                    :icon=\"icon\"\n                    :spin=\"iconSpin\"\n                    :size=\"iconSize\"\n                    :class=\"iconClasses\"\n                    both />\n                <span v-if=\"label\" :class=\"labelClasses\">\n                    {{ label }}\n                </span>\n            </slot>\n        </div>\n    </transition>\n</template>\n"],"names":["useTemplateRef","_useModel","usePreventScrolling","watch","isClient","useEventListener","defineClasses"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,UAAM,QAAQ;AAad,UAAM,QAAQ;AAkBR,UAAA,UAAUA,mBAAe,aAAa;AAEtC,UAAA,aAAaC,IAAAA,SAAqB,SAAA,UAA6B;AAE/D,UAAA,WAAWA,IAAAA,SAAoB,SAAC,QAA4B;AAE5D,UAAA,eAAeC,oBAAAA,oBAAoB,MAAM,UAAU;AAEnDC,cAAA,UAAU,CAAC,UAAU;AACnB,UAAA,WAAW,MAAO,cAAa,KAAK;AAAA,IAAA,CAC3C;AAID,QAAIC,iBAAU;AAEVC,uBAAA,iBAAiB,SAAS,SAAS,YAAY,EAAE,SAAS,UAAU;AAAA,IAAA;AAIxE,aAAS,WAAW,OAA4B;AACxC,UAAA,CAAC,SAAS,MAAO;AACrB,UAAI,MAAM,QAAQ,YAAY,MAAM,QAAQ,cAAc,QAAQ;AAAA,IAAA;AAQtE,aAAS,OAAO,QAAsB;AAElC,UACI,CAAC,MAAM,cACN,MAAM,QAAQ,MAAM,UAAU,KAAK,CAAC,MAAM,WAAW,SAAS,MAAM;AAErE;AACJ,YAAM,EAAE,QAAQ,UAAU,OAAA,CAAQ;AAAA,IAAA;AAItC,aAAS,SAAS,MAAuB;AACrC,eAAS,QAAQ;AACjB,YAAM,SAAS,IAAI;AAAA,IAAA;AAKvB,UAAM,cAAcC,cAAA;AAAA,MAChB,CAAC,aAAa,WAAW;AAAA,MACzB,CAAC,iBAAiB,uBAAuB,MAAM,UAAU;AAAA,IAC7D;AAEA,UAAM,iBAAiBA,cAAA,cAAc,CAAC,gBAAgB,oBAAoB,CAAC;AAE3E,UAAM,cAAcA,cAAA,cAAc,CAAC,aAAa,iBAAiB,CAAC;AAElE,UAAM,eAAeA,cAAA,cAAc,CAAC,cAAc,kBAAkB,CAAC;AAKxD,aAAA,EAAE,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}